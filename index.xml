<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>Max Gonzih on Max Gonzih</title>
    <link>https://blog.gonzih.me/</link>
    <description>Recent content in Max Gonzih on Max Gonzih</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gonzih@gmail.com (Max Gonzih)</managingEditor>
    <webMaster>gonzih@gmail.com (Max Gonzih)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <lastBuildDate>Thu, 28 Jan 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.gonzih.me/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>DIY Dependabot for Clojure</title>
      <link>https://blog.gonzih.me/blog/2021/01/28/diy-dependabot-for-clojure/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2021/01/28/diy-dependabot-for-clojure/</guid>
      <description>&lt;p&gt;Unfortunately &lt;a href=&#34;https://dependabot.com&#34;&gt;dependabot&lt;/a&gt; does not support clojure.
And as such I came with a silly idea of putting something similar together using Github Actions.&lt;/p&gt;
&lt;p&gt;First things first here is complete Github Actions workflow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Dependencies&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;schedule&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;cron&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0 */3 * * *&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:

&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;bump&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;container&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nixos/nix&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nix-env -i clojure&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;run depot&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;clojure -Sdeps &amp;#39;{:aliases {:outdated {:replace-deps {olical/depot {:mvn/version &amp;#34;2.1.0&amp;#34;}}}}}&amp;#39; -M:outdated -m depot.outdated.main --every --write &amp;gt; deps-output.txt&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/upload-artifact@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps-output&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps-output.txt&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/upload-artifact@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps.edn&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;open-pr&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;needs&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bump&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/download-artifact@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps-output&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/download-artifact@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;get-pr-body&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        body=$(cat deps-output.txt)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        echo ::set-output name=body::$body&lt;/span&gt;        
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;create PR&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cpr&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;token&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Update dependencies&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ steps.get-pr-body.outputs.body }}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;branch&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;update-dependencies&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;dependencies&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;check outputs&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        echo &amp;#34;Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        echo &amp;#34;Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}&amp;#34;&lt;/span&gt;        
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;geekyeggo/delete-artifact@v1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps-output&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;geekyeggo/delete-artifact@v1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now lets step by step to see what is going on here.&lt;/p&gt;
&lt;p&gt;First we allow workflow to be scheduled manually for testing purposes and via cron schedule every 3 hours:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;schedule&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;cron&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0 */3 * * *&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After that we define our first job.
Workflow is split in to two pieces because &lt;code&gt;peter-evans/create-pull-request@v3&lt;/code&gt; has some issues running in custom containers (based on my experience).
And because of &lt;code&gt;rlwrap&lt;/code&gt; issue in docker.
If you are able to run clojure clj tool in ubuntu image directly this config can be drastically simplified.&lt;/p&gt;
&lt;p&gt;I do run actions for this project in nixos countainers and after checkout is done I make sure that clojure cli tool is available:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nix-env -i clojure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run depot in this example I just use example command from depot &lt;a href=&#34;https://github.com/Olical/depot#usage&#34;&gt;README.md&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;run depot&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;clojure -Sdeps &amp;#39;{:aliases {:outdated {:replace-deps {olical/depot {:mvn/version &amp;#34;2.1.0&amp;#34;}}}}}&amp;#39; -M:outdated -m depot.outdated.main --every --write &amp;gt; deps-output.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this is done we get two files that we care about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deps.edn&lt;/code&gt; - dependencies file that was modified by depot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deps-output.txt&lt;/code&gt; - depot stdout that we can use as a body for a pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To transfer those two files we are going to utilize github artifacts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/upload-artifact@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps-output&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps-output.txt&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/upload-artifact@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps.edn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we can proceed with creating pull request.
It is important to tell our second job that it has to wait for a first one to complete.
Otherwise there would be no files available for download from storage.
To do that we can simply say that job &lt;code&gt;needs: bump&lt;/code&gt;, &lt;code&gt;bump&lt;/code&gt; being the name of our first job of course.&lt;/p&gt;
&lt;p&gt;First lets download our two files from artifact storage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/download-artifact@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps-output&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/download-artifact@v2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this is done we need to read output file and store it in output variable of a step.
To later reuse this variable we give this step id &lt;code&gt;get-pr-body&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;get-pr-body&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        body=$(cat deps-output.txt)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        echo ::set-output name=body::$body&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now lets create our pull request.
To allow this action to access our repository we will need to give it a token.
I used &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;Personal Access Token&lt;/a&gt; with &lt;code&gt;repo&lt;/code&gt; scope fully enabled.
You can see how we extract body using variable inlining with &lt;code&gt;${{ steps.get-pr-body.outputs.body }}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;create PR&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cpr&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;token&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Update dependencies&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ steps.get-pr-body.outputs.body }}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;branch&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;update-dependencies&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;dependencies&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this step succeeded we can print pull request information (mostly for debugging purposes)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;check outputs&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        echo &amp;#34;Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        echo &amp;#34;Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}&amp;#34;&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And of course lets not forget to cleanup after ourselves!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;geekyeggo/delete-artifact@v1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps-output&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;geekyeggo/delete-artifact@v1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it! One day there might be a better tool or approach to solve this, but for now our small workflow should do just fine :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>3D printed foraging cat toy</title>
      <link>https://blog.gonzih.me/blog/2020/02/12/3d-printed-foraging-cat-toy/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2020/02/12/3d-printed-foraging-cat-toy/</guid>
      <description>&lt;p&gt;Here is a foraging cat toy based on design I saw in a &lt;a href=&#34;https://www.youtube.com/watch?v=Su1XqO96X2Y&#34;&gt;youtube video&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCUuMYw2l2UeWyTGYixYfRCA&#34;&gt;EvanAndKatelyn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Main difference in this design is that it&amp;rsquo;s implemented in OpenSCAD and as a result is fully configurable.&lt;/p&gt;
&lt;p&gt;3D designs are available on &lt;a href=&#34;https://github.com/Gonzih/scad-library/blob/master/stl/foraging_cat_toy.stl&#34;&gt;github&lt;/a&gt;.
OpenSCAD source code is available also on &lt;a href=&#34;https://github.com/Gonzih/scad-library/blob/master/foraging_cat_toy.scad&#34;&gt;github&lt;/a&gt;,
which can be used to customize this design.&lt;/p&gt;
&lt;h3 id=&#34;preview-model-linkhttpsgithubcomgonzihscad-libraryblobmasterstlforaging_cat_toy_previewstl&#34;&gt;Preview model &lt;a href=&#34;https://github.com/Gonzih/scad-library/blob/master/stl/foraging_cat_toy_preview.stl&#34;&gt;[link]&lt;/a&gt;&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;complete-model-linkhttpsgithubcomgonzihscad-libraryblobmasterstlforaging_cat_toystl&#34;&gt;Complete model &lt;a href=&#34;https://github.com/Gonzih/scad-library/blob/master/stl/foraging_cat_toy.stl&#34;&gt;[link]&lt;/a&gt;&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;ps&#34;&gt;PS&lt;/h3&gt;
&lt;p&gt;Pictures of toy in action are coming soon.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scripting with Go on NixOS</title>
      <link>https://blog.gonzih.me/blog/2019/04/26/scripting-with-go-on-nixos/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2019/04/26/scripting-with-go-on-nixos/</guid>
      <description>&lt;p&gt;This is a short HOWTO based on great idea from &lt;a href=&#34;https://blog.cloudflare.com/using-go-as-a-scripting-language-in-linux/&#34;&gt;this blog post&lt;/a&gt; on how
to utilize &lt;a href=&#34;https://github.com/erning/gorun&#34;&gt;gorun&lt;/a&gt; and &lt;code&gt;binfmt_misc&lt;/code&gt; to use go files for scripting.&lt;/p&gt;
&lt;p&gt;First lets install &lt;code&gt;gorun&lt;/code&gt; as a system package on NixOS.&lt;/p&gt;
&lt;p&gt;Lets create &lt;code&gt;gorun.nix&lt;/code&gt; file first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; {};

buildGoPackage &lt;span style=&#34;color:#66d9ef&#34;&gt;rec&lt;/span&gt; {
  name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gorun-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;version&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
  version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master-85cd5f5e084af0863ed0c3f18c00e64526d1b899&amp;#34;&lt;/span&gt;;
  goPackagePath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/erning/gorun&amp;#34;&lt;/span&gt;;

  src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fetchFromGitHub {
    owner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;erning&amp;#34;&lt;/span&gt;;
    repo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gorun&amp;#34;&lt;/span&gt;;
    rev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;85cd5f5e084af0863ed0c3f18c00e64526d1b899&amp;#34;&lt;/span&gt;;
    sha256 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha256:1hdqimfzpynnpqc7p8m8hkcv9dlfbd8kl22979i6626nq57dvln8&amp;#34;&lt;/span&gt;;
  };

  meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; stdenv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lib; {
    description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gorun is a tool enabling one to put a &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bang line&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; in the source code of a Go program to run it&amp;#34;&lt;/span&gt;;
    homepage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;https://github.com/erning/gorun&lt;/span&gt;;
    license &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; licenses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mit;
    maintainers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; maintainers; [ Gonzih ];
    platforms &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; platforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linux &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; platforms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;darwin;
  };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next lets add this package to &lt;code&gt;systemPackages&lt;/code&gt; list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;systemPackages &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  (&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./gorun.nix&lt;/span&gt;)
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next step would be to utilize &lt;code&gt;boot.binfmtMiscRegistrations&lt;/code&gt; to register our &lt;code&gt;gorun&lt;/code&gt; in &lt;code&gt;binfmt_misc&lt;/code&gt; module which is
responsible for parsing shebang scripts and binary files. Drop the following lines in to your &lt;code&gt;configuration.nix&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;boot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binfmtMiscRegistrations &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; {
  go &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    recognitionType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;extension&amp;#34;&lt;/span&gt;;
    magicOrExtension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;;
    interpreter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/run/current-system/sw/bin/gorun&amp;#34;&lt;/span&gt;;
    preserveArgvZero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
    openBinary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    matchCredentials &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    fixBinary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
  };
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What does this configuration do? &lt;code&gt;recognitionType&lt;/code&gt; tells &lt;code&gt;binfmt&lt;/code&gt; to make a decision based on file extension,
&lt;code&gt;magicOrExtension&lt;/code&gt; tells it to look for &lt;code&gt;.go&lt;/code&gt; extension, &lt;code&gt;interpreter&lt;/code&gt; specifies which binary to invoke,
&lt;code&gt;openBinary&lt;/code&gt; corresponds to &lt;code&gt;O&lt;/code&gt; flag of &lt;code&gt;binfmt&lt;/code&gt; (which I dont fully understand tbh), &lt;code&gt;matchCredentials&lt;/code&gt; tells kernel to run
interpreter with permissions set on original script. For more information on &lt;code&gt;binfmt&lt;/code&gt; please do check out &lt;a href=&#34;https://www.kernel.org/doc/html/v4.14/admin-guide/binfmt-misc.html&#34;&gt;these amazing kernel docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now lets simply run &lt;code&gt;sudo nixos-rebuild --switch&lt;/code&gt; and after everything is done lets give it a try.&lt;/p&gt;
&lt;p&gt;First lets create a simple hello world script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lets make it executable with &lt;code&gt;chmod +x hello.go&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And now lets run it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ./hello.go
Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yay! It works!&lt;/p&gt;
&lt;p&gt;Hope that helps somewhat.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Routing with Go on Google Cloud Functions</title>
      <link>https://blog.gonzih.me/blog/2019/01/18/routing-with-go-on-google-cloud-functions/</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2019/01/18/routing-with-go-on-google-cloud-functions/</guid>
      <description>&lt;p&gt;Couple of days ago Google cloud functions got &lt;a href=&#34;https://cloud.google.com/blog/products/application-development/cloud-functions-go-1-11-is-now-a-supported-language&#34;&gt;official support for go 1.11&lt;/a&gt;.
I got interested in how to handle routing in cloud functions in go, so after couple of experiments I came up with a solution based on &lt;code&gt;http.ServeMux&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get started with cloud functions you can follow &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/cloud-starting-cloudfunctions/index.html?index=..%2F..index#0&#34;&gt;this simple tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of many neat things about cloud functions is that they can be built from existing Github repository. You simply have to define Google source repository that mirrors one on Github and use this repository as the source repository for your newly defined cloud function.&lt;/p&gt;
&lt;p&gt;It feels like go code you upload to cloud function gets loaded by some generated code as a dependency.&lt;/p&gt;
&lt;p&gt;Ultimately we can simply define our own router using &lt;code&gt;NewServeMux&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newMux&lt;/span&gt;()

&lt;span style=&#34;color:#75715e&#34;&gt;//F represents cloud function entry point
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newMux&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeMux&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServeMux&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/one&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;one&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/two&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;two&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/subroute/three&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;three&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mux&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;one&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello from one&amp;#34;&lt;/span&gt;))
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello from two&amp;#34;&lt;/span&gt;))
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;three&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello from three&amp;#34;&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can access your handlers by appending &lt;code&gt;/one&lt;/code&gt;, &lt;code&gt;/two&lt;/code&gt; or &lt;code&gt;/subroute/three&lt;/code&gt; to URL that cloud functions will have in triggers section of the UI like this: &lt;code&gt;https://us-central1-my-test-project-123456.cloudfunctions.net/my-function-1/one&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This works because your cloud function receives request with prefix stripped away from the URL. This is very handy since allows one to port existing http server in to cloud function without changing it too much.&lt;/p&gt;
&lt;p&gt;I hope this helps, and happy hacking on cloud functions with go!&lt;/p&gt;
&lt;p&gt;Example code can be &lt;a href=&#34;https://github.com/Gonzih/go-google-functions-demo&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YubiKey as a portable SSH key</title>
      <link>https://blog.gonzih.me/blog/2018/09/08/yubikey-as-a-portable-ssh-key/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2018/09/08/yubikey-as-a-portable-ssh-key/</guid>
      <description>&lt;p&gt;This blog post is just a bunch of shell snippets quickly put together that explain how to use YubiKey as your ssh key.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;So first things first, we will have to enable CCID (smartcard interface) on YubiKey:&lt;/p&gt;
&lt;p&gt;For YubiKey Neo or YubiKey 4 run following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ykpersonalize -m82
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For YubiKey 5:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ykman config usb --enable-all &lt;span style=&#34;color:#75715e&#34;&gt;# For USB&lt;/span&gt;
$ ykman config nfc --enable-all &lt;span style=&#34;color:#75715e&#34;&gt;# For NFC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next step would be to change default PINs on YubiKey:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gpg --card-edit

gpg/card&amp;gt; admin
Admin commands are allowed

gpg/card&amp;gt; passwd
gpg: OpenPGP card no. _____ detected

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; - change PIN
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; - unblock PIN
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; - change Admin PIN
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; - set the Reset Code
Q - quit

&lt;span style=&#34;color:#75715e&#34;&gt;# default password here is 123456&lt;/span&gt;
Your selection? &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

...

gpg: OpenPGP card no. _____ detected

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; - change PIN
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; - unblock PIN
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; - change Admin PIN
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; - set the Reset Code
Q - quit

&lt;span style=&#34;color:#75715e&#34;&gt;# default password here is 12345678&lt;/span&gt;
Your selection? &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you mess anything up (forgot your PIN for example), you can always nuke OpenPGP configuration on your YubiKey:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ykman openpgp reset
WARNING! This will delete all stored OpenPGP keys and data and restore factory settings? &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;y/N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two ways to use your YubiKey as a ssh key:&lt;/p&gt;
&lt;h2 id=&#34;method-1-generating-keys-on-yubikey-itself&#34;&gt;Method #1: Generating keys on YubiKey itself&lt;/h2&gt;
&lt;p&gt;Simply run the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gpg --card-edit

gpg/card&amp;gt; generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Benefit of this method is that your keys and YubiKey are self contained, this is also a downside of this method.
If you lost a key, you also going to loose access to your private key.
There is no way to backup secret keys from YubiKey itself.
I did not really test this method extensively, but still felt like mentioning this as a valuable option.&lt;/p&gt;
&lt;h2 id=&#34;method-2-generating-a-subkey-for-your-own-private-key&#34;&gt;Method #2: Generating a subkey for your own private key&lt;/h2&gt;
&lt;p&gt;So lets say you generated your own private key with id &lt;code&gt;ABCDEFG&lt;/code&gt;, now we can generate 2 subkeys and store them on our YubiKey.
The advantage of this approach is in the fact that subkeys can be revoked by using your private key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gpg --edi-key ABCDEFG

gpg&amp;gt; addcardkey

Signature key ....: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Encryption key....: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Authentication key: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

Please &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; the type of key to generate:
   &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Signature key
   &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Encryption key
   &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Authentication key
Your selection? &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Now answer bunch of questions and enter PIN couple of times to make gpg happy&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# After that we can do the same for the Signature key&lt;/span&gt;

...

gpg&amp;gt; addcardkey

Signature key ....: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Encryption key....: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Authentication key: OUR NEW KEY ID

Please &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; the type of key to generate:
   &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Signature key
   &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Encryption key
   &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Authentication key
Your selection? &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Now lets use toggle to switch in to private key listing mode&lt;/span&gt;
&amp;gt; toggle

&lt;span style=&#34;color:#75715e&#34;&gt;# And now lets select our main private key&lt;/span&gt;
&amp;gt; key &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Time to upload card keys to our YubiKey in to encryption slot&lt;/span&gt;
&amp;gt; keytocard

Signature key ....: ANOTHER ID
Encryption key....: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Authentication key: OUR NEW KEY ID

Please &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; where to store the key:
   &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Encryption key
Your selection? &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# And we are done here&lt;/span&gt;
gpg&amp;gt; save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Don&amp;rsquo;t forget to distribute your private key if needed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gpg --keyserver hkps://keys.gnupg.net --send-key ABCDEFG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;final-steps&#34;&gt;Final steps&lt;/h2&gt;
&lt;p&gt;Generating ssh key out of our gpg key is pretty straightforward:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gpg --export-ssh-key ABCDEFG
ssh-rsa BLABLABLA openpgp:someid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now its time to start &lt;code&gt;gpg-agent&lt;/code&gt; with ssh support on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gpg-agent --daemon --enable-ssh-support
&lt;span style=&#34;color:#75715e&#34;&gt;# or on older gpg versions you can generate env file that you can source in your .bashrc directly&lt;/span&gt;
$ gpg-agent --daemon --enable-ssh-support --write-env-file ~/.gpg-agent-env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or if you are on systemd based system there is a chance that your user already has a bunch of systemd sockets enabled for this purpose.
One socket that you should be interested in is &lt;code&gt;gpg-agent-ssh.socket&lt;/code&gt;, you can see if its running by running &lt;code&gt;systemctl --user status gpg-agent-ssh.socket&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add this to your &lt;code&gt;.bashrc&lt;/code&gt; to initialize env var properly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export SSH_AUTH_SOCK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;gpgconf --list-dirs agent-ssh-socket&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Last improvement that can be made to this setup is forcing gpg-agent to use pcscd instead of ccid.
This should solve some issues with a card being unavailable when some other application is accessing it.
Just add following to the &lt;code&gt;~/.gnupg/scdaemon.conf&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;pcsc-driver /usr/lib/libpcsclite.so
card-timeout 5
disable-ccid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setting-up-key-on-a-new-machine&#34;&gt;Setting up key on a new machine&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pull key info from a keyserver&lt;/span&gt;
$ gpg --keyserver hkps://pgp.mit.edu --recv-key ABCDEFG

&lt;span style=&#34;color:#75715e&#34;&gt;# Initialize smart card data in gpg db&lt;/span&gt;
$ gpg --card-status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And if gpg-agent is setup properly you should be ready to go. Just plug in your YubiKey and try to ssh to some host, you should see PIN prompt which means everything works as expected.&lt;/p&gt;
&lt;h2 id=&#34;caching-pin-on-a-key-itself&#34;&gt;Caching PIN on a key itself&lt;/h2&gt;
&lt;p&gt;It might be annoying to type in PIN on every action every time, there is an option to cache PIN on YubiKey itself, so you will have to input PIN only once after you plugged your key (will have to do that every time you unplug/plug your key) for every action (separate key cache for signing/authenticating using the key).
To do that you should enable &lt;code&gt;forcesig&lt;/code&gt; in &lt;code&gt;gpg&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gpg --card-edit

gpg/card&amp;gt; admin
Admin commands are allowed

gpg/card&amp;gt; forcesig
gpg/card&amp;gt; save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To add extra layer of security, you can enable &lt;a href=&#34;https://developers.yubico.com/PGP/Card_edit.html&#34;&gt;YubiKey 4 Touch&lt;/a&gt; feature (every action will have to be confirmed with a touch), this can be enabled using &lt;code&gt;yubikey-manager&lt;/code&gt; cli:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ykman openpgp touch aut on
$ ykman openpgp touch sig on
$ ykman openpgp touch enc on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ps&#34;&gt;P.S.&lt;/h3&gt;
&lt;p&gt;GPG agent for NixOS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;programs.ssh.startAgent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
programs.gnupg.agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true; enableSSHSupport &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Arch Linux on Lenovo IdeaPad Y700 15&#34;</title>
      <link>https://blog.gonzih.me/blog/2015/12/11/arch-linux-on-lenovo-ideapad-y700-15/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2015/12/11/arch-linux-on-lenovo-ideapad-y700-15/</guid>
      <description>&lt;p&gt;Collection of tweaks that I gathered after installing Arch Linux on to Lenovo IdeaPAD Y700.&lt;/p&gt;
&lt;h1 id=&#34;what-works&#34;&gt;What works&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;WIFI&lt;/li&gt;
&lt;li&gt;Suspend (look at the bumblebee issue with suspend if nvidia module gets loaded on resume)&lt;/li&gt;
&lt;li&gt;Hibernate&lt;/li&gt;
&lt;li&gt;Sound without subwoofer&lt;/li&gt;
&lt;li&gt;Video (I used bumblebee to switch between intel/nvidia GPUs)&lt;/li&gt;
&lt;li&gt;Brightness&lt;/li&gt;
&lt;li&gt;Keyboard backlit&lt;/li&gt;
&lt;li&gt;Power managment via laptop mode tools and systemd.&lt;/li&gt;
&lt;li&gt;Card reader (you might need to run &lt;code&gt;echo 1 | sudo tee /sys/bus/pci/rescan&lt;/code&gt; so card reader becomes visible)&lt;/li&gt;
&lt;li&gt;HDMI output&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;what-does-not-work-so-far&#34;&gt;What does not work so far&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Subwoofer&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;
&lt;h2 id=&#34;boot&#34;&gt;Boot&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add nomodeset to the kernel options on Live USB boot&lt;/li&gt;
&lt;li&gt;Make sure secure boot is disabled (to make your life easier)&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://wiki.archlinux.org/index.php/Installation_guide&#34;&gt;arch linux installation instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;extra-tweaking&#34;&gt;Extra tweaking&lt;/h1&gt;
&lt;h2 id=&#34;video&#34;&gt;Video&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure switchable GPUs are enabled in BIOS&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://wiki.archlinux.org/index.php/Bumblebee#Installing_Bumblebee_with_Intel.2FNVIDIA&#34;&gt;insructions on the arch wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To enable intel GPU add &lt;code&gt;i915.preliminary_hw_support=1&lt;/code&gt; to &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; in the &lt;code&gt;/etc/default/grub&lt;/code&gt; file. This should be solved after 4.3 kernel release.&lt;/li&gt;
&lt;li&gt;Problems with video scaling in fullscreen mode can be solved by using gl as an output driver (mplayer -vo gl).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;wifi&#34;&gt;Wifi&lt;/h2&gt;
&lt;p&gt;Since there is no HW based wifi switch (only Fn+F5 combination) and kernel still tries to read it wifi is reported disabled on every boot.
There was a patch for the 17 inch model &lt;a href=&#34;https://www.gossamer-threads.com/lists/linux/kernel/2323659&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;temporary-solution-1&#34;&gt;Temporary solution 1:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl enable rfkill-unblock@wifi.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo rfkill unblock wifi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Works fine with &lt;code&gt;wicd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Configuring NetworkManager service to be run after rfkill service should also work&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;temporary-solution-2&#34;&gt;Temporary solution 2:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo blacklist ideapad_laptop | sudo tee /etc/modprobe.d/blacklist.conf&lt;/code&gt; to disable acpi module&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;audio-clicking&#34;&gt;Audio clicking&lt;/h2&gt;
&lt;p&gt;This is caused by suspend-on-idle module in the pulse audio. Instead of disabling the module I decided to just set very long timeout.
To do that append &lt;code&gt;timeout=36000&lt;/code&gt; to line &lt;code&gt;load-module module-suspend-on-idle&lt;/code&gt; in the &lt;code&gt;/etc/pulse/default.pa&lt;/code&gt; configuration file.
And now restart pulse by running &lt;code&gt;pulseaudio --kill&lt;/code&gt; and &lt;code&gt;pulseaudio --start&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;hibernate&#34;&gt;Hibernate&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;resume=/dev/my-swap-partition&lt;/code&gt; to &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; line in &lt;code&gt;/etc/default/grub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;sudo grub-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;resume&lt;/code&gt; to the list of &lt;code&gt;HOOKS&lt;/code&gt; in &lt;code&gt;/etc/mkinitcpio.conf&lt;/code&gt; before &lt;code&gt;filesystems&lt;/code&gt; but after all &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;sata&lt;/code&gt; and other hardware related hooks.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;sudo mkinitcpio -p linux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reboot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl hibernate&lt;/code&gt; should work now&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Arch Linux on Macbook Pro 8.2 (17&#34; 2011)</title>
      <link>https://blog.gonzih.me/blog/2015/08/08/arch-linux-on-macbook-pro-8-dot-2-17-2011/</link>
      <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2015/08/08/arch-linux-on-macbook-pro-8-dot-2-17-2011/</guid>
      <description>&lt;p&gt;Couple of tips from my experience of running Arch on Macbook 8.2.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Arch Wiki page&lt;!-- raw HTML omitted --&gt; covers installation well enough in my opinion.&lt;/p&gt;
&lt;h3 id=&#34;bootloader-via-systemd-boot&#34;&gt;Bootloader via systemd-boot&lt;/h3&gt;
&lt;p&gt;Before installing boot loader change /boot partition type to &lt;code&gt;EFI System&lt;/code&gt; (&lt;code&gt;ef00&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkfs.fat -F32 /dev/sda1
pacman -S dosfstools
mount /dev/sda1 /mnt/boot
arch-chroot /mnt
bootctl --path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/boot instnall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bootloader-via-grub&#34;&gt;Bootloader via grub&lt;/h3&gt;
&lt;p&gt;You need to have 2 partitions. /boot should be linux partition ext2. /boot/efi should be &lt;code&gt;ef00&lt;/code&gt; type partition of vfta32.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mount /dev/sda1 /mnt/boot
mkdir -p /mnt/boot/efi
mount /dev/sda2 /mnt/boot/efi
modprobe dm-mod
arch-chroot /mnt
grub-install --target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x86_64-efi --efi-directory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/boot/efi --bootloader-id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arch_grub --recheck --debug
mkdir -p /boot/grub/locale
cp /usr/share/locale/en&lt;span style=&#34;color:#ae81ff&#34;&gt;\@&lt;/span&gt;quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;use-broadcom-wl-wireless-module-from-aur&#34;&gt;Use broadcom-wl wireless module from AUR&lt;/h2&gt;
&lt;p&gt;This is proprietary broadcom driver. Works fine with BCM4331.
Only thing that does not work - hidden SSID.&lt;/p&gt;
&lt;p&gt;OpenSource driver (that is part of the kernel) and reverse engeneered ones (b43) are too unstable in my experience.&lt;/p&gt;
&lt;p&gt;To make sure that correct module is used by hardwrare blacklist every other module and reboot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;#/etc/modprobe.d/wl.conf
blacklist b43
blacklist b43legacy
blacklist ssb
blacklist bcm43xx
blacklist brcm80211
blacklist brcmfmac
blacklist brcmsmac
blacklist bcma
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;disable-radeon-gpu-for-better-power-consumption&#34;&gt;Disable Radeon GPU for better power consumption&lt;/h2&gt;
&lt;p&gt;This will reduce power usage dramatically but also will disable external screen support via display port.
This laptop relies on the external gpu to work with display port.&lt;/p&gt;
&lt;p&gt;Edit &lt;code&gt;/etc/grub.d/00_header&lt;/code&gt; and add outb lines in between &lt;code&gt;set gfxmode=${GRUB_GFXMODE}&lt;/code&gt; and &lt;code&gt;load video&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;...
set gfxmode=${GRUB_GFXMODE}
outb 0x728 1
outb 0x710 2
outb 0x740 2
outb 0x750 0
load video
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Generate new grub config:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# grub-mkconfig -o /boot/grub/grub.cfg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PS. This post will probably grow over time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nvim terminal &#43; ClojureScript and figwheel</title>
      <link>https://blog.gonzih.me/blog/2015/06/15/nvim-terminal-plus-clojurescript-and-figwheel/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2015/06/15/nvim-terminal-plus-clojurescript-and-figwheel/</guid>
      <description>&lt;p&gt;This is a small post on how to improve your ClojureScript development flow in NeoVim using its terminal feature.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;NeoVim&lt;/a&gt; nowadays is almost fully compatible with vim.
It is able to reuse my &lt;a href=&#34;https://github.com/Gonzih/.vim/blob/master/vimrc&#34;&gt;.vimrc&lt;/a&gt; file without any issues.
And recently it got proper terminal emulator built-in.
So how about reusing it for ClojureScript development?&lt;/p&gt;
&lt;p&gt;If you are lazy (like I am) and don&amp;rsquo;t want to setup piggieback support
for fireplace.vim or don&amp;rsquo;t feel like tmux integration is good enough
this solution should be your new starting point.&lt;/p&gt;
&lt;p&gt;Just open some clojure[script] file and create second split.
Open terminal using &lt;code&gt;:terminal&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Here are some keybindings that will help you to send code from
your clojure buffer to the terminal buffer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nvim&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  &amp;#34; Open terminal and run lein figwheel&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;term&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;terminal&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lein&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;figwheel&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-\&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  &amp;#34; Evaluate anything from the visual mode in the next window&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;&amp;gt; ,&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wpi&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-\&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  &amp;#34; Evaluate outer most form&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;&amp;gt; ,&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; ^&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;%,&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  &amp;#34; Evaluate buffer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;&amp;gt; ,&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ggVG&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hey! Now you can finally stop looking at the emacs land!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ServerSide rendering of Reagent components</title>
      <link>https://blog.gonzih.me/blog/2015/02/16/serverside-rendering-of-reagent-components/</link>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2015/02/16/serverside-rendering-of-reagent-components/</guid>
      <description>&lt;p&gt;Great thing about React is that you can write what people nowadays call &amp;ldquo;isomorphic JavaScript&amp;rdquo;.
In this post we will not discuss how wrong this term is in many ways,
but instead we will focus on how to achieve similar results in your ClojureScript code using Reagent library.&lt;/p&gt;
&lt;p&gt;In my experience simplest optimization to run in some js engine on server side is whitespace.
It does not do any renaming/restructuring of your code but eliminates need to take care of dependencies loading.
So our compiler configuration should look something like that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;:id&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server-side&amp;#34;&lt;/span&gt;
 &lt;span style=&#34;color:#e6db74&#34;&gt;:source-paths&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;]
 &lt;span style=&#34;color:#e6db74&#34;&gt;:compiler&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:output-to&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/public/javascripts/server-side.js&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;:output-dir&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/public/javascripts/out-server-side&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;:preamble&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;meta-inf/resources/webjars/react/0.12.1/react-with-addons.min.js&amp;#34;&lt;/span&gt;]
            &lt;span style=&#34;color:#e6db74&#34;&gt;:pretty-print&lt;/span&gt; false
            &lt;span style=&#34;color:#e6db74&#34;&gt;:warnings&lt;/span&gt; true
            &lt;span style=&#34;color:#e6db74&#34;&gt;:optimizations&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:whitespace&lt;/span&gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next step is to make sure that all functions that use browser specific stuff like document/window are moved in to react lifecycle methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;main-component
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;with-meta&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[] ...)
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:component-did-mount&lt;/span&gt; (comp init-my-scroll-handler!
                                also-init-my-go-loop!)}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next let&amp;rsquo;s create function that will do some rendering to the string.
I like to keep this function in a component specific ns just for convenience.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:export&lt;/span&gt; render-me-to-s [initial-state]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reset!&lt;/span&gt; my-main-state (&lt;span style=&#34;color:#a6e22e&#34;&gt;js-&amp;gt;clj&lt;/span&gt; initial-state))
  &lt;span style=&#34;color:#75715e&#34;&gt;; Render component to markup without reactid&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reagent.core/render-to-static-markup&lt;/span&gt; [main-component])
  &lt;span style=&#34;color:#75715e&#34;&gt;; Or render component to ready to-go react markup&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reagent.core/render-to-string&lt;/span&gt; [main-component]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now server side bootstrapping, most of this code was taken from &lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails plugin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all react expects to have global or window objects in your js engine (setup.js):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; {};
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;warn&amp;#39;&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;)) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {};
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s try and use all this in our code (for now in Ruby):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;cxt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;V8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
cxt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;setup.js&amp;#39;&lt;/span&gt;)
cxt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources/public/javascripts/server-side.js&amp;#39;&lt;/span&gt;)
html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cxt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my.amazing_component.ns.render_me_to_s(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it. As a way to pass data from ruby to clojurescript json works fine.
Sometimes you might want to use &lt;code&gt;ActionController::Base.helpers.j&lt;/code&gt; helper that will
escape your data for usage inside json, but most of the time you should be alright without it.&lt;/p&gt;
&lt;p&gt;If you have issues with core.async there are 2 ways to solve it.
I personally prefer to move core.async initialization into some lifecycle method.
Another solution is to implement setTimeout function like that in your &lt;code&gt;setup.js&lt;/code&gt; snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;goog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cb&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;cb&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now frontend part. First let&amp;rsquo;s in-line generated html in to the container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;%= html %&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then let&amp;rsquo;s write function that will render our component on frontend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:export&lt;/span&gt; mount-me [initial-state]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reset!&lt;/span&gt; my-main-state (&lt;span style=&#34;color:#a6e22e&#34;&gt;js-&amp;gt;clj&lt;/span&gt; initial-state))
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reagent.core/render&lt;/span&gt; [main-component]
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;js/document.getElementById&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As far as I understand react should reuse your markup on frontend and just attach new handlers to it.
Am I wrong on this one? Don&amp;rsquo;t know yet.&lt;/p&gt;
&lt;p&gt;Inline javascript that you should use on frontend looks like that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;my&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;amazing_component&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mount_me&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;%=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init_state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;to_json&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;&lt;/span&gt;)
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;nashorn-example-result-of-my-experiments-in-the-repl&#34;&gt;Nashorn example (result of my experiments in the REPL)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(import &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;[javax.script ScriptEngineManager])
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;nashorn (&lt;span style=&#34;color:#a6e22e&#34;&gt;.getEngineByName&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ScriptEngineManager.&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nashorn&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;; Same as in ruby version&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;setup-script (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setup.js&amp;#34;&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;ss-script (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/public/javascripts/server-side.js&amp;#34;&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;render-script (str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my.amazing_component.ns.render_me_to_s(&amp;#34;&lt;/span&gt; my-state-json-string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;);&amp;#34;&lt;/span&gt;))

(&lt;span style=&#34;color:#a6e22e&#34;&gt;.eval&lt;/span&gt; nashorn setup-script)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;.eval&lt;/span&gt; nashorn ss-script)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;.eval&lt;/span&gt; nashorn render-script) &lt;span style=&#34;color:#75715e&#34;&gt;; our html markup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I must admit that this code works on small reagent example.
I&amp;rsquo;m unable to load production code from my current project in to Nashorn.&lt;/p&gt;
&lt;p&gt;Also it helps a lot if you started developing your project with server side rendering in mind.&lt;/p&gt;
&lt;p&gt;Of course it&amp;rsquo;s better to have some kind of &amp;ldquo;renderers pool&amp;rdquo; in JVM.
Good thing that clojure allows you to implement thing like that in few lines of code.
In ruby it&amp;rsquo;s not a problem since we have 1 context per worker.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Useful Links:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/clojurescript/IIjUxnl4Zbw&#34;&gt;ClojureScript mailing list topic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ln -sf /usr/bin/emacs /usr/bin/vim ?</title>
      <link>https://blog.gonzih.me/blog/2015/02/15/ln-sf-/usr/bin/emacs-/usr/bin/vim/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2015/02/15/ln-sf-/usr/bin/emacs-/usr/bin/vim/</guid>
      <description>&lt;p&gt;Some time ago I actually did run &lt;code&gt;ln -sf /usr/bin/emacs /usr/bin/vim&lt;/code&gt;.
And left it like that for a couple of days.
I must say that it was surprisingly nice experience.
Tinkering around with elisp, building editing environment from scratch.&lt;/p&gt;
&lt;p&gt;Of course interesting question is &amp;ldquo;How did I end up with this idea in my head?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I tried to play with emacs few times couple of years ago.
But as a modal editing kind of guy I was unable to comprehend finger bending experience that default key bindings in emacs give you.&lt;/p&gt;
&lt;p&gt;I tried evil mode, but it went not so well.
Problem is that I&amp;rsquo;m also using programmer dvorak layout, so I need to remap couple of keys for better comfort.
I failed all my previous attempts because it was not very trivial at that time to remap those keys everywhere.
Also probably my lack of patience played against me.
So I gave up and continued using vim (something like 5 years of hapiness).&lt;/p&gt;
&lt;p&gt;Recently ClojureScript tool called &lt;a href=&#34;https://github.com/bhauman/lein-figwheel&#34;&gt;figwheel&lt;/a&gt; added repl support.
So as a result you have repl that compiles your clojure code into javascript and executes result in your browser session printing result back to you.
Development flow like that is very common practice in clojure world and one reason why it makes clojure much better.
Problem here is that it does not support nrepl (network repl) protocol and best tool for clojure in vim &lt;a href=&#34;https://github.com/tpope/vim-fireplace&#34;&gt;vim-fireplace&lt;/a&gt; relies on nrepl.
I was using for some time &lt;a href=&#34;https://github.com/sjl/tslime2.vim&#34;&gt;tslime2&lt;/a&gt; in vim to work with ClojureScript.
Idea is very simple - tslime allows you to send pieces of text from your vim into some tmux panel.
It works. You don&amp;rsquo;t have out of the box tooling that will select your top most clojure form sadly.
Once upon a time I had discussion on #clojurescript irc and &lt;a href=&#34;https://twitter.com/martinklepsch&#34;&gt;@martinklepsh&lt;/a&gt; mentioned that nowadays evil-mode is much better.
I was bored and followed that track. I did run &lt;code&gt;rm -rf .emacs.d&lt;/code&gt; and started from scratch.
As a result my workflow from vim was ported to emacs in a couple of hours.
It surprised me both how simple was that and how relatively close my setup is to default one in vim/evil.
I set my default editor to emacs and continued doing my thing for a couple of days.&lt;/p&gt;
&lt;p&gt;And here what I think so far.&lt;/p&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evil mode is good and it&amp;rsquo;s very close. It&amp;rsquo;s probably closest thing to vim that I ever tried.
It&amp;rsquo;s not fancy smart like vim mode in IntelliJ IDEA that actually reads your .vimrc and uses it to configure keybindings
(Big shout outs to the author of idea plugin. It&amp;rsquo;s very impressive.)&lt;/li&gt;
&lt;li&gt;Writing configuration in a language that I understand was a big relief.&lt;/li&gt;
&lt;li&gt;Mapping configuration is simpler. You are mapping elisp function to the key. It&amp;rsquo;s simpler and easier to understand than remapping mechanism in vim.&lt;/li&gt;
&lt;li&gt;Helm surprised me in it&amp;rsquo;s speed and functionality, I spent lot of time fighting with Ctrl-P/Unite in vim. Configuring Unite was painful experience. Helm on the other hand just works. And works well.&lt;/li&gt;
&lt;li&gt;Inferior lisp is so goooood. Having editor with lisp support in mind is incredible experience for any lisp developer. [inf-clojure](https://github in inferior lisp mode tuned to play well with clojure) is enhanced clojure mode for the inf-lisp.&lt;/li&gt;
&lt;li&gt;It can do async stuff! If you used vim then you know what I mean. In emacs it&amp;rsquo;s just there. Without required pythor/ruby support enabled during compilation.&lt;/li&gt;
&lt;li&gt;Built-in package manager. Just run &lt;code&gt;package-install&lt;/code&gt; and it&amp;rsquo;s there. No NeoBundle/Bundle installation needed. No need to mess with git submodules.&lt;/li&gt;
&lt;li&gt;Ability to inspect everything at run time helps during configuration. Some key executes something weird? Just run &lt;code&gt;describe-key&lt;/code&gt; and see what is going on. You can do something similar in vim, but in emacs it&amp;rsquo;s much better.&lt;/li&gt;
&lt;li&gt;Startup time is slow and it&amp;rsquo;s solvable. Just run systemd user service with &lt;code&gt;emacs --daemon&lt;/code&gt; and that is enough for most cases.&lt;/li&gt;
&lt;li&gt;And you still have emacs operating system at your disposal!&lt;/li&gt;
&lt;li&gt;Configuring emacs from scratch made me realize that my vim configuration is really really messy and big. I need probably to think about some changes in there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not so good:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paredit feels different from one that exists in vim. Less strict I guess most of the time and too strict when it&amp;rsquo;s unnecessary. Of course this is related only to my habits and muscle memory.&lt;/li&gt;
&lt;li&gt;Evil is slower.
Most of the time it&amp;rsquo;s not a problem. But sometimes I&amp;rsquo;m mashing my keyboard too fast and mess happens.
Good example is replace (&lt;code&gt;r&lt;/code&gt;) key.
Press &lt;code&gt;r:&lt;/code&gt; too fast and you might end up in vim command line.&lt;/li&gt;
&lt;li&gt;Evil is just a plugin. Sometimes you are forced to use default emacs mode in some menus/buffers that don&amp;rsquo;t play well with evil.&lt;/li&gt;
&lt;li&gt;Good example of painful evil integration is cider.
It just does not work with evil mode.
Most configuration examples that I was able to find on github related to cider and evil mode where just forcing default emacs mode in cider repl and related buffers.
That was big disappointment for me. I had high hopes for the cider. I&amp;rsquo;m realizing that I don&amp;rsquo;t really need everything that cider provides.
I&amp;rsquo;m very happy with just ability to evaluate code, without even debugger and nice stacktraces.
But cider looked so shiny and cool. And bloated. Seems like author of cider does not use evil mode so my hopes that cider+evil story will improve are low.
After few hours of grinding my teeth over emacs configuration I gave up and decided to rely on &lt;a href=&#34;https://github.com/clojure-emacs/inf-clojure&#34;&gt;inf-clojure&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Will I continue using emacs? Yes.&lt;/p&gt;
&lt;p&gt;Will it be my default editor? Probably no.
Vim feels more reliable because it provides modal editing experience out of the box.
In emacs it an option.
I&amp;rsquo;m totally fine with giving away all that goodness that emacs provides to have proper editing experience &lt;strong&gt;all the time&lt;/strong&gt;.
In every buffer, in every menu.
And I will continue slowly improving my emacs configuration.&lt;/p&gt;
&lt;p&gt;This experiment reminded me how many things are missing from my setup.
It also reminded me that &lt;a href=&#34;https://neovim.org&#34;&gt;neovim&lt;/a&gt; might be next big thing in my tool belt.
I&amp;rsquo;m really hoping to see big movement around neovim once project becomes more or less compatible with current viml based configurations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/&#34;&gt;Here&lt;/a&gt; is very good tutorial to get vim users started in emacs.&lt;/li&gt;
&lt;li&gt;My .emacs.d is &lt;a href=&#34;https://github.com/Gonzih/.emacs.d&#34;&gt;here&lt;/a&gt;. I tried to keep it minimalistic.&lt;/li&gt;
&lt;li&gt;My .vim is &lt;a href=&#34;https://github.com/Gonzih/.vim&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you are looking for the best vim like experience in emacs please take a look at the &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;spacemacs project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Looking for the good color theme in emacs? Take a look at the port of &lt;a href=&#34;https://github.com/morhetz/gruvbox&#34;&gt;vim&amp;rsquo;s gruvbox theme&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Grench binary for OpenSUSE</title>
      <link>https://blog.gonzih.me/blog/2014/10/23/grench-binary-for-opensuse/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2014/10/23/grench-binary-for-opensuse/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leiningen.org/grench.html&#34;&gt;Grenchman&lt;/a&gt; is a small tool that runs leiningen tasks over nrepl.&lt;/p&gt;
&lt;p&gt;Helps with JVM startup time during development.
Build in OCaml. If you are not in to the building binary on your own,
there are pre-build binaries on the &lt;a href=&#34;https://leiningen.org/grench.html&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And here is one missing binary for OpenSUSE (tested on 13.1, fedora binary does not work).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://d1wvxg652jdms0.cloudfront.net/grenchman/grench-0.2.0-opensuse&#34;&gt;grench-opensuse&lt;/a&gt;
[&lt;a href=&#34;https://d1wvxg652jdms0.cloudfront.net/grenchman/grench-0.2.0-opensuse.sha1&#34;&gt;sha1&lt;/a&gt;
| &lt;a href=&#34;https://d1wvxg652jdms0.cloudfront.net/grenchman/grench-0.2.0-opensuse.asc&#34;&gt;sig&lt;/a&gt;]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Two way data bindings in Reagent</title>
      <link>https://blog.gonzih.me/blog/2014/10/22/two-way-data-bindings-in-reagent/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2014/10/22/two-way-data-bindings-in-reagent/</guid>
      <description>&lt;p&gt;Small code snippet showing ability to generate 2 way data bindings in Reagent.
Underneath it&amp;rsquo;s all about core.async.
Also provides ability to apply transformation using transducers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;defonce &lt;/span&gt;form (&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt; {}))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;bind-input
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Generat on-change callback,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   bind value to form-key of form-atom.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   Provides ability to implement transformation using transducers.&amp;#34;&lt;/span&gt;
  [form-atom form-key xform]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[local-chan (&lt;span style=&#34;color:#a6e22e&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; xform)]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;go-loop&lt;/span&gt; []
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;swap!&lt;/span&gt; form-atom assoc form-key (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;!&lt;/span&gt; local-chan))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt;))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[event]
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;put!&lt;/span&gt; local-chan
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;.-value&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.-target&lt;/span&gt; event))))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;bound-input
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Generate input,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   create two way data binding
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   between input value and value under form-key in form-atom.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   Provides ability to implement transformation using transducers.&amp;#34;&lt;/span&gt;
  [attrs form-atom form-key xform]
  [&lt;span style=&#34;color:#e6db74&#34;&gt;:input&lt;/span&gt; (merge attrs
                 {&lt;span style=&#34;color:#e6db74&#34;&gt;:value&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;form-key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;form-atom)
                  &lt;span style=&#34;color:#e6db74&#34;&gt;:on-change&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;bind-input&lt;/span&gt; form-atom form-key xform)})])

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;main-component []
  [&lt;span style=&#34;color:#e6db74&#34;&gt;:div&lt;/span&gt;
   [&lt;span style=&#34;color:#e6db74&#34;&gt;:h3&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;form) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; value&amp;#34;&lt;/span&gt;]
   [bound-input {&lt;span style=&#34;color:#e6db74&#34;&gt;:type&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:text&lt;/span&gt;} form &lt;span style=&#34;color:#e6db74&#34;&gt;:name&lt;/span&gt; (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; (count %)))]])

(&lt;span style=&#34;color:#a6e22e&#34;&gt;reagent/render-component&lt;/span&gt; [main-component]
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;js/document.getElementById&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Replacing shell scripts with Clojure&#43;JamVM</title>
      <link>https://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure/</guid>
      <description>&lt;p&gt;We all hate shell scripting.
Scripts are annoyingly hard to debug, test and verify.
Would be lovely, to use some kind of lisp for scripting, right?
To do interactive development with repl in your favorite editor.
To write it in a nice predictable language that you also enjoy.
But sometimes it&amp;rsquo;s impossible to add some external dependencies to the system.
What if you have only JVM to your disposal, will you be able to pull it off only with JVM and clojure.jar?&lt;/p&gt;
&lt;h1 id=&#34;basic-setup&#34;&gt;Basic setup&lt;/h1&gt;
&lt;p&gt;First what we will need is to get clojure jar file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget -O /opt/clojure.jar &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://central.maven.org/maven2/org/clojure/clojure/1.6.0/clojure-1.6.0.jar&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next lets create executable &lt;code&gt;/usr/bin/clojure&lt;/code&gt; that will live in &lt;code&gt;/usr/bin&lt;/code&gt; (or &lt;code&gt;/opt/bin&lt;/code&gt; or &lt;code&gt;/home/youruser/bin&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
exec java -jar /opt/clojure.jar &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now it&amp;rsquo;s time for our hello world script &lt;code&gt; /opt/test.clj&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;!/usr/bin/clojure

(println &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make it executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;chmod +x /opt/test.clj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And run it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ /opt/test.clj
hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yay! But it feels kind of slow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;time /opt/test.clj
hello world

real  0m2.684s
user  0m2.239s
sys   0m0.186s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2 seconds startup time, not really suitable for scripting, right?
Can we improve that? What if there would be JVM with fast startup and low memory usage.&lt;/p&gt;
&lt;h1 id=&#34;introducing-jamvm&#34;&gt;Introducing JamVM.&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;But&amp;hellip; but you told us that there is only JVM available on production system without ability to add external dependencies.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I lied, sorry.&lt;/p&gt;
&lt;p&gt;Compiling JamVM with OpenJDK support:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Fetching required dependencies and source&lt;/span&gt;
apt-get -y install openjdk-7-jdk openjdk-7-jre build-essential zlib1g-dev
cd /opt
wget -O jamvm-2.0.0.tar.gz &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://downloads.sourceforge.net/project/jamvm/jamvm/JamVM%202.0.0/jamvm-2.0.0.tar.gz&amp;#39;&lt;/span&gt;
tar -xvzf jamvm-2.0.0.tar.gz

&lt;span style=&#34;color:#75715e&#34;&gt;# Building&lt;/span&gt;
cd /opt/jamvm-2.0.0
./configure --with-java-runtime-library&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;openjdk7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make check &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

&lt;span style=&#34;color:#75715e&#34;&gt;# Installing in to the openjdk installation&lt;/span&gt;
mkdir /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm
cp /usr/local/jamvm/lib/libjvm.so /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm/libjvm.so

&lt;span style=&#34;color:#75715e&#34;&gt;# Trying it out&lt;/span&gt;
java -jamvm -version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JamVM will be installed as separate vm in openjdk, so it will not mess with existing installation.
You will need to use -jamvm option to java command to run it with small overhead vm.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s update our clojure executable &lt;code&gt;/usr/bin/clojure&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
exec java -jamvm -jar /opt/clojure.jar &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try it out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;time /opt/test.clj
hello world

real  0m0.866s
user  0m0.764s
sys   0m0.076s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Better, right?&lt;/p&gt;
&lt;h2 id=&#34;how-slow-is-jamvm-some-benchmarks&#34;&gt;How slow is JamVM? Some benchmarks:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Clojure 1.6

JamVM:

(factorial 5000) Avg: 248.65890986500017
(fib 20)         Avg: 35.33471996000001
(sort-seq)       Avg: 405.7438969800002

OpenJDK:

(factorial 5000) Avg: 25.016900630000006
(fib 20)         Avg: 0.69957772
(sort-seq)       Avg: 11.553695560000001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much slower, but if you think about it
shell scripting most of the time is about executing external commands,
IO and data filtering. Might be as well not so bad.
Also memory usage of JamVM makes it perfect for embedded systems.&lt;/p&gt;
&lt;h2 id=&#34;why-not-use-something-like-lein-exec&#34;&gt;Why not use something like lein exec?&lt;/h2&gt;
&lt;p&gt;Lein exec is nice. But it adds overhead.
If you need external dependencies you can solve it (in theory)
with classpath manipulations in java command (&lt;code&gt;java -cp dep.jar:dep2.jar:.&lt;/code&gt;).
Still you can plug lein exec to JamVM if you want.&lt;/p&gt;
&lt;h3 id=&#34;update&#34;&gt;Update&lt;/h3&gt;
&lt;p&gt;I just noticed that in Ubuntu 14:04 repos there is already JamVM package,
so you can just run &lt;code&gt;apt-get -y install icedtea-7-jre-jamvm&lt;/code&gt; to install latest build.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building Hacker News json api with Haskell</title>
      <link>https://blog.gonzih.me/blog/2014/08/13/building-hacker-news-json-api-with-haskell/</link>
      <pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2014/08/13/building-hacker-news-json-api-with-haskell/</guid>
      <description>&lt;p&gt;Small announcement post.&lt;/p&gt;
&lt;p&gt;Today I launched tiny scotty server that serves json for Hacker News front page.
Project source code is located on &lt;a href=&#34;https://github.com/Gonzih/HNApi&#34;&gt;github&lt;/a&gt;.
You can access api &lt;a href=&#34;https://hn.gonzih.me/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hacker news parser is implemented using &lt;a href=&#34;https://hackage.haskell.org/package/hxt-8.5.2&#34;&gt;HXT&lt;/a&gt;
and &lt;a href=&#34;https://egonschiele.github.io/HandsomeSoup/&#34;&gt;HandsomeSoup&lt;/a&gt;.
Json is served with help of &lt;a href=&#34;https://github.com/scotty-web/scotty/&#34;&gt;Scotty&lt;/a&gt; web framework.
Currently it&amp;rsquo;s running on Heroku using &lt;a href=&#34;https://github.com/begriffs/heroku-buildpack-ghc&#34;&gt;this ghc-7.8 buildpack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t use RSS since I&amp;rsquo;m also interested in points and amount of comments.
For me HN is more about interesting links than community and conversations behind the posts.
So I don&amp;rsquo;t really care about anything except front page.&lt;/p&gt;
&lt;p&gt;Originally I started this project as a Haskell learning exercise.
I hope someone will find it useful.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Installing Spotify Linux beta on OpenSUSE 13.1</title>
      <link>https://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1/</guid>
      <description>&lt;p&gt;Very small post (more like insruction for myself for the future) on how to convert deb packages provided by Spotify to rpm.
Solution can be applied to any rpm based system (I think so).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://software.opensuse.org/package/alien&#34;&gt;alien&lt;/a&gt; (perl scripts for converting packages).&lt;/li&gt;
&lt;li&gt;Download deb from &lt;a href=&#34;https://repository.spotify.com/pool/non-free/s/spotify/&#34;&gt;spotify repository&lt;/a&gt;, pay attention to architecture.&lt;/li&gt;
&lt;li&gt;Convert deb -&amp;gt; rpm by running &lt;code&gt;sudo alien --scripts -r spotify*.deb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install rpm &lt;code&gt;sudo zypper in spotify*.rpm&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;spotify&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And it should work.
I noticed few warning about default locates and missing libraries, but client still works fine without any changes to system (symlinks, locales and etc).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have issues with volume being too loud by default make sure that you changed &lt;code&gt;flat-volumes&lt;/code&gt; from &lt;code&gt;yes&lt;/code&gt; to &lt;code&gt;no&lt;/code&gt; in &lt;code&gt;/etc/pulse/daemon.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PPS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;People reported that installing version 0.9 -&amp;gt; uninstalling it -&amp;gt; installing version 1.0 might break your system. So watch out for the uninstallation errors.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
