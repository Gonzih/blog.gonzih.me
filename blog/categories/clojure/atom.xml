<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2014-09-23T21:25:50+02:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HN Tray icon in 50 lines of Clojure]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/24/hn-tray-icon-in-50-lines-of-clojure/"/>
    <updated>2014-05-24T22:03:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/24/hn-tray-icon-in-50-lines-of-clojure</id>
    <content type="html"><![CDATA[<p>Today I got a little bit bored and spend few hours poking around with java.awt in Clojure.
Result is tray app that shows stories from HN front page.
Just in ~50 lines of Clojure code.
Enjoy!</p>

<p><a href="https://github.com/Gonzih/hn-tray.clj">Github Project.</a></p>

<p>Source code is below:</p>

<!--more-->


<p>```clojure
(ns hn.core
  (:require [cheshire.core :as json]</p>

<pre><code>        [clojure.java.browse :refer [browse-url]]
        [clojure.java.io :refer [resource]])
</code></pre>

<p>  (:import [java.awt SystemTray TrayIcon PopupMenu MenuItem Toolkit]</p>

<pre><code>       [java.awt.event ActionListener])
</code></pre>

<p>  (:gen-class))</p>

<p>(defn menu-item [label callback]
  (let [menu (MenuItem. label)</p>

<pre><code>    listener (proxy [ActionListener] []
               (actionPerformed [event] (callback)))]
(.addActionListener menu listener)
menu))
</code></pre>

<p>(def hn-api-url "http://api.ihackernews.com/page")</p>

<p>(defn hn-items []
  (-> hn-api-url</p>

<pre><code>  slurp
  (json/parse-string true)
  :items
  (#(sort-by :points %))
  reverse))
</code></pre>

<p>(defn add-hn-to-menu! [menu]
  (letfn [(mapfn [{:keys [title url commentCount points]}]</p>

<pre><code>        (let [full-title (format "%-4s (%-4s) - %s" points commentCount title)
              menu-item (menu-item full-title #(browse-url url))]
          (println full-title)
          (.add menu menu-item)))]
</code></pre>

<p>  (doall (map mapfn (hn-items)))))</p>

<p>(defn exit []
  (shutdown-agents)
  (System/exit 0))</p>

<p>(defn -main [&amp; args]
  (let [tray (SystemTray/getSystemTray)</p>

<pre><code>    image (.getImage (Toolkit/getDefaultToolkit)
                     (resource "icon.png"))
    icon (TrayIcon. image)
    exit (menu-item "Exit" exit)]
(.setImageAutoSize icon true)
(.add tray icon)
(loop []
  (let [popup (PopupMenu.)]
    (println "Updating items")
    (add-hn-to-menu! popup)
    (.add popup exit)
    (.setPopupMenu icon popup)
    (Thread/sleep (* 5 60 1000))
    (recur)))))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first experience with core.typed]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/30/my-first-experience-with-core-dot-typed/"/>
    <updated>2013-08-30T12:30:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/30/my-first-experience-with-core-dot-typed</id>
    <content type="html"><![CDATA[<p>Today I started improving my feeds2imap.clj project with core.typed.
And already hit few issues, so this post is something like collection of tips how to solve issues with core.typed based on my experience.
I couldn't find answers on my issues in wiki or documentation.
But I got answers annoying Ambrose Bonnaire-Sergeant on Google+.
Thank you for your patience, man!
And keep doing what you are doing, core.typed is just amazing thing!</p>

<!--more-->


<h3>Unresolved constructor invocation</h3>

<p>Core.typed can't match constructor based on arguments type,
you should provide type hints to help core.typed with that.</p>

<h3>By default core.typed assumes that all java methods can return nil</h3>

<p>Use <code>(non-nil-return ClassOrObject/methodName :all)</code> to tell core.typed that method won't return nil.
Core.typed will trust you and will skip further checks.</p>

<p>Or for example if you are expecting String as a result you can convert result to String with str before returning it.</p>

<h3>non-nil-return in core.typed works only on methods</h3>

<p>And if you have static method then something like that would not work:</p>

<p>```clojure
(non-nil-return javax.mail.Message$RecipientType/TO :all)</p>

<p>(ann recipient-type-to [-> Message$RecipientType])
(defn ^Message$RecipientType recipient-type-to []
  (Message$RecipientType/TO))</p>

<p>(comment
  Type mismatch:
  Expected:       (Fn [-> Message$RecipientType])
  Actual:         (Fn [-> (U Message$RecipientType nil)]))
```</p>

<p>Solution:</p>

<p>```clojure
(non-nil-return javax.mail.Message$RecipientType/TO :all)</p>

<p>(ann recipient-type-to [-> Message$RecipientType])
(defn ^Message$RecipientType recipient-type-to
  []
  {:post [%]}
  (Message$RecipientType/TO))
```</p>

<p>Which is the same as:</p>

<p>```clojure
(non-nil-return javax.mail.Message$RecipientType/TO :all)</p>

<p>(ann recipient-type-to [-> Message$RecipientType])
(defn ^Message$RecipientType recipient-type-to []
  (let [temp (Message$RecipientType/TO)]</p>

<pre><code>(assert temp)
temp)
</code></pre>

<p>```</p>

<p>So unless assert evaluates temp to logical true exception will be raised
and function will always return non nil value, which makes core.typed happy.</p>

<h3>Defining Parameterized alias type</h3>

<p>```clojure
(def-alias Folder
  (TFn [[x :variance :covariant]] (Map Keyword x)))</p>

<p>(comment
  (Folder Items)
  (Folder Urls))
```</p>

<p><a href="https://github.com/Gonzih/feeds2imap.clj/commit/1c41d814bdb054d57e644013c85275ec9a45a114">Here is</a> commit with changes related to core.typed.
I must say writing type annotations for code that you wrote few months ago is tricky.
But still I enjoyed process and results and I'm still a little bit amazed about all core.typed thing.
Power of lisp combined with really smart people :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed/Ping test graphs with Clojure and Raspberry Pi]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi/"/>
    <updated>2013-08-24T14:02:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I'm often complaining about my ISP quality.
Sometimes pings are high, sometimes download speed goes down.
So I decided to make sure it's my ISP fault and not just my opinion based on my hate to them.</p>

<p>How to do so? Let's collect data about download speed and pings over time, and show some graphs based on that data.</p>

<!-- more -->


<p>I have unused Raspberry Pi right now, so it will be used to collect data.</p>

<h2>Speedtest data</h2>

<p>For speedtest I will be using python script that uses speedtest.net servers.
Pi is running Pidora right now, so let's install script dependencies.</p>

<p><code>sh
yum -y install python-argparse python-lxml
</code></p>

<p>Script is hosted on <a href="https://github.com/Janhouse/tespeed">github</a>.
Let's get the script.</p>

<p><code>sh
mkdir ~/scripts
wget https://raw.github.com/Janhouse/tespeed/master/tespeed.py -O ~/scripts/speedtest.py
</code></p>

<p>You can test script running it with:</p>

<p><code>sh
python ~/scripts/speedtest.py
</code></p>

<p>Now let's wrap python script into additional shell script to store time of data collection in csv.
I'm not sure if I need time for now, but let's keep it anyway.
We will silence stderr from the script and output results as csv.</p>

<p>```sh ~/bin/speedtest.zsh</p>

<h1>!/usr/bin/zsh</h1>

<p>echo "\"$(date -R)\",$(python ~/scripts/tespeed.py --csv -s)"
```</p>

<p>Let's put script into crontab to run every 5 minutes, also let's redirect stderr to /dev/null in case of Ethernet unavailability or some other issues.</p>

<p><code>sh crontab
*/5 * * * * ~/bin/speedtest.zsh 2&gt;/dev/null &gt;&gt; ~/.speedtest.csv
</code></p>

<h2>Ping data</h2>

<p>For ping data we will be running <code>ping</code> command with 100 packets (<code>ping -c 100</code>) with google dns as target (8.8.8.8) and storing avg value with time to csv file.</p>

<p>```sh ~/bin/pingtest.zsh</p>

<h1>!/usr/bin/zsh</h1>

<p>AVG=$(ping -c 100 8.8.8.8 | grep rtt | sed -r 's#.*\=\s.+/(.+)/.+/.+#\1#')</p>

<p>echo "\"$(date -R)\",$AVG"
```</p>

<p><code>sh crontab
*/5 * * * * ~/bin/pingtest.zsh 2&gt;/dev/null &gt;&gt; ~/.pingtest.csv
</code></p>

<h2>Graphs</h2>

<p>For data visualization let's use Clojure with Incanter. Here is clojure code:</p>

<p>```clojure
(ns incanter-graphs.core
  (:require [incanter.core :refer :all]</p>

<pre><code>        [incanter.stats :refer :all]
        [incanter.charts :refer :all]
        [clojure-csv.core :refer :all])
</code></pre>

<p>  (:gen-class))</p>

<p>(defn to-f [is] (Float/parseFloat is))</p>

<p>(defn get-f-col [data col]
  (map to-f (sel data :cols col)))</p>

<p>(defn init-chart [data rng {:keys [x-label y-label]}]
  (line-chart rng data :x-label x-label</p>

<pre><code>                   :y-label y-label))
</code></pre>

<p>(defn add-to-chart [chart data rng]
  (reduce #(add-categories %1 rng %2) chart data))</p>

<p>(defn draw-file [filename cols &amp; {:as opts}]
  (let [data (slurp filename)</p>

<pre><code>    csv (parse-csv data :delimiter \,)
    rng (range 0 (count csv))
    data (map (partial get-f-col csv) cols)
    chart (init-chart (first data) rng opts)
    chart-to-show (add-to-chart chart (rest data) rng)]
(view chart-to-show)))
</code></pre>

<p>(defn -main [speedfile pingfile &amp; args]
  (draw-file speedfile [1 2] :x-label "Time" :y-label "Speed")
  (draw-file pingfile [1] :x-label "Time" :y-label "Ping time"))
```</p>

<p>Let's put all launch process to Makefile:</p>

<p>```makefile Makefile
default:</p>

<pre><code>scp raspberry-pi.local:.speedtest.csv /tmp/
scp raspberry-pi.local:.pingtest.csv /tmp/
#Remove lines with only time (script failure)
grep "[^,]$$" /tmp/.speedtest.csv &gt; /tmp/.speedtest-fixed.csv
grep "[^,]$$" /tmp/.pingtest.csv &gt; /tmp/.pingtest-fixed.csv
lein run /tmp/.speedtest-fixed.csv /tmp/.pingtest-fixed.csv
</code></pre>

<p>```</p>

<p>I adjusted my router, so QoS daemon will give maximum priority to traffic from my Raspberry Pi, so data will be cleaner.
And now we can see some visualization.</p>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/ping-speed-graphs/speed.png" alt="Speed Graph" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/ping-speed-graphs/ping.png" alt="Ping Graph" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSS/Atom reader in Clojure via IMAP]]></title>
    <link href="http://blog.gonzih.me/blog/2013/06/28/rss-slash-atom-reader-in-clojure-via-imap/"/>
    <updated>2013-06-28T10:15:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/06/28/rss-slash-atom-reader-in-clojure-via-imap</id>
    <content type="html"><![CDATA[<h3>Motivation</h3>

<p>Google Reader was shut down and I started looking for alternatives.
And sadly I did not found anything close to Google Reader experience.
There are plenty good alternatives, but all of them suffer from some kind of background noise (social based features, weird hotkeys, weird ui, unusable mobile clients and etc.).
All I wanted was simple to use news reader.</p>

<!-- more -->


<h3>Idea</h3>

<p>Then I found post in the Racket community about storing your feeds in the IMAP folders using "APPEND" command by <a href="http://www.greghendershott.com/2013/05/feeds2gmail.html">Greg Hendershott</a>.
That was it. Simplest possible solution, that I can run on small device or server by cron. I played a little bit with Racket source code and decided to write my own version to do the job.</p>

<h3>Clojure version</h3>

<p>First I implemented my <a href="https://github.com/Gonzih/feeds2imap.rb">prototype in Ruby</a> in few hours. I picked up Ruby because of built-in rss/atom and imap libraries.
I used it for few days and liked it. Simple, reliable solution.
So then I decided to rewrite it in Clojure.
Why Clojure?
Because it's pure fun to use.
I decided to use java.mail framework for message storing and folder manipulations, feedparser-clj to fetch and parse rss/atom feeds and hiccup for templating.
I was really pleased with feedparser-clj in comparison with Ruby built-in library.
java.mail framework was not so bad as I was expecting at first.</p>

<h3>How it works?</h3>

<p>Here is project logic:</p>

<ul>
<li>Fetch folders and urls from feeds file.</li>
<li>Fetch and parse RSS/Atom data from urls.</li>
<li>Select only new items using cache file.</li>
<li>Create required imap folders.</li>
<li>Store new items as email messages.</li>
<li>Mark items as read (put md5 hashes in to the clj file with set of old hashes).</li>
</ul>


<p>It's running now by cron (every hour) on my BeagleBone (using latest ejre version).</p>

<p>Source code is hosted on github <a href="https://github.com/Gonzih/feeds2imap.clj">here</a>. Take a look at project README for usage.</p>

<h3>More implementations</h3>

<ul>
<li><a href="https://github.com/Gonzih/feeds2imap.rb">My Ruby prototype</a></li>
<li><a href="https://github.com/Gonzih/feeds2imap.clj">My Clojure implementation</a></li>
<li><a href="https://github.com/greghendershott/feeds2gmail">Racket implementation</a></li>
<li><a href="https://github.com/cordawyn/rss2imap">Haskell implementation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure on Raspberry Pi: OpenJDK vs Oracle JRE (Java 8 armhf beta) benchmark]]></title>
    <link href="http://blog.gonzih.me/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8/"/>
    <updated>2013-04-14T12:00:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8</id>
    <content type="html"><![CDATA[<p><a href="http://jdk8.java.net/fxarmpreview/">Here</a> you can download latest Java 8 preview for armhf. Lets benchmark it on Raspberry Pi!</p>

<!-- more -->


<p>Pi is running Raspbian.
```</p>

<blockquote><p>cat /etc/*-release
PRETTY_NAME="Debian GNU/Linux 7.0 (wheezy)"
NAME="Debian GNU/Linux"
VERSION_ID="7.0"
VERSION="7.0 (wheezy)"
```</p></blockquote>

<p>Pi CPU is running on 700Mhz.
```</p>

<blockquote><p>cpufreq-info | grep 'current CPU'
current CPU frequency is 700 MHz.
```</p></blockquote>

<p>Clojure version is 1.5.1.</p>

<p>Benchmark code is from <a href="http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/">nakkaya's post</a>, also used for my BeagleBone Clojure/ClojureScript benchmarks:
```clojure
(ns benchmark.core)</p>

<p>(defn factorial [x]
  (reduce * (range 1N (inc x))))
;                   ^ integerOverflow fix</p>

<p>(defn fib [n]
  (if (&lt;= n 1)</p>

<pre><code>1
(+ (fib (- n 1)) (fib (- n 2)))))
</code></pre>

<p>(defn sort-seq []
  (sort (repeat 100000 (rand-int 2000000))))</p>

<p>(defn time-it [fn]
  (let [values  (for [i (range 200)] (with-out-str (time (fn))))</p>

<pre><code>    doubles (map #(Double. (nth (.split % " ") 2)) values)]
(/ (apply + doubles) (count doubles))))
</code></pre>

<p>(defn -main []
  (println "(factorial 5000) \t Avg: " (time-it #(factorial 5000)))
  (println "(fib 20) \t Avg: " (time-it #(fib 20)))
  (println "(sort-seq) \t Avg: " (time-it #(sort-seq))))
```</p>

<p>This time I was a little bit smarter to run all code with <code>lein trampoline run</code> to eliminate overhead.</p>

<p>Numbers:</p>

<p>OpenJDK:
```</p>

<blockquote><p>sudo apt-get install openjdk-7-jre-headless</p>

<p>java -version
java version "1.7.0_07"
OpenJDK Runtime Environment (IcedTea7 2.3.2) (7u7-2.3.2a-1+rpi1)
OpenJDK Zero VM (build 22.0-b10, mixed mode)</p>

<p>ps eu
%CPU %MEM
90.5 15.7</p>

<p>lein trampoline run
(factorial 5000) Avg: 5956.007845080006
(fib 20)         Avg: 713.6807171
(sort-seq)       Avg: 9633.873322030007
```</p></blockquote>

<p>Oracle JRE:
```</p>

<blockquote><p>java -version
java version "1.8.0-ea"
Java(TM) SE Runtime Environment (build 1.8.0-ea-b36e)
Java HotSpot(TM) Client VM (build 25.0-b04, mixed mode)</p>

<p>ps eu
%CPU %MEM
87.9 18.9</p>

<p>lein trampoline run
(factorial 5000) Avg: 685.5312071299996
(fib 20)         Avg: 29.505588125000017
(sort-seq)       Avg: 1137.3281607850001
```</p></blockquote>

<p>Startup time for "Hello, World!":
```</p>

<h1>OpenJDK</h1>

<blockquote><p>time lein run
Hello, World!
lein run  56.51s user 1.58s system 87% cpu 1:06.16 total
time lein trampoline run
Hello, World!
lein trampoline run  57.73s user 0.96s system 96% cpu 1:00.57 total</p></blockquote>

<h1>Oracle JRE</h1>

<blockquote><p>time lein run
Hello, World!
lein run  31.47s user 1.43s system 95% cpu 34.298 total
time lein trampoline run
Hello, World!
lein trampoline run  32.11s user 1.18s system 94% cpu 35.070 total
```</p></blockquote>

<p>Looks promising for clojure on small arm devices :)</p>
]]></content>
  </entry>
  
</feed>
