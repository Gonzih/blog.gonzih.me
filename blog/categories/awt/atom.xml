<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: awt | Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/blog/categories/awt/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2014-09-28T17:31:32+02:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HN Tray icon in 50 lines of Clojure]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/24/hn-tray-icon-in-50-lines-of-clojure/"/>
    <updated>2014-05-24T22:03:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/24/hn-tray-icon-in-50-lines-of-clojure</id>
    <content type="html"><![CDATA[<p>Today I got a little bit bored and spend few hours poking around with java.awt in Clojure.
Result is tray app that shows stories from HN front page.
Just in ~50 lines of Clojure code.
Enjoy!</p>

<p><a href="https://github.com/Gonzih/hn-tray.clj">Github Project.</a></p>

<p>Source code is below:</p>

<!--more-->


<p>```clojure
(ns hn.core
  (:require [cheshire.core :as json]</p>

<pre><code>        [clojure.java.browse :refer [browse-url]]
        [clojure.java.io :refer [resource]])
</code></pre>

<p>  (:import [java.awt SystemTray TrayIcon PopupMenu MenuItem Toolkit]</p>

<pre><code>       [java.awt.event ActionListener])
</code></pre>

<p>  (:gen-class))</p>

<p>(defn menu-item [label callback]
  (let [menu (MenuItem. label)</p>

<pre><code>    listener (proxy [ActionListener] []
               (actionPerformed [event] (callback)))]
(.addActionListener menu listener)
menu))
</code></pre>

<p>(def hn-api-url "http://api.ihackernews.com/page")</p>

<p>(defn hn-items []
  (-> hn-api-url</p>

<pre><code>  slurp
  (json/parse-string true)
  :items
  (#(sort-by :points %))
  reverse))
</code></pre>

<p>(defn add-hn-to-menu! [menu]
  (letfn [(mapfn [{:keys [title url commentCount points]}]</p>

<pre><code>        (let [full-title (format "%-4s (%-4s) - %s" points commentCount title)
              menu-item (menu-item full-title #(browse-url url))]
          (println full-title)
          (.add menu menu-item)))]
</code></pre>

<p>  (doall (map mapfn (hn-items)))))</p>

<p>(defn exit []
  (shutdown-agents)
  (System/exit 0))</p>

<p>(defn -main [&amp; args]
  (let [tray (SystemTray/getSystemTray)</p>

<pre><code>    image (.getImage (Toolkit/getDefaultToolkit)
                     (resource "icon.png"))
    icon (TrayIcon. image)
    exit (menu-item "Exit" exit)]
(.setImageAutoSize icon true)
(.add tray icon)
(loop []
  (let [popup (PopupMenu.)]
    (println "Updating items")
    (add-hn-to-menu! popup)
    (.add popup exit)
    (.setPopupMenu icon popup)
    (Thread/sleep (* 5 60 1000))
    (recur)))))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
