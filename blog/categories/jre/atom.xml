<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jre | Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/blog/categories/jre/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2014-09-28T17:31:32+02:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure on Raspberry Pi: OpenJDK vs Oracle JRE (Java 8 armhf beta) benchmark]]></title>
    <link href="http://blog.gonzih.me/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8/"/>
    <updated>2013-04-14T12:00:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8</id>
    <content type="html"><![CDATA[<p><a href="http://jdk8.java.net/fxarmpreview/">Here</a> you can download latest Java 8 preview for armhf. Lets benchmark it on Raspberry Pi!</p>

<!-- more -->


<p>Pi is running Raspbian.
```</p>

<blockquote><p>cat /etc/*-release
PRETTY_NAME="Debian GNU/Linux 7.0 (wheezy)"
NAME="Debian GNU/Linux"
VERSION_ID="7.0"
VERSION="7.0 (wheezy)"
```</p></blockquote>

<p>Pi CPU is running on 700Mhz.
```</p>

<blockquote><p>cpufreq-info | grep 'current CPU'
current CPU frequency is 700 MHz.
```</p></blockquote>

<p>Clojure version is 1.5.1.</p>

<p>Benchmark code is from <a href="http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/">nakkaya's post</a>, also used for my BeagleBone Clojure/ClojureScript benchmarks:
```clojure
(ns benchmark.core)</p>

<p>(defn factorial [x]
  (reduce * (range 1N (inc x))))
;                   ^ integerOverflow fix</p>

<p>(defn fib [n]
  (if (&lt;= n 1)</p>

<pre><code>1
(+ (fib (- n 1)) (fib (- n 2)))))
</code></pre>

<p>(defn sort-seq []
  (sort (repeat 100000 (rand-int 2000000))))</p>

<p>(defn time-it [fn]
  (let [values  (for [i (range 200)] (with-out-str (time (fn))))</p>

<pre><code>    doubles (map #(Double. (nth (.split % " ") 2)) values)]
(/ (apply + doubles) (count doubles))))
</code></pre>

<p>(defn -main []
  (println "(factorial 5000) \t Avg: " (time-it #(factorial 5000)))
  (println "(fib 20) \t Avg: " (time-it #(fib 20)))
  (println "(sort-seq) \t Avg: " (time-it #(sort-seq))))
```</p>

<p>This time I was a little bit smarter to run all code with <code>lein trampoline run</code> to eliminate overhead.</p>

<p>Numbers:</p>

<p>OpenJDK:
```</p>

<blockquote><p>sudo apt-get install openjdk-7-jre-headless</p>

<p>java -version
java version "1.7.0_07"
OpenJDK Runtime Environment (IcedTea7 2.3.2) (7u7-2.3.2a-1+rpi1)
OpenJDK Zero VM (build 22.0-b10, mixed mode)</p>

<p>ps eu
%CPU %MEM
90.5 15.7</p>

<p>lein trampoline run
(factorial 5000) Avg: 5956.007845080006
(fib 20)         Avg: 713.6807171
(sort-seq)       Avg: 9633.873322030007
```</p></blockquote>

<p>Oracle JRE:
```</p>

<blockquote><p>java -version
java version "1.8.0-ea"
Java(TM) SE Runtime Environment (build 1.8.0-ea-b36e)
Java HotSpot(TM) Client VM (build 25.0-b04, mixed mode)</p>

<p>ps eu
%CPU %MEM
87.9 18.9</p>

<p>lein trampoline run
(factorial 5000) Avg: 685.5312071299996
(fib 20)         Avg: 29.505588125000017
(sort-seq)       Avg: 1137.3281607850001
```</p></blockquote>

<p>Startup time for "Hello, World!":
```</p>

<h1>OpenJDK</h1>

<blockquote><p>time lein run
Hello, World!
lein run  56.51s user 1.58s system 87% cpu 1:06.16 total
time lein trampoline run
Hello, World!
lein trampoline run  57.73s user 0.96s system 96% cpu 1:00.57 total</p></blockquote>

<h1>Oracle JRE</h1>

<blockquote><p>time lein run
Hello, World!
lein run  31.47s user 1.43s system 95% cpu 34.298 total
time lein trampoline run
Hello, World!
lein trampoline run  32.11s user 1.18s system 94% cpu 35.070 total
```</p></blockquote>

<p>Looks promising for clojure on small arm devices :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure on BeagleBone: OpenJDK vs Oracle Embedded JRE benchmark]]></title>
    <link href="http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/"/>
    <updated>2012-09-07T16:20:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark</id>
    <content type="html"><![CDATA[<p>After installing Embedded JRE on BeagleBone I decided to benchmark it against OpenJDK.</p>

<!-- more -->


<p>BeagleBone is running Ubuntu 12.04.
```</p>

<blockquote><p>cat /etc/*-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=12.04
DISTRIB_CODENAME=precise
DISTRIB_DESCRIPTION="Ubuntu 12.04 LTS"
```</p></blockquote>

<p>BeagleBone CPU is running on 500Mhz.
```</p>

<blockquote><p>cpufreq-info | grep 'current CPU'
current CPU frequency is 500 MHz.
```</p></blockquote>

<p>Clojure version is 1.4.0.</p>

<p>Benchmark code is from <a href="http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/">nakkaya's post</a>:
```clojure
(ns benchmark.core)</p>

<p>(defn factorial [x]
  (reduce * (range 1N (inc x))))
;                   ^ integerOverflow fix</p>

<p>(defn fib [n]
  (if (&lt;= n 1)</p>

<pre><code>1
(+ (fib (- n 1)) (fib (- n 2)))))
</code></pre>

<p>(defn sort-seq []
  (sort (repeat 100000 (rand-int 2000000))))</p>

<p>(defn time-it [fn]
  (let [values  (for [i (range 200)] (with-out-str (time (fn))))</p>

<pre><code>    doubles (map #(Double. (nth (.split % " ") 2)) values)]
(/ (apply + doubles) (count doubles))))
</code></pre>

<p>(defn -main []
  (println "(factorial 5000) \t Avg: " (time-it #(factorial 5000)))
  (println "(fib 20) \t Avg: " (time-it #(fib 20)))
  (println "(sort-seq) \t Avg: " (time-it #(sort-seq))))
```</p>

<p>So here the numbers:</p>

<p>OpenJDK:
```</p>

<blockquote><p>sudo apt-get install openjdk-7-jre-headless</p>

<p>java -version
java version "1.7.0_03"
OpenJDK Runtime Environment (IcedTea7 2.1.1pre) (7~u3-2.1.1~pre1-1ubuntu3)
OpenJDK Zero VM (build 22.0-b10, mixed mode)</p>

<p>ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
96.9 16.3 267932 41172 pts/1  Sl+  09:07  9:28 java</p>

<p>lein run
(factorial 5000) Avg:  1681.9940255249999
(fib 20)         Avg:  490.16940197000025
(sort-seq)       Avg:  7129.159457125003
```</p></blockquote>

<p>Embedded JRE:
```</p>

<blockquote><p>java -version
java version "1.7.0_06"
Java(TM) SE Embedded Runtime Environment (build 1.7.0_06-b24, headless)
Java HotSpot(TM) Embedded Client VM (build 23.2-b09, mixed mode)</p>

<p>ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
91.2 16.4 221740 41372 pts/1  Sl+  08:28  5:16 java</p>

<p>lein run
(factorial 5000) Avg:  1061.0568413899998
(fib 20)         Avg:  30.877820054999983
(sort-seq)       Avg:  1729.9035516600002
```</p></blockquote>

<p>Here you are. Better performance and slightly better memory usage.
Good Job, Embedded Java Team :)
Looking forward for hardfloat ABI version to test it on Raspberry Pi.</p>
]]></content>
  </entry>
  
</feed>
