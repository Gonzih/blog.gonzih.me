<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2014-09-28T17:43:28+02:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Replacing shell scripts with Clojure+JamVM]]></title>
    <link href="http://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure/"/>
    <updated>2014-09-28T11:04:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure</id>
    <content type="html"><![CDATA[<p>We all hate shell scripting.
Scripts are annoyingly hard to debug, test and verify.
Would be lovely, to use some kind of lisp for scripting, right?
To do interactive development with repl in your favorite editor.
To write it in a nice predictable language that you also enjoy.
But sometimes it's impossible to add some external dependencies to the system.
What if you have only JVM to your disposal, will you be able to pull it off only with JVM and clojure.jar?</p>

<!--more-->


<h1>Basic setup</h1>

<p>First what we will need is to get clojure jar file:</p>

<p><code>
wget -O /opt/clojure.jar 'http://central.maven.org/maven2/org/clojure/clojure/1.6.0/clojure-1.6.0.jar'
</code></p>

<p>Next lets create executable that will live in <code>/usr/bin</code> (or <code>/opt/bin</code> or <code>/home/youruser/bin</code>):</p>

<p>```bash /usr/bin/clojure</p>

<h1>!/bin/bash</h1>

<p>java -jar /opt/clojure.jar $@
```</p>

<p>And now it's time for our hello world script:</p>

<p>```clojure /opt/test.clj</p>

<h1>!/usr/bin/clojure</h1>

<p>(println "hello world")
```</p>

<p>Make it executable:</p>

<p><code>bash
chmod +x /opt/test.clj
</code></p>

<p>And run it:</p>

<p><code>bash
$ /opt/test.clj
hello world
</code></p>

<p>Yay! But it feels kind of slow:</p>

<p>```bash
time /opt/test.clj
hello world</p>

<p>real  0m2.684s
user  0m2.239s
sys   0m0.186s
```</p>

<p>2 seconds startup time, not really suitable for scripting, right?
Can we improve that? What if there would be JVM with fast startup and low memory usage.</p>

<h1>Introducing JamVM.</h1>

<p><em>"But... but you told us that there is only JVM available on production system without ability to add external dependencies."</em></p>

<p>I lied, sorry.</p>

<p>Compiling JamVM with OpenJDK support:</p>

<p>```bash</p>

<h1>Fetching required dependencies and source</h1>

<p>apt-get -y install openjdk-7-jdk openjdk-7-jre build-essential zlib1g-dev
cd /opt
wget -O jamvm-2.0.0.tar.gz 'http://downloads.sourceforge.net/project/jamvm/jamvm/JamVM%202.0.0/jamvm-2.0.0.tar.gz'
tar -xvzf jamvm-2.0.0.tar.gz</p>

<h1>Building</h1>

<p>cd /opt/jamvm-2.0.0
./configure --with-java-runtime-library=openjdk7 &amp;&amp; make check &amp;&amp; make &amp;&amp; make install</p>

<h1>Installing in to the openjdk installation</h1>

<p>mkdir /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm
cp /usr/local/jamvm/lib/libjvm.so /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm/libjvm.so</p>

<h1>Trying it out</h1>

<p>java -jamvm -version
```</p>

<p>JamVM will be installed as separate vm in openjdk, so it will not mess with existing installation.
You will need to use -jamvm option to java command to run it with small overhead vm.</p>

<p>Let's update our clojure executable:</p>

<p>```bash /usr/bin/clojure</p>

<h1>!/bin/bash</h1>

<p>java -jamvm -jar /opt/clojure.jar $@
```</p>

<p>Let's try it out:</p>

<p>```bash
time /opt/test.clj
hello world</p>

<p>real  0m0.866s
user  0m0.764s
sys   0m0.076s
```</p>

<p>Better, right?</p>

<h2>How slow is JamVM? Some benchmarks:</h2>

<p>```text
Clojure 1.6</p>

<p>JamVM:</p>

<p>(factorial 5000) Avg: 248.65890986500017
(fib 20)         Avg: 35.33471996000001
(sort-seq)       Avg: 405.7438969800002</p>

<p>OpenJDK:</p>

<p>(factorial 5000) Avg: 25.016900630000006
(fib 20)         Avg: 0.69957772
(sort-seq)       Avg: 11.553695560000001
```</p>

<p>Much slower, but if you think about it
shell scripting most of the time is about executing external commands,
IO and data filtering. Might be as well not so bad.
Also memory usage of JamVM makes it perfect for embedded systems.</p>

<h2>Why not use something like lein exec?</h2>

<p>Lein exec is nice. But it adds overhead.
If you need external dependencies you can solve it (in theory)
with classpath manipulations in java command (<code>java -cp dep.jar:dep2.jar:.</code>).
Still you can plug lein exec to JamVM if you want.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Spotify Linux beta on OpenSUSE 13.1]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1/"/>
    <updated>2014-05-27T13:31:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1</id>
    <content type="html"><![CDATA[<p>Very small post (more like insruction for myself for the future) on how to convert deb packages provided by Spotify to rpm.
Solution can be applied to any rpm based system (I think so).</p>

<ul>
<li>Install <a href="http://software.opensuse.org/package/alien">alien</a> (perl scripts for converting packages).</li>
<li>Download deb from <a href="http://repository.spotify.com/pool/non-free/s/spotify/">spotify repository</a>, pay attention to architecture.</li>
<li>Convert deb -> rpm by running <code>sudo alien -r spotify*.deb</code>.</li>
<li>Install rpm <code>sudo zypper in spotify*.rpm</code>.</li>
<li>Run <code>spotify</code>.</li>
</ul>


<p>And it should work.
I noticed few warning about default locates and missing libraries, but client still works fine without any changes to system (symlinks, locales and etc).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconnect to NetworkManager VPN on systemd based system]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/26/autoconnect-to-networkmanager-vpn-on-systemd-based-system/"/>
    <updated>2014-05-26T21:17:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/26/autoconnect-to-networkmanager-vpn-on-systemd-based-system</id>
    <content type="html"><![CDATA[<p>Here is small post with instructions how to setup auto connect to VPN.
Of course you can probably figure out all this yourself, but what if you are lazy?</p>

<!-- more -->


<p>Following was tested on OpenSuse 13.1.</p>

<ul>
<li><p>First create new VPN connection in NetworkManager.</p></li>
<li><p>Create dispatcher file that will connect your VPN.</p></li>
</ul>


<p>```text /etc/NetworkManager/dispatcher.d/vpn-up</p>

<h1>!/bin/sh</h1>

<p>CONN="MY-CONNECTION-NAME"</p>

<p>nmcli con status id $CONN > /dev/null</p>

<p>rc=$?
if [[ $rc != 0 ]] ; then</p>

<pre><code>nmcli con up id $CONN
sleep 5 # optional wait time
</code></pre>

<p>fi</p>

<p>```</p>

<ul>
<li>Make file executable <code>chmod +x /etc/NetworkManager/dispatcher.d/vpn-up</code></li>
<li>Make sure that dispatcher is running by running <code>journalctl -b -u NetworkManager</code> and looking for the line that looks like:</li>
</ul>


<p><code>text journalctl -b -u NetworkManager
&lt;warn&gt; Dispatcher failed: (32) Unit dbus-org.freedesktop.nm-dispatcher.service failed to load: No such file or directory.
</code></p>

<ul>
<li>If you see line about dispatcher service - enable it manually by running <code>systemctl enable NetworkManager-dispatcher.service</code>.</li>
<li>By default NetworkManager will store VPN password in keyring, to start VPN without keyring dependencies update VPN connection configuration with following changes:</li>
</ul>


<p>```text /etc/NetworkManager/system-connections/MY-CONNECTION-NAME
...
[vpn]
password-flags=0
...
[vpn-secrets]
password=MY-VPN-PASSWORD</p>

<p>```</p>

<p>And now everything should work like a charm!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSUSE 13.1 + Mate 1.6 + Xmonad]]></title>
    <link href="http://blog.gonzih.me/blog/2013/11/21/opensuse-13-dot-1-plus-mate-1-dot-6-plus-xmonad/"/>
    <updated>2013-11-21T22:46:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/11/21/opensuse-13-dot-1-plus-mate-1-dot-6-plus-xmonad</id>
    <content type="html"><![CDATA[<p>So OpenSUSE 13.1 was released. And it's great. But...
Since gnome 3.9 support for custom window managers was broken.
How to restore sanity to your desktop? Mate it! Here is quick how to.</p>

<p><a href="https://dl.dropbox.com/u/4109351/octopress/suse-mate-xmonad/1.png"><img src="https://dl.dropbox.com/u/4109351/octopress/suse-mate-xmonad/re_1.png" alt="preview" /></a></p>

<!-- more -->


<p>Patterns for installing mate in OpenSUSE can be found here <a href="http://en.opensuse.org/Portal:MATE">http://en.opensuse.org/Portal:MATE</a></p>

<p>Xmonad can be installed using cabal install or using packages from OBS.</p>

<p>```sh
sudo zypper -n in xorg-x11-devel</p>

<p>cabal install xmonad         --flags="with_utf8 with_xft"
cabal install xmonad-contrib --flags="with_utf8 with_xft"
cabal install xmobar         --flags="with_utf8 with_xft"
```</p>

<p>Create following file:</p>

<p>```text /usr/share/applications/xmonad.desktop
[Desktop Entry]
Type=Application
Name=Xmonad</p>

<h1>Replace it with your xmonad launcher</h1>

<p>Exec=xmonad
NoDisplay=true
Terminal=false
StartupNotify=false
Categories=
```</p>

<p>Set xmonad as window manager for Mate:</p>

<p>```sh</p>

<h1>Mate 1.4</h1>

<p>mateconftool-2 -s /desktop/mate/session/required_components/windowmanager xmonad --type string</p>

<h1>Mate 1.6</h1>

<p>gsettings set org.mate.session.required-components windowmanager xmonad
```</p>

<p>If you have Gnome 3 installed make sure that gnome-settings daemon is not running in mate (can cause gsettings error).</p>

<p>Enjoy!</p>

<p>By the way I have some weird issues with gnome 3 apps rendering, no idea how to fix this for now.
Also <code>caja -n</code> which is responsible for displaying icons on desktop loves to hide my xmobar.
You can kill caja and mate will restore it (temporary fix).</p>

<p>If you have any tips feel free to comment!</p>

<p><strong>UPDATE 0</strong> issues with rendering was caused by <code>setWMName "LG3D"</code> in <code>startupHook</code>.
Removed it for now (probably will cause issues with some Java(AWT) applications).</p>

<p><strong>UPDATE 1</strong> If you want to disable desktop add following file:</p>

<p><code>text /usr/share/applications/caja-no-desktop.desktop
[Desktop Entry]
Name=Caja
Exec=caja -n --no-desktop
Icon=system-file-manager
Terminal=false
Type=Application
StartupNotify=true
NoDisplay=true
OnlyShowIn=MATE;
X-MATE-Bugzilla-Bugzilla=MATE
X-MATE-Bugzilla-Product=caja
X-MATE-Bugzilla-Component=general
X-MATE-Bugzilla-Version=1.6.2
X-MATE-Autostart-Phase=Desktop
X-MATE-Autostart-Notify=true
X-MATE-AutoRestart=true
X-MATE-Provides=filemanager
</code></p>

<p>And now set it as default file manager for mate:</p>

<p>```sh</p>

<h1>Mate 1.6</h1>

<p>gsettings set org.mate.session.required-components filemanager "caja-no-desktop"
```</p>

<p>Also you can store all <code>*.desktop</code> files in <code>$HOME/.local/share/applications</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blue Midnight Commander color scheme]]></title>
    <link href="http://blog.gonzih.me/blog/2013/02/14/blue-midnight-commander-color-scheme/"/>
    <updated>2013-02-14T21:22:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/02/14/blue-midnight-commander-color-scheme</id>
    <content type="html"><![CDATA[<p>I spend today few hours reading mc documentation about color scheme configuration. Came up with following color scheme. Enjoy :)</p>

<p><a href="https://raw.github.com/Gonzih/dotfiles/a43c06d7cd12f3e1e06f3efe655e082e4dc78012/.config/mc/theme.png"><img src="https://dl.dropbox.com/u/4109351/octopress/midnight-commander-theme/theme.png" alt="Blue Midnight Commander color scheme" /></a></p>

<p><code>ini .config/mc/ini
[Colors]
base_color=lightgray,blue:normal=blue,default:reverse=green,default:gauge=gray,lightgray:selected=white,blue:marked=yellow,default:markselect=yellow,default:directory=brightblue,default:executable=brightgreen,default:link=cyan,default:device=brightmagenta,default:core=red,default:special=lightgray,default:dnormal=lightgray,blue:dfocus=lightgray,black:dhotnormal=yellow,blue:dhotfocus=yellow,black:menunormal=lightgray,blue:menuhot=yellow,blue:menusel=lightgray,black:menuhotsel=yellow,black:menuinactive=lightgray,gray:errors=lightgray,red:errdhotnormal=yellow,red:errdhotfocus=yellow,lightgray:input=lightblue,gray:inputunchanged=blue,gray:inputmark=white,blue:bbarhotkey=white,black:bbarbutton=lightgray,blue:viewbold=lightgray,default:viewunderline=lightblue,default:viewselected=lightgray,grey:helpnormal=lightgray,default:helpitalic=lightblue,default:helpbold=lightgray,default:helplink=green,default:helpslink=lighgreen,defalt:
</code></p>

<p>For more information take look at <a href="http://www.midnight-commander.org/wiki/doc/common/skins">mc wiki</a> and run <code>mc --help-color</code> to see available color variables in your mc version.
Format of color configuration is <code>what=foreground,background:</code>. All configuration shoud be in one line (ofcourse you can write it in multiple lines and then use vim (or other cool editor) magic).</p>
]]></content>
  </entry>
  
</feed>
