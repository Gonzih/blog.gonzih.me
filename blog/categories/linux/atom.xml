<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2016-06-20T20:10:10+00:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arch Linux on Lenovo IdeaPad Y700 15"]]></title>
    <link href="http://blog.gonzih.me/blog/2015/12/11/arch-linux-on-lenovo-ideapad-y700-15/"/>
    <updated>2015-12-11T13:20:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2015/12/11/arch-linux-on-lenovo-ideapad-y700-15</id>
    <content type="html"><![CDATA[<p>Collection of tweaks that I gathered after installing Arch Linux on to Lenovo IdeaPAd Y700.</p>

<!-- more -->


<h1>What works so far</h1>

<ul>
<li>WIFI</li>
<li>Suspend (look at the bumblebee issue with suspend if nvidia module gets loaded on resume)</li>
<li>Sound without subwoofer</li>
<li>Video (I used bumblebee to switch between intel/nvidia GPUs)</li>
<li>Brightness</li>
<li>Keyboard backlit</li>
<li>Power managment via laptop mode tools and systemd.</li>
<li>Card reader (you might need to run <code>echo 1 | sudo tee /sys/bus/pci/rescan</code> so card reader becomes visible)</li>
<li>HDMI output</li>
</ul>


<h1>What does not work</h1>

<ul>
<li>Subwoofer</li>
</ul>


<h1>Installation</h1>

<h2>Boot</h2>

<ul>
<li>Add nomodeset to the kernel options on Live USB boot</li>
<li>Make sure secure boot is disabled (to make your life easier)</li>
<li>Follow <a href="https://wiki.archlinux.org/index.php/Installation_guide">arch linux installation instructions</a></li>
</ul>


<h1>Extra tweaking</h1>

<h2>Video</h2>

<ul>
<li>Make sure switchable GPUs are enabled in BIOS</li>
<li>Follow <a href="https://wiki.archlinux.org/index.php/Bumblebee#Installing_Bumblebee_with_Intel.2FNVIDIA">insructions on the arch wiki</a></li>
<li>To enable intel GPU add <code>i915.preliminary_hw_support=1</code> to <code>GRUB_CMDLINE_LINUX_DEFAULT</code> in the <code>/etc/default/grub</code> file. This should be solved after 4.3 kernel release.</li>
<li>Problems with video scaling in fullscreen mode can be solved by using gl as an output driver (mplayer -vo gl).</li>
</ul>


<h2>Wifi</h2>

<p>Since there is no HW based wifi switch (only Fn+F5 combination) and kernel still tries to read it wifi is reported disabled on every boot.
There was a patch for the 17 inch model <a href="http://www.gossamer-threads.com/lists/linux/kernel/2323659">here</a>.</p>

<h3>Temporary solution 1:</h3>

<ul>
<li><code>sudo systemctl enable rfkill-unblock@wifi.service</code></li>
<li><code>sudo rfkill unblock wifi</code></li>
<li>Works fine with <code>wicd</code></li>
<li>Configuring NetworkManager service to be run after rfkill service should also work</li>
</ul>


<h3>Temporary solution 2:</h3>

<ul>
<li><code>echo blacklist ideapad_laptop | sudo tee /etc/modprobe.d/blacklist.conf</code> to disable acpi module</li>
</ul>


<h2>Audio clicking</h2>

<p>This is caused by suspend-on-idle module in the pulse audio. Instead of disabling the module I decided to just set very long timeout.
To do that append <code>timeout=36000</code> to line <code>load-module module-suspend-on-idle</code> in the <code>/etc/pulse/default.pa</code> configuration file.
And now restart pulse by running <code>pulseaudio --kill</code> and <code>pulseaudio --start</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux on Macbook Pro 8.2 (17" 2011)]]></title>
    <link href="http://blog.gonzih.me/blog/2015/08/08/arch-linux-on-macbook-pro-8-dot-2-17-2011/"/>
    <updated>2015-08-08T09:53:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2015/08/08/arch-linux-on-macbook-pro-8-dot-2-17-2011</id>
    <content type="html"><![CDATA[<p>Couple of tips from my experience of running Arch on Macbook 8.2.</p>

<!--more-->


<h2>Installation</h2>

<p><a href="https://wiki.archlinux.org/index.php/MacBook">Arch Wiki page</a> covers installation well enough in my opinion.</p>

<h3>Bootloader via systemd-boot</h3>

<p>Before installing boot loader change /boot partition type to <code>EFI System</code> (<code>ef00</code>).</p>

<p><code>bash
mkfs.fat -F32 /dev/sda1
pacman -S dosfstools
mount /dev/sda1 /mnt/boot
arch-chroot /mnt
bootctl --path=/boot instnall
</code></p>

<h2>Use broadcom-wl wireless module from AUR</h2>

<p>This is proprietary broadcom driver. Works fine with BCM4331.
Only thing that does not work - hidden SSID.</p>

<p>OpenSource driver (that is part of the kernel) and reverse engeneered ones (b43) are too unstable in my experience.</p>

<p>To make sure that correct module is used by hardwrare blacklist every other module and reboot:</p>

<p>```</p>

<h1>/etc/modprobe.d/wl.conf</h1>

<p>blacklist b43
blacklist b43legacy
blacklist ssb
blacklist bcm43xx
blacklist brcm80211
blacklist brcmfmac
blacklist brcmsmac
blacklist bcma
```</p>

<h2>Disable Radeon GPU for better power consumption</h2>

<p>This will reduce power usage dramatically but also will disable external screen support via display port.
This laptop relies on the external gpu to work with display port.</p>

<p>Edit <code>/etc/grub.d/00_header</code> and add outb lines in between <code>set gfxmode=${GRUB_GFXMODE}</code> and <code>load video</code>:</p>

<p><code>
...
set gfxmode=${GRUB_GFXMODE}
outb 0x728 1
outb 0x710 2
outb 0x740 2
outb 0x750 0
load video
...
</code></p>

<p>Generate new grub config:</p>

<p>```</p>

<h1>grub-mkconfig -o /boot/grub/grub.cfg</h1>

<p>```</p>

<p>PS. This post will probably grow over time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing shell scripts with Clojure+JamVM]]></title>
    <link href="http://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure/"/>
    <updated>2014-09-28T11:04:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure</id>
    <content type="html"><![CDATA[<p>We all hate shell scripting.
Scripts are annoyingly hard to debug, test and verify.
Would be lovely, to use some kind of lisp for scripting, right?
To do interactive development with repl in your favorite editor.
To write it in a nice predictable language that you also enjoy.
But sometimes it's impossible to add some external dependencies to the system.
What if you have only JVM to your disposal, will you be able to pull it off only with JVM and clojure.jar?</p>

<!--more-->


<h1>Basic setup</h1>

<p>First what we will need is to get clojure jar file:</p>

<p><code>
wget -O /opt/clojure.jar 'http://central.maven.org/maven2/org/clojure/clojure/1.6.0/clojure-1.6.0.jar'
</code></p>

<p>Next lets create executable that will live in <code>/usr/bin</code> (or <code>/opt/bin</code> or <code>/home/youruser/bin</code>):</p>

<p>```bash /usr/bin/clojure</p>

<h1>!/bin/sh</h1>

<p>exec java -jar /opt/clojure.jar "$@"
```</p>

<p>And now it's time for our hello world script:</p>

<p>```clojure /opt/test.clj</p>

<h1>!/usr/bin/clojure</h1>

<p>(println "hello world")
```</p>

<p>Make it executable:</p>

<p><code>bash
chmod +x /opt/test.clj
</code></p>

<p>And run it:</p>

<p><code>bash
$ /opt/test.clj
hello world
</code></p>

<p>Yay! But it feels kind of slow:</p>

<p>```bash
time /opt/test.clj
hello world</p>

<p>real  0m2.684s
user  0m2.239s
sys   0m0.186s
```</p>

<p>2 seconds startup time, not really suitable for scripting, right?
Can we improve that? What if there would be JVM with fast startup and low memory usage.</p>

<h1>Introducing JamVM.</h1>

<p><em>"But... but you told us that there is only JVM available on production system without ability to add external dependencies."</em></p>

<p>I lied, sorry.</p>

<p>Compiling JamVM with OpenJDK support:</p>

<p>```bash</p>

<h1>Fetching required dependencies and source</h1>

<p>apt-get -y install openjdk-7-jdk openjdk-7-jre build-essential zlib1g-dev
cd /opt
wget -O jamvm-2.0.0.tar.gz 'http://downloads.sourceforge.net/project/jamvm/jamvm/JamVM%202.0.0/jamvm-2.0.0.tar.gz'
tar -xvzf jamvm-2.0.0.tar.gz</p>

<h1>Building</h1>

<p>cd /opt/jamvm-2.0.0
./configure --with-java-runtime-library=openjdk7 &amp;&amp; make check &amp;&amp; make &amp;&amp; make install</p>

<h1>Installing in to the openjdk installation</h1>

<p>mkdir /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm
cp /usr/local/jamvm/lib/libjvm.so /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm/libjvm.so</p>

<h1>Trying it out</h1>

<p>java -jamvm -version
```</p>

<p>JamVM will be installed as separate vm in openjdk, so it will not mess with existing installation.
You will need to use -jamvm option to java command to run it with small overhead vm.</p>

<p>Let's update our clojure executable:</p>

<p>```bash /usr/bin/clojure</p>

<h1>!/bin/sh</h1>

<p>exec java -jamvm -jar /opt/clojure.jar "$@"
```</p>

<p>Let's try it out:</p>

<p>```bash
time /opt/test.clj
hello world</p>

<p>real  0m0.866s
user  0m0.764s
sys   0m0.076s
```</p>

<p>Better, right?</p>

<h2>How slow is JamVM? Some benchmarks:</h2>

<p>```text
Clojure 1.6</p>

<p>JamVM:</p>

<p>(factorial 5000) Avg: 248.65890986500017
(fib 20)         Avg: 35.33471996000001
(sort-seq)       Avg: 405.7438969800002</p>

<p>OpenJDK:</p>

<p>(factorial 5000) Avg: 25.016900630000006
(fib 20)         Avg: 0.69957772
(sort-seq)       Avg: 11.553695560000001
```</p>

<p>Much slower, but if you think about it
shell scripting most of the time is about executing external commands,
IO and data filtering. Might be as well not so bad.
Also memory usage of JamVM makes it perfect for embedded systems.</p>

<h2>Why not use something like lein exec?</h2>

<p>Lein exec is nice. But it adds overhead.
If you need external dependencies you can solve it (in theory)
with classpath manipulations in java command (<code>java -cp dep.jar:dep2.jar:.</code>).
Still you can plug lein exec to JamVM if you want.</p>

<h3>Update</h3>

<p>I just noticed that in Ubuntu 14:04 repos there is already JamVM package,
so you can just run <code>apt-get -y install icedtea-7-jre-jamvm</code> to install latest build.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Spotify Linux beta on OpenSUSE 13.1]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1/"/>
    <updated>2014-05-27T13:31:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1</id>
    <content type="html"><![CDATA[<p>Very small post (more like insruction for myself for the future) on how to convert deb packages provided by Spotify to rpm.
Solution can be applied to any rpm based system (I think so).</p>

<ul>
<li>Install <a href="http://software.opensuse.org/package/alien">alien</a> (perl scripts for converting packages).</li>
<li>Download deb from <a href="http://repository.spotify.com/pool/non-free/s/spotify/">spotify repository</a>, pay attention to architecture.</li>
<li>Convert deb -> rpm by running <code>sudo alien --scripts -r spotify*.deb</code>.</li>
<li>Install rpm <code>sudo zypper in spotify*.rpm</code>.</li>
<li>Run <code>spotify</code>.</li>
</ul>


<p>And it should work.
I noticed few warning about default locates and missing libraries, but client still works fine without any changes to system (symlinks, locales and etc).</p>

<p><strong>PS</strong></p>

<p>If you have issues with volume being too loud by default make sure that you changed <code>flat-volumes</code> from <code>yes</code> to <code>no</code> in <code>/etc/pulse/daemon.conf</code></p>

<p><strong>PPS</strong></p>

<p>People reported that installing version 0.9 -> uninstalling it -> installing version 1.0 might break your system. So watch out for the uninstallation errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconnect to NetworkManager VPN on systemd based system]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/26/autoconnect-to-networkmanager-vpn-on-systemd-based-system/"/>
    <updated>2014-05-26T21:17:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/26/autoconnect-to-networkmanager-vpn-on-systemd-based-system</id>
    <content type="html"><![CDATA[<p>Here is small post with instructions how to setup auto connect to VPN.
Of course you can probably figure out all this yourself, but what if you are lazy?</p>

<!-- more -->


<p>Following was tested on OpenSuse 13.1.</p>

<ul>
<li><p>First create new VPN connection in NetworkManager.</p></li>
<li><p>Create dispatcher file that will connect your VPN.</p></li>
</ul>


<p>```text /etc/NetworkManager/dispatcher.d/vpn-up</p>

<h1>!/bin/sh</h1>

<p>CONN="MY-CONNECTION-NAME"</p>

<p>nmcli con status id $CONN > /dev/null</p>

<p>rc=$?
if [[ $rc != 0 ]] ; then</p>

<pre><code>nmcli con up id $CONN
sleep 5 # optional wait time
</code></pre>

<p>fi</p>

<p>```</p>

<ul>
<li>Make file executable <code>chmod +x /etc/NetworkManager/dispatcher.d/vpn-up</code></li>
<li>Make sure that dispatcher is running by running <code>journalctl -b -u NetworkManager</code> and looking for the line that looks like:</li>
</ul>


<p><code>text journalctl -b -u NetworkManager
&lt;warn&gt; Dispatcher failed: (32) Unit dbus-org.freedesktop.nm-dispatcher.service failed to load: No such file or directory.
</code></p>

<ul>
<li>If you see line about dispatcher service - enable it manually by running <code>systemctl enable NetworkManager-dispatcher.service</code>.</li>
<li>By default NetworkManager will store VPN password in keyring, to start VPN without keyring dependencies update VPN connection configuration with following changes:</li>
</ul>


<p>```text /etc/NetworkManager/system-connections/MY-CONNECTION-NAME
...
[vpn]
password-flags=0
...
[vpn-secrets]
password=MY-VPN-PASSWORD</p>

<p>```</p>

<p>And now everything should work like a charm!</p>
]]></content>
  </entry>
  
</feed>
