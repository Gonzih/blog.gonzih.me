<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Max Gonzih</title>
    <link>http://blog.gonzih.me/categories/bealbebone/index.xml</link>
    <description>Recent content on Max Gonzih</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gonzih@gmail.com (Max Gonzih)</managingEditor>
    <webMaster>gonzih@gmail.com (Max Gonzih)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <atom:link href="/categories/bealbebone/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ClojureScript on BeagleBone: simple benchmark with Node.js</title>
      <link>http://blog.gonzih.me/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js/</link>
      <pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>http://blog.gonzih.me/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js/</guid>
      <description>&lt;p&gt;Benchmark is based on my &lt;a href=&#34;http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/&#34;&gt;previous experiments&lt;/a&gt; with BeagleBone and Clojure. Setup is the same. BeagleBone is running Ubuntu 12.04. Cpu is running on 500 Mhz.
Node version is 0.6.12. ClojureScript is compiled with advanced and simple optimizations.
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Gonzih/clojurescript-small-benchmark-for-embed&#34;&gt;Code&lt;/a&gt; is modified to run on top of the JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns benchmark.core)

(defn factorial [x]
  (reduce * (range 1 (inc x))))

(defn fib [n]
  (if (&amp;lt;= n 1)
    1
    (+ (fib (- n 1)) (fib (- n 2)))))

(defn sort-seq []
  (sort (repeat 100000 (rand-int 2000000))))

(defn time-fun [fun]
  (let [start  (.getTime (js/Date.))
        _      (fun)
        end    (.getTime (js/Date.))
        result (- end start)]
    result))

(defn time-it [fun]
  (let [values  (for [i (range 200)] (time-fun fun))]
    (/ (apply + values)
       (count values))))

(defn -main []
  (println &amp;quot;(factorial 5000) \t Avg: &amp;quot; (time-it #(factorial 5000)))
  (println &amp;quot;(fib 20) \t Avg: &amp;quot;         (time-it #(fib 20)))
  (println &amp;quot;(sort-seq) \t Avg: &amp;quot;       (time-it #(sort-seq))))

(set! *main-cli-fn* -main)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Benchmark results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; node --version
v0.6.12

# simple compiler optimization
&amp;gt; ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
91.4 20.3 90816  51292 pts/1  Rl+  08:46  0:54 node clojurescript-benchmark-optimization-simple.js

&amp;gt; node clojurescript-benchmark-optimization-simple.js
(factorial 5000) Avg: 64.345
(fib 20)         Avg: 5.575
(sort-seq)       Avg: 7281.975

# advanced compiler optimization
&amp;gt; ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
99.0 20.9 92200  52776 pts/0  Rl+  07:14  0:44 node clojurescript-benchmark-optimization-advanced.js

&amp;gt; node clojurescript-benchmark-optimization-advanced.js
(factorial 5000) Avg: 54.775
(fib 20)         Avg: 2.77
(sort-seq)       Avg: 6325.71
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So as you can see from output above - ClojureScript can be well suitable for development and scripting on small boards like BeagleBone or Raspberry Pi.
Good speed and better semantics at low prices, I â™¥ Clojure and ClojureScript :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clojure on BeagleBone: OpenJDK vs Oracle Embedded JRE benchmark</title>
      <link>http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/</link>
      <pubDate>Fri, 07 Sep 2012 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/</guid>
      <description>&lt;p&gt;After installing Embedded JRE on BeagleBone I decided to benchmark it against OpenJDK.
&lt;/p&gt;

&lt;p&gt;BeagleBone is running Ubuntu 12.04.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cat /etc/*-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=12.04
DISTRIB_CODENAME=precise
DISTRIB_DESCRIPTION=&amp;quot;Ubuntu 12.04 LTS&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BeagleBone CPU is running on 500Mhz.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cpufreq-info | grep &#39;current CPU&#39;
current CPU frequency is 500 MHz.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clojure version is 1.4.0.&lt;/p&gt;

&lt;p&gt;Benchmark code is from &lt;a href=&#34;http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/&#34;&gt;nakkaya&amp;rsquo;s post&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns benchmark.core)

(defn factorial [x]
  (reduce * (range 1N (inc x))))
;                   ^ integerOverflow fix

(defn fib [n]
  (if (&amp;lt;= n 1)
    1
    (+ (fib (- n 1)) (fib (- n 2)))))

(defn sort-seq []
  (sort (repeat 100000 (rand-int 2000000))))

(defn time-it [fn]
  (let [values  (for [i (range 200)] (with-out-str (time (fn))))
        doubles (map #(Double. (nth (.split % &amp;quot; &amp;quot;) 2)) values)]
    (/ (apply + doubles) (count doubles))))

(defn -main []
  (println &amp;quot;(factorial 5000) \t Avg: &amp;quot; (time-it #(factorial 5000)))
  (println &amp;quot;(fib 20) \t Avg: &amp;quot; (time-it #(fib 20)))
  (println &amp;quot;(sort-seq) \t Avg: &amp;quot; (time-it #(sort-seq))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So here the numbers:&lt;/p&gt;

&lt;p&gt;OpenJDK:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; sudo apt-get install openjdk-7-jre-headless

&amp;gt; java -version
java version &amp;quot;1.7.0_03&amp;quot;
OpenJDK Runtime Environment (IcedTea7 2.1.1pre) (7~u3-2.1.1~pre1-1ubuntu3)
OpenJDK Zero VM (build 22.0-b10, mixed mode)

&amp;gt; ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
96.9 16.3 267932 41172 pts/1  Sl+  09:07  9:28 java

&amp;gt; lein run
(factorial 5000) Avg:  1681.9940255249999
(fib 20)         Avg:  490.16940197000025
(sort-seq)       Avg:  7129.159457125003
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Embedded JRE:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; java -version
java version &amp;quot;1.7.0_06&amp;quot;
Java(TM) SE Embedded Runtime Environment (build 1.7.0_06-b24, headless)
Java HotSpot(TM) Embedded Client VM (build 23.2-b09, mixed mode)

&amp;gt; ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
91.2 16.4 221740 41372 pts/1  Sl+  08:28  5:16 java

&amp;gt; lein run
(factorial 5000) Avg:  1061.0568413899998
(fib 20)         Avg:  30.877820054999983
(sort-seq)       Avg:  1729.9035516600002
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you are. Better performance and slightly better memory usage.
Good Job, Embedded Java Team :)
Looking forward for hardfloat ABI version to test it on Raspberry Pi.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
