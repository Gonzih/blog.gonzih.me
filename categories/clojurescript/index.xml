<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojurescript on Max Gonzih</title>
    <link>https://blog.gonzih.me/categories/clojurescript/</link>
    <description>Recent content in clojurescript on Max Gonzih</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gonzih@gmail.com (Max Gonzih)</managingEditor>
    <webMaster>gonzih@gmail.com (Max Gonzih)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <lastBuildDate>Mon, 15 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.gonzih.me/categories/clojurescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nvim terminal &#43; ClojureScript and figwheel</title>
      <link>https://blog.gonzih.me/blog/2015/06/15/nvim-terminal-plus-clojurescript-and-figwheel/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2015/06/15/nvim-terminal-plus-clojurescript-and-figwheel/</guid>
      <description>&lt;p&gt;This is a small post on how to improve your ClojureScript development flow in NeoVim using its terminal feature.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ServerSide rendering of Reagent components</title>
      <link>https://blog.gonzih.me/blog/2015/02/16/serverside-rendering-of-reagent-components/</link>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2015/02/16/serverside-rendering-of-reagent-components/</guid>
      <description>&lt;p&gt;Great thing about React is that you can write what people nowadays call &amp;ldquo;isomorphic JavaScript&amp;rdquo;.
In this post we will not discuss how wrong this term is in many ways,
but instead we will focus on how to achieve similar results in your ClojureScript code using Reagent library.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Two way data bindings in Reagent</title>
      <link>https://blog.gonzih.me/blog/2014/10/22/two-way-data-bindings-in-reagent/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2014/10/22/two-way-data-bindings-in-reagent/</guid>
      <description>&lt;p&gt;Small code snippet showing ability to generate 2 way data bindings in Reagent.
Underneath it&amp;rsquo;s all about core.async.
Also provides ability to apply transformation using transducers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClojureScript on BeagleBone: simple benchmark with Node.js</title>
      <link>https://blog.gonzih.me/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js/</link>
      <pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>https://blog.gonzih.me/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js/</guid>
      <description>&lt;p&gt;Benchmark is based on my &lt;a href=&#34;https://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/&#34;&gt;previous experiments&lt;/a&gt; with BeagleBone and Clojure. Setup is the same. BeagleBone is running Ubuntu 12.04. Cpu is running on 500 Mhz.
Node version is 0.6.12. ClojureScript is compiled with advanced and simple optimizations.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
