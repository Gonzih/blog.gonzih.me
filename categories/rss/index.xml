<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Max Gonzih</title>
    <link>http://blog.gonzih.me/categories/rss/index.xml</link>
    <description>Recent content on Max Gonzih</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gonzih@gmail.com (Max Gonzih)</managingEditor>
    <webMaster>gonzih@gmail.com (Max Gonzih)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright>
    <atom:link href="/categories/rss/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My first experience with core.typed</title>
      <link>http://blog.gonzih.me/blog/2013/08/30/my-first-experience-with-core-dot-typed/</link>
      <pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>http://blog.gonzih.me/blog/2013/08/30/my-first-experience-with-core-dot-typed/</guid>
      <description>&lt;p&gt;Today I started improving my feeds2imap.clj project with core.typed.
And already hit few issues, so this post is something like collection of tips how to solve issues with core.typed based on my experience.
I couldn&amp;rsquo;t find answers on my issues in wiki or documentation.
But I got answers annoying Ambrose Bonnaire-Sergeant on Google+.
Thank you for your patience, man!
And keep doing what you are doing, core.typed is just amazing thing!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;unresolved-constructor-invocation&#34;&gt;Unresolved constructor invocation&lt;/h3&gt;

&lt;p&gt;Core.typed can&amp;rsquo;t match constructor based on arguments type,
you should provide type hints to help core.typed with that.&lt;/p&gt;

&lt;h3 id=&#34;by-default-core-typed-assumes-that-all-java-methods-can-return-nil&#34;&gt;By default core.typed assumes that all java methods can return nil&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;(non-nil-return ClassOrObject/methodName :all)&lt;/code&gt; to tell core.typed that method won&amp;rsquo;t return nil.
Core.typed will trust you and will skip further checks.&lt;/p&gt;

&lt;p&gt;Or for example if you are expecting String as a result you can convert result to String with str before returning it.&lt;/p&gt;

&lt;h3 id=&#34;non-nil-return-in-core-typed-works-only-on-methods&#34;&gt;non-nil-return in core.typed works only on methods&lt;/h3&gt;

&lt;p&gt;And if you have static method then something like that would not work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(non-nil-return javax.mail.Message$RecipientType/TO :all)

(ann recipient-type-to [-&amp;gt; Message$RecipientType])
(defn ^Message$RecipientType recipient-type-to []
  (Message$RecipientType/TO))

(comment
  Type mismatch:
  Expected:       (Fn [-&amp;gt; Message$RecipientType])
  Actual:         (Fn [-&amp;gt; (U Message$RecipientType nil)]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(non-nil-return javax.mail.Message$RecipientType/TO :all)

(ann recipient-type-to [-&amp;gt; Message$RecipientType])
(defn ^Message$RecipientType recipient-type-to
  []
  {:post [%]}
  (Message$RecipientType/TO))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is the same as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(non-nil-return javax.mail.Message$RecipientType/TO :all)

(ann recipient-type-to [-&amp;gt; Message$RecipientType])
(defn ^Message$RecipientType recipient-type-to []
  (let [temp (Message$RecipientType/TO)]
    (assert temp)
    temp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So unless assert evaluates temp to logical true exception will be raised
and function will always return non nil value, which makes core.typed happy.&lt;/p&gt;

&lt;h3 id=&#34;defining-parameterized-alias-type&#34;&gt;Defining Parameterized alias type&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def-alias Folder
  (TFn [[x :variance :covariant]] (Map Keyword x)))

(comment
  (Folder Items)
  (Folder Urls))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Gonzih/feeds2imap.clj/commit/1c41d814bdb054d57e644013c85275ec9a45a114&#34;&gt;Here is&lt;/a&gt; commit with changes related to core.typed.
I must say writing type annotations for code that you wrote few months ago is tricky.
But still I enjoyed process and results and I&amp;rsquo;m still a little bit amazed about all core.typed thing.
Power of lisp combined with really smart people :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RSS/Atom reader in Clojure via IMAP</title>
      <link>http://blog.gonzih.me/blog/2013/06/28/rss/atom-reader-in-clojure-via-imap/</link>
      <pubDate>Fri, 28 Jun 2013 00:00:00 +0000</pubDate>
      <author>gonzih@gmail.com (Max Gonzih)</author>
      <guid>http://blog.gonzih.me/blog/2013/06/28/rss/atom-reader-in-clojure-via-imap/</guid>
      <description>&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;Google Reader was shut down and I started looking for alternatives.
And sadly I did not found anything close to Google Reader experience.
There are plenty good alternatives, but all of them suffer from some kind of background noise (social based features, weird hotkeys, weird ui, unusable mobile clients and etc.).
All I wanted was simple to use news reader.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;idea&#34;&gt;Idea&lt;/h3&gt;

&lt;p&gt;Then I found post in the Racket community about storing your feeds in the IMAP folders using &amp;ldquo;APPEND&amp;rdquo; command by &lt;a href=&#34;http://www.greghendershott.com/2013/05/feeds2gmail.html&#34;&gt;Greg Hendershott&lt;/a&gt;.
That was it. Simplest possible solution, that I can run on small device or server by cron. I played a little bit with Racket source code and decided to write my own version to do the job.&lt;/p&gt;

&lt;h3 id=&#34;clojure-version&#34;&gt;Clojure version&lt;/h3&gt;

&lt;p&gt;First I implemented my &lt;a href=&#34;https://github.com/Gonzih/feeds2imap.rb&#34;&gt;prototype in Ruby&lt;/a&gt; in few hours. I picked up Ruby because of built-in rss/atom and imap libraries.
I used it for few days and liked it. Simple, reliable solution.
So then I decided to rewrite it in Clojure.
Why Clojure?
Because it&amp;rsquo;s pure fun to use.
I decided to use java.mail framework for message storing and folder manipulations, feedparser-clj to fetch and parse rss/atom feeds and hiccup for templating.
I was really pleased with feedparser-clj in comparison with Ruby built-in library.
java.mail framework was not so bad as I was expecting at first.&lt;/p&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works?&lt;/h3&gt;

&lt;p&gt;Here is project logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetch folders and urls from feeds file.&lt;/li&gt;
&lt;li&gt;Fetch and parse RSS/Atom data from urls.&lt;/li&gt;
&lt;li&gt;Select only new items using cache file.&lt;/li&gt;
&lt;li&gt;Create required imap folders.&lt;/li&gt;
&lt;li&gt;Store new items as email messages.&lt;/li&gt;
&lt;li&gt;Mark items as read (put md5 hashes in to the clj file with set of old hashes).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s running now by cron (every hour) on my BeagleBone (using latest ejre version).&lt;/p&gt;

&lt;p&gt;Source code is hosted on github &lt;a href=&#34;https://github.com/Gonzih/feeds2imap.clj&#34;&gt;here&lt;/a&gt;. Take a look at project README for usage.&lt;/p&gt;

&lt;h3 id=&#34;more-implementations&#34;&gt;More implementations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Gonzih/feeds2imap.rb&#34;&gt;My Ruby prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Gonzih/feeds2imap.clj&#34;&gt;My Clojure implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/greghendershott/feeds2gmail&#34;&gt;Racket implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cordawyn/rss2imap&#34;&gt;Haskell implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
