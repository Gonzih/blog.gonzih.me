<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2014-09-28T17:41:22+02:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Replacing shell scripts with Clojure+JamVM]]></title>
    <link href="http://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure/"/>
    <updated>2014-09-28T11:04:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure</id>
    <content type="html"><![CDATA[<p>We all hate shell scripting.
Scripts are annoyingly hard to debug, test and verify.
Would be lovely, to use some kind of lisp for scripting, right?
To do interactive development with repl in your favorite editor.
To write it in a nice predictable language that you also enjoy.
But sometimes it&#8217;s impossible to add some external dependencies to the system.
What if you have only JVM to your disposal, will you be able to pull it off only with JVM and clojure.jar?</p>

<!--more-->


<h1>Basic setup</h1>

<p>First what we will need is to get clojure jar file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -O /opt/clojure.jar 'http://central.maven.org/maven2/org/clojure/clojure/1.6.0/clojure-1.6.0.jar'</span></code></pre></td></tr></table></div></figure>


<p>Next lets create executable that will live in <code>/usr/bin</code> (or <code>/opt/bin</code> or <code>/home/youruser/bin</code>):</p>

<figure class='code'><figcaption><span>/usr/bin/clojure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>java -jar /opt/clojure.jar <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now it&#8217;s time for our hello world script:</p>

<figure class='code'><figcaption><span>/opt/test.clj</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">#</span><span class="nv">!/usr/bin/clojure</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;hello world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x /opt/test.clj
</span></code></pre></td></tr></table></div></figure>


<p>And run it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/opt/test.clj
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<p>Yay! But it feels kind of slow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time</span> /opt/test.clj
</span><span class='line'>hello world
</span><span class='line'>
</span><span class='line'>real  0m2.684s
</span><span class='line'>user  0m2.239s
</span><span class='line'>sys   0m0.186s
</span></code></pre></td></tr></table></div></figure>


<p>2 seconds startup time, not really suitable for scripting, right?
Can we improve that? What if there would be JVM with fast startup and low memory usage.</p>

<h1>Introducing JamVM.</h1>

<p><em>&#8220;But but you told us that there is only JVM available on production system without ability to add external dependencies.&#8221;</em></p>

<p>I lied, sorry.</p>

<p>Compiling JamVM with OpenJDK support:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Fetching required dependencies and source</span>
</span><span class='line'>apt-get -y install openjdk-7-jdk openjdk-7-jre build-essential zlib1g-dev
</span><span class='line'><span class="nb">cd</span> /opt
</span><span class='line'>wget -O jamvm-2.0.0.tar.gz <span class="s1">&#39;http://downloads.sourceforge.net/project/jamvm/jamvm/JamVM%202.0.0/jamvm-2.0.0.tar.gz&#39;</span>
</span><span class='line'>tar -xvzf jamvm-2.0.0.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c"># Building</span>
</span><span class='line'><span class="nb">cd</span> /opt/jamvm-2.0.0
</span><span class='line'>./configure --with-java-runtime-library<span class="o">=</span>openjdk7 <span class="o">&amp;&amp;</span> make check <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> make install
</span><span class='line'>
</span><span class='line'><span class="c"># Installing in to the openjdk installation</span>
</span><span class='line'>mkdir /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm
</span><span class='line'>cp /usr/local/jamvm/lib/libjvm.so /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm/libjvm.so
</span><span class='line'>
</span><span class='line'><span class="c"># Trying it out</span>
</span><span class='line'>java -jamvm -version
</span></code></pre></td></tr></table></div></figure>


<p>JamVM will be installed as separate vm in openjdk, so it will not mess with existing installation.
You will need to use -jamvm option to java command to run it with small overhead vm.</p>

<p>Let&#8217;s update our clojure executable:</p>

<figure class='code'><figcaption><span>/usr/bin/clojure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>java -jamvm -jar /opt/clojure.jar <span class="nv">$@</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s try it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time</span> /opt/test.clj
</span><span class='line'>hello world
</span><span class='line'>
</span><span class='line'>real  0m0.866s
</span><span class='line'>user  0m0.764s
</span><span class='line'>sys   0m0.076s
</span></code></pre></td></tr></table></div></figure>


<p>Better, right?</p>

<h2>How slow is JamVM? Some benchmarks:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Clojure 1.6
</span><span class='line'>
</span><span class='line'>JamVM:
</span><span class='line'>
</span><span class='line'>(factorial 5000) Avg: 248.65890986500017
</span><span class='line'>(fib 20)         Avg: 35.33471996000001
</span><span class='line'>(sort-seq)       Avg: 405.7438969800002
</span><span class='line'>
</span><span class='line'>OpenJDK:
</span><span class='line'>
</span><span class='line'>(factorial 5000) Avg: 25.016900630000006
</span><span class='line'>(fib 20)         Avg: 0.69957772
</span><span class='line'>(sort-seq)       Avg: 11.553695560000001
</span></code></pre></td></tr></table></div></figure>


<p>Much slower, but if you think about it
shell scripting most of the time is about executing external commands,
IO and data filtering. Might be as well not so bad.
Also memory usage of JamVM makes it perfect for embedded systems.</p>

<h2>Why not use something like lein exec?</h2>

<p>Lein exec is nice. But it adds overhead.
If you need external dependencies you can solve it (in theory)
with classpath manipulations in java command (<code>java -cp dep.jar:dep2.jar:.</code>).
Still you can plug lein exec to JamVM if you want.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Hacker News json api with Haskell]]></title>
    <link href="http://blog.gonzih.me/blog/2014/08/13/hacker-news-json-api-with-haskell/"/>
    <updated>2014-08-13T21:43:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/08/13/hacker-news-json-api-with-haskell</id>
    <content type="html"><![CDATA[<p>Small announcement post.</p>

<p>Today I launched tiny scotty server that serves json for Hacker News front page.
Project source code is located on <a href="https://github.com/Gonzih/HNApi">github</a>.
You can access api <a href="http://hn.gonzih.me/">here</a>.</p>

<p>Hacker news parser is implemented using <a href="http://hackage.haskell.org/package/hxt-8.5.2">HXT</a>
and <a href="http://egonschiele.github.io/HandsomeSoup/">HandsomeSoup</a>.
Json is served with help of <a href="https://github.com/scotty-web/scotty/">Scotty</a> web framework.
Currently it&#8217;s running on Heroku using <a href="https://github.com/begriffs/heroku-buildpack-ghc">this ghc-7.8 buildpack</a>.</p>

<p>I don&#8217;t use RSS since I&#8217;m also interested in points and amount of comments.
For me HN is more about interesting links than community and conversations behind the posts.
So I don&#8217;t really care about anything except front page.</p>

<p>Originally I started this project as a Haskell learning exercise.
I hope someone will find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Spotify Linux beta on OpenSUSE 13.1]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1/"/>
    <updated>2014-05-27T13:31:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1</id>
    <content type="html"><![CDATA[<p>Very small post (more like insruction for myself for the future) on how to convert deb packages provided by Spotify to rpm.
Solution can be applied to any rpm based system (I think so).</p>

<ul>
<li>Install <a href="http://software.opensuse.org/package/alien">alien</a> (perl scripts for converting packages).</li>
<li>Download deb from <a href="http://repository.spotify.com/pool/non-free/s/spotify/">spotify repository</a>, pay attention to architecture.</li>
<li>Convert deb -> rpm by running <code>sudo alien -r spotify*.deb</code>.</li>
<li>Install rpm <code>sudo zypper in spotify*.rpm</code>.</li>
<li>Run <code>spotify</code>.</li>
</ul>


<p>And it should work.
I noticed few warning about default locates and missing libraries, but client still works fine without any changes to system (symlinks, locales and etc).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconnect to NetworkManager VPN on systemd based system]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/26/autoconnect-to-networkmanager-vpn-on-systemd-based-system/"/>
    <updated>2014-05-26T21:17:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/26/autoconnect-to-networkmanager-vpn-on-systemd-based-system</id>
    <content type="html"><![CDATA[<p>Here is small post with instructions how to setup auto connect to VPN.
Of course you can probably figure out all this yourself, but what if you are lazy?</p>

<!-- more -->


<p>Following was tested on OpenSuse 13.1.</p>

<ul>
<li><p>First create new VPN connection in NetworkManager.</p></li>
<li><p>Create dispatcher file that will connect your VPN.</p></li>
</ul>


<figure class='code'><figcaption><span>/etc/NetworkManager/dispatcher.d/vpn-up</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>CONN=&quot;MY-CONNECTION-NAME&quot;
</span><span class='line'>
</span><span class='line'>nmcli con status id $CONN &gt; /dev/null
</span><span class='line'>
</span><span class='line'>rc=$?
</span><span class='line'>if [[ $rc != 0 ]] ; then
</span><span class='line'>    nmcli con up id $CONN
</span><span class='line'>    sleep 5 # optional wait time
</span><span class='line'>fi
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Make file executable <code>chmod +x /etc/NetworkManager/dispatcher.d/vpn-up</code></li>
<li>Make sure that dispatcher is running by running <code>journalctl -b -u NetworkManager</code> and looking for the line that looks like:</li>
</ul>


<figure class='code'><figcaption><span>journalctl -b -u NetworkManager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;warn&gt; Dispatcher failed: (32) Unit dbus-org.freedesktop.nm-dispatcher.service failed to load: No such file or directory.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If you see line about dispatcher service - enable it manually by running <code>systemctl enable NetworkManager-dispatcher.service</code>.</li>
<li>By default NetworkManager will store VPN password in keyring, to start VPN without keyring dependencies update VPN connection configuration with following changes:</li>
</ul>


<figure class='code'><figcaption><span>/etc/NetworkManager/system-connections/MY-CONNECTION-NAME</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>...
</span><span class='line'>[vpn]
</span><span class='line'>password-flags=0
</span><span class='line'>...
</span><span class='line'>[vpn-secrets]
</span><span class='line'>password=MY-VPN-PASSWORD
</span></code></pre></td></tr></table></div></figure>


<p>And now everything should work like a charm!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HN Tray icon in 50 lines of Clojure]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/24/hn-tray-icon-in-50-lines-of-clojure/"/>
    <updated>2014-05-24T22:03:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/24/hn-tray-icon-in-50-lines-of-clojure</id>
    <content type="html"><![CDATA[<p>Today I got a little bit bored and spend few hours poking around with java.awt in Clojure.
Result is tray app that shows stories from HN front page.
Just in ~50 lines of Clojure code.
Enjoy!</p>

<p><a href="https://github.com/Gonzih/hn-tray.clj">Github Project.</a></p>

<p>Source code is below:</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">hn.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">cheshire.core</span> <span class="ss">:as</span> <span class="nv">json</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure.java.browse</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">browse-url</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure.java.io</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">resource</span><span class="p">]])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">java.awt</span> <span class="nv">SystemTray</span> <span class="nv">TrayIcon</span> <span class="nv">PopupMenu</span> <span class="nv">MenuItem</span> <span class="nv">Toolkit</span><span class="p">]</span>
</span><span class='line'>           <span class="p">[</span><span class="nv">java.awt.event</span> <span class="nv">ActionListener</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">menu-item</span> <span class="p">[</span><span class="nv">label</span> <span class="nv">callback</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">menu</span> <span class="p">(</span><span class="nf">MenuItem.</span> <span class="nv">label</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">listener</span> <span class="p">(</span><span class="nb">proxy </span><span class="p">[</span><span class="nv">ActionListener</span><span class="p">]</span> <span class="p">[]</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">actionPerformed</span> <span class="p">[</span><span class="nv">event</span><span class="p">]</span> <span class="p">(</span><span class="nf">callback</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.addActionListener</span> <span class="nv">menu</span> <span class="nv">listener</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">menu</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">hn-api-url</span> <span class="s">&quot;http://api.ihackernews.com/page&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">hn-items</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">hn-api-url</span>
</span><span class='line'>      <span class="nv">slurp</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">json/parse-string</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">:items</span>
</span><span class='line'>      <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nb">sort-by </span><span class="ss">:points</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>      <span class="nv">reverse</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-hn-to-menu!</span> <span class="p">[</span><span class="nv">menu</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">mapfn</span> <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">title</span> <span class="nv">url</span> <span class="nv">commentCount</span> <span class="nv">points</span><span class="p">]}]</span>
</span><span class='line'>            <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">full-title</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;%-4s (%-4s) - %s&quot;</span> <span class="nv">points</span> <span class="nv">commentCount</span> <span class="nv">title</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">menu-item</span> <span class="p">(</span><span class="nf">menu-item</span> <span class="nv">full-title</span> <span class="o">#</span><span class="p">(</span><span class="nf">browse-url</span> <span class="nv">url</span><span class="p">))]</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">println </span><span class="nv">full-title</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">.add</span> <span class="nv">menu</span> <span class="nv">menu-item</span><span class="p">)))]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doall </span><span class="p">(</span><span class="nb">map </span><span class="nv">mapfn</span> <span class="p">(</span><span class="nf">hn-items</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">exit</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">shutdown-agents</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">System/exit</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">tray</span> <span class="p">(</span><span class="nf">SystemTray/getSystemTray</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">image</span> <span class="p">(</span><span class="nf">.getImage</span> <span class="p">(</span><span class="nf">Toolkit/getDefaultToolkit</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">resource</span> <span class="s">&quot;icon.png&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">icon</span> <span class="p">(</span><span class="nf">TrayIcon.</span> <span class="nv">image</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">exit</span> <span class="p">(</span><span class="nf">menu-item</span> <span class="s">&quot;Exit&quot;</span> <span class="nv">exit</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.setImageAutoSize</span> <span class="nv">icon</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.add</span> <span class="nv">tray</span> <span class="nv">icon</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">loop </span><span class="p">[]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">popup</span> <span class="p">(</span><span class="nf">PopupMenu.</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Updating items&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">add-hn-to-menu!</span> <span class="nv">popup</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">.add</span> <span class="nv">popup</span> <span class="nv">exit</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">.setPopupMenu</span> <span class="nv">icon</span> <span class="nv">popup</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="p">(</span><span class="nb">* </span><span class="mi">5</span> <span class="mi">60</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hardware Cut/Copy/Paste with Arduino Leonardo]]></title>
    <link href="http://blog.gonzih.me/blog/2014/03/04/hardware-cut-slash-copy-slash-paste-with-arduino-leonardo/"/>
    <updated>2014-03-04T10:02:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2014/03/04/hardware-cut-slash-copy-slash-paste-with-arduino-leonardo</id>
    <content type="html"><![CDATA[<p>Since I switched to Programmed Dvorak layout default keybindings for different operations started to annoy me sometimes.
I was thinking about hardware cut/copy/paste in apps even before that. But only with Dvorak I realized how useful it can be.
I always wondered why there is no hardware support for that on various keyboard that are out there. And then I saw <a href="http://keyboard.io">keyboard.io</a>.
Project is about hackable ergonomic mechanical keyboards build on top of Teensy/Arduino Micro boards. And I decided to play a little bit with that idea.
Lets start with implementing hardware cut/copy/paste using Leonardo and then lets see how far we can push the idea.</p>

<!-- more -->


<h2>Emulating keyboard on Leonardo.</h2>

<p>With release of first boards based on ATmega32u4 Keyboard and Mouse libraries were introduced in Arduino IDE.
Those libraries allow you to emulate fully functional mouse and keyboard from your Arduino board using USB connection. For more information take a look at the <a href="http://arduino.cc/en/Reference/MouseKeyboard">documentation</a>.</p>

<h2>Arduino wiring.</h2>

<p>Wiring will be very simple. We will have 3 buttons on pins 2, 3 and 4 with pull down resistors.</p>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/hardware-cut-copy-paste/schematics1.png" alt="schematics1" /></p>

<h2>Hardware Cut/Copy/Paste.</h2>

<p>So this will be our simplest solution to the my original idea. Here is Arduino sketch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// version 0.0.1</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">cutPin</span>   <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">copyPin</span>  <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">pastePin</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">cutPin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">copyPin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">pastePin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Keboard</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">cutpin</span><span class="p">)</span>   <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span> <span class="n">cut</span><span class="p">();</span>   <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">copypin</span><span class="p">)</span>  <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span> <span class="n">copy</span><span class="p">();</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">pastepin</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span> <span class="n">paste</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">pressCtrl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">press</span><span class="p">(</span><span class="n">KEY_LEFT_CTRL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">pressShift</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">press</span><span class="p">(</span><span class="n">KEY_LEFT_SHIFT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">cut</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pressCtrl</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sc">&#39;x&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">releaseAll</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">copy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pressCtrl</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sc">&#39;c&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">releaseAll</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">paste</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pressCtrl</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sc">&#39;v&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">releaseAll</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works! But&#8230; for example in my terminal I use Ctrl+Shift+C to copy selection.
Of course I can press Shift+Copy combination. But maybe there is a better solution.</p>

<h2>Automatic detection of key combination.</h2>

<p>Idea is simple. We have serial port open on Leonardo and our Linux PC.
When I&#8217;m pressing copy on Leonardo it will ask through serial port PC about required combination.
On PC there will be running ruby script that will detect currently focused window and look up at the configuration file for
keys combination. If there is no combination will be found or reply from script will be timed out we will use default combination.</p>

<h2>Detecting WM_CLASS from Ruby (2.0.0+).</h2>

<p>From my experience with Xmonad best method to detect unique window type is by WM_CLASS string from X properties.
Here is Window class for the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Window</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">current</span>
</span><span class='line'>    <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="sb">`xprop -root`</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@root_data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id</span>
</span><span class='line'>    <span class="n">matches</span> <span class="o">=</span> <span class="vi">@root_data</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/_NET_ACTIVE_WINDOW\(WINDOW\)/</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">matches</span>
</span><span class='line'>      <span class="n">match_data</span> <span class="o">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/_NET_ACTIVE_WINDOW\(WINDOW\):.*#\s(.*)\n/</span><span class="p">)</span>
</span><span class='line'>      <span class="n">match_data</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s1">&#39;No Window id was found&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">wm_class</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="sb">`xprop -id &#39;</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="sb">&#39;`</span>
</span><span class='line'>    <span class="n">matches</span> <span class="o">=</span> <span class="n">out</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/WM_CLASS\(STRING\)/</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">matches</span>
</span><span class='line'>      <span class="n">match_data</span> <span class="o">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/WM_CLASS\(STRING\)[^&quot;]*(&quot;.*&quot;)\n/</span><span class="p">)</span>
</span><span class='line'>      <span class="n">match_data</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&quot;/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s1">&#39;No Window class was found&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is_a?</span><span class="p">(</span><span class="n">class_string</span><span class="p">)</span>
</span><span class='line'>    <span class="n">wm_class</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span> <span class="o">==</span> <span class="n">class_string</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Window</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">wm_class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;gvim&quot;</span><span class="p">,</span> <span class="s2">&quot;Gvim&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Window</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="s2">&quot;gvim&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Keys configuration.</h2>

<p>For now lets implement simplest class for that and store all configuration in constant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Keys</span>
</span><span class='line'>  <span class="no">CONFIG</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;terminology&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;copy&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-c&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;cut&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-c&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;paste&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-v&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">[]</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="no">CONFIG</span><span class="o">[</span><span class="n">key</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">for</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
</span><span class='line'>    <span class="n">window</span><span class="o">.</span><span class="n">wm_class</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span>
</span><span class='line'>      <span class="no">CONFIG</span><span class="o">[</span><span class="n">k</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">compact</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Keys</span><span class="o">[</span><span class="s1">&#39;terminology&#39;</span><span class="o">][</span><span class="s1">&#39;copy&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-c&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When current window is terminology</span>
</span><span class='line'><span class="no">Keys</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="no">Window</span><span class="o">.</span><span class="n">current</span><span class="p">)</span><span class="o">[</span><span class="s1">&#39;copy&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-c&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Communicating with Arduino via SerialPort.</h2>

<p>Code below uses sketch described above with redefined copy/paste/cut functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">String</span> <span class="n">stringIn</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Let&#39;s assume than combination aren&#39;t longer than 4 keys</span>
</span><span class='line'><span class="n">String</span> <span class="n">collectedStrings</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">counter</span><span class="p">,</span> <span class="n">inByte</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stringIn</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">cut</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;cut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">copy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;copy&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">paste</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;paste&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">resetReader</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">stringIn</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">collectedStrings</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">readLine</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">Serial</span><span class="p">.</span><span class="n">available</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">inByte</span> <span class="o">=</span> <span class="n">Serial</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
</span><span class='line'>    <span class="n">stringIn</span> <span class="o">+=</span> <span class="n">inByte</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">inByte</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">){</span>  <span class="c1">// Handle delimiter</span>
</span><span class='line'>      <span class="n">collectedStrings</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="n">stringIn</span><span class="p">);</span>
</span><span class='line'>      <span class="n">stringIn</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">inByte</span> <span class="o">==</span>  <span class="sc">&#39;\r&#39;</span><span class="p">){</span>  <span class="c1">// end of line</span>
</span><span class='line'>      <span class="n">resetReader</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">executeCombination</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pressKey</span><span class="p">(</span><span class="n">collectedstrings</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">releaseAll</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">pressKeys</span><span class="p">(</span><span class="n">String</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s">&quot;ctrl&quot;</span><span class="o">:</span>
</span><span class='line'>      <span class="n">pressCtrl</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s">&quot;shift&quot;</span><span class="o">:</span>
</span><span class='line'>      <span class="n">pressShift</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="kt">char</span><span class="p">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">key</span><span class="p">.</span><span class="n">toCharArray</span><span class="p">();</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">k</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="n">Keyboard</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>More information on ruby-serialport is <a href="http://ruby-serialport.rubyforge.org/">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;serialport&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Connection</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">port</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">port</span>
</span><span class='line'>      <span class="n">port</span> <span class="o">=</span> <span class="sb">`ls /dev/ttyACM*`</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@connection</span> <span class="o">=</span> <span class="no">SerialPort</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="mi">9600</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">loop</span>
</span><span class='line'>    <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="n">action</span> <span class="o">=</span> <span class="vi">@connection</span><span class="o">.</span><span class="n">readline</span>
</span><span class='line'>        <span class="vi">@connection</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Keys</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="no">Window</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">wm_class</span><span class="p">)</span><span class="o">[</span><span class="n">action</span><span class="o">]</span><span class="si">}</span><span class="se">\r</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>        <span class="nb">p</span> <span class="n">e</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">loop</span> <span class="c1"># starts infinite loop</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>PS.</strong> This post is more like collection of theoretical pices of code.
I have no time (and probably enthusiasm) to put all this together (at least right now).
So this implementation can be broken and inaccurate in many ways.
Feel free to point out any errors and mistakes and I will fix them.</p>

<!--
vim: ts=2:sts=2:sw=2:expandtab
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VisualRuby gem on OpenSUSE 13.1]]></title>
    <link href="http://blog.gonzih.me/blog/2013/12/13/visualruby-gem-on-opensuse-13-dot-1/"/>
    <updated>2013-12-13T10:10:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/12/13/visualruby-gem-on-opensuse-13-dot-1</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/visualruby/1.png" alt="visualruby" /></p>

<p>I found out about ruby gem called <a href="http://visualruby.net/">visualruby</a> and decided to give it a try. Unfortunately it has a lot of dependencies that were missing on my system.
So to save my (or maybe your&#8217;s if you are reading this now) time in the future here are required dependencies for OpenSUSE 13.1.
I bet you can figure out similar packages for different distribution.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo zypper -n in <span class="se">\</span>
</span><span class='line'>glib2 glib2-branding-openSUSE glib2-devel <span class="se">\</span>
</span><span class='line'>atk-devel cairo-devel pango-devel gdk-pixbuf-devel <span class="se">\</span>
</span><span class='line'>gtk2-devel gtksourceview2-devel glade
</span></code></pre></td></tr></table></div></figure>


<p>Adjust glade command in settings to glade from glade-gtk2. And now you can run it! :)
It&#8217;s not working very well (at least in examples) since most of stuff in suse 13.1 is based on gtk3+.
But I&#8217;m still in process of figuring things out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yin-Yang Call/cc puzzle in Ruby]]></title>
    <link href="http://blog.gonzih.me/blog/2013/11/26/yin-yang-callcc-puzzle-in-ruby/"/>
    <updated>2013-11-26T11:23:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/11/26/yin-yang-callcc-puzzle-in-ruby</id>
    <content type="html"><![CDATA[<p>Digging deeper in to the call/cc land I found interesting puzzle called yin-yang.</p>

<p>Here is Scheme implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">yin</span>
</span><span class='line'>        <span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="o">#</span><span class="err">\</span><span class="nv">@</span><span class="p">)</span> <span class="nv">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">call-with-current-continuation </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span> <span class="nv">c</span><span class="p">))))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">yang</span>
</span><span class='line'>        <span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="o">#</span><span class="err">\</span><span class="nv">*</span><span class="p">)</span> <span class="nv">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">call-with-current-continuation </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span> <span class="nv">c</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">yin</span> <span class="nv">yang</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will print <code>@*@**@***@****@*****@******@...</code> forever.</p>

<!-- more -->


<p><a href="http://yinwang0.wordpress.com/2012/07/27/yin-yang-puzzle/">Here</a> you can find good explanation,
also few of explanations can be found on <a href="http://stackoverflow.com/questions/2694679/how-does-the-yin-yang-puzzle-work">StackOverflow</a>.</p>

<p>After I understand how it works I got all that excited and implemented given puzzle in ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;continuation&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">yin</span>  <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span> <span class="p">{</span> <span class="nb">print</span> <span class="s2">&quot;@&quot;</span><span class="p">;</span> <span class="n">cc</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">callcc</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="p">})</span>
</span><span class='line'><span class="n">yang</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span> <span class="p">{</span> <span class="nb">print</span> <span class="s2">&quot;*&quot;</span><span class="p">;</span> <span class="n">cc</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">callcc</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">yin</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">yang</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it doesn&#8217;t work. It prints <code>@*@*********...</code> forever.</p>

<p>No idea why. Maybe there are some limitations of <a href="http://www.ruby-doc.org/core-2.0.0/Continuation.html">ruby&#8217;s call/cc</a>.
I will research further, but if you have any information about that feel free to comment or email me.</p>

<p>Cheers!</p>

<p><strong>UPDATE</strong> Abinoam Praxedes Marques Junio <a href="https://www.ruby-forum.com/topic/4418860#1129811">figured</a> out that let (which is basically lambda application underneath) is crucial here.
So here is his fixed version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;continuation&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">yin</span><span class="p">,</span> <span class="n">yang</span><span class="o">|</span>
</span><span class='line'>  <span class="n">yin</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">yang</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">cc</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;@&quot;</span><span class="p">;</span> <span class="n">cc</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">callcc</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="p">}),</span>
</span><span class='line'>         <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">cc</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;*&quot;</span><span class="p">;</span> <span class="n">cc</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">callcc</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSUSE 13.1 + Mate 1.6 + Xmonad]]></title>
    <link href="http://blog.gonzih.me/blog/2013/11/21/opensuse-13-dot-1-plus-mate-1-dot-6-plus-xmonad/"/>
    <updated>2013-11-21T22:46:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/11/21/opensuse-13-dot-1-plus-mate-1-dot-6-plus-xmonad</id>
    <content type="html"><![CDATA[<p>So OpenSUSE 13.1 was released. And it&#8217;s great. But&#8230;
Since gnome 3.9 support for custom window managers was broken.
How to restore sanity to your desktop? Mate it! Here is quick how to.</p>

<p><a href="https://dl.dropbox.com/u/4109351/octopress/suse-mate-xmonad/1.png"><img src="https://dl.dropbox.com/u/4109351/octopress/suse-mate-xmonad/re_1.png" alt="preview" /></a></p>

<!-- more -->


<p>Patterns for installing mate in OpenSUSE can be found here <a href="http://en.opensuse.org/Portal:MATE">http://en.opensuse.org/Portal:MATE</a></p>

<p>Xmonad can be installed using cabal install or using packages from OBS.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo zypper -n in xorg-x11-devel
</span><span class='line'>
</span><span class='line'>cabal install xmonad         --flags<span class="o">=</span><span class="s2">&quot;with_utf8 with_xft&quot;</span>
</span><span class='line'>cabal install xmonad-contrib --flags<span class="o">=</span><span class="s2">&quot;with_utf8 with_xft&quot;</span>
</span><span class='line'>cabal install xmobar         --flags<span class="o">=</span><span class="s2">&quot;with_utf8 with_xft&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create following file:</p>

<figure class='code'><figcaption><span>/usr/share/applications/xmonad.desktop</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[Desktop Entry]
</span><span class='line'>Type=Application
</span><span class='line'>Name=Xmonad
</span><span class='line'># Replace it with your xmonad launcher
</span><span class='line'>Exec=xmonad
</span><span class='line'>NoDisplay=true
</span><span class='line'>Terminal=false
</span><span class='line'>StartupNotify=false
</span><span class='line'>Categories=
</span></code></pre></td></tr></table></div></figure>


<p>Set xmonad as window manager for Mate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Mate 1.4</span>
</span><span class='line'>mateconftool-2 -s /desktop/mate/session/required_components/windowmanager xmonad --type string
</span><span class='line'>
</span><span class='line'><span class="c"># Mate 1.6</span>
</span><span class='line'>gsettings <span class="nb">set </span>org.mate.session.required-components windowmanager xmonad
</span></code></pre></td></tr></table></div></figure>


<p>If you have Gnome 3 installed make sure that gnome-settings daemon is not running in mate (can cause gsettings error).</p>

<p>Enjoy!</p>

<p>By the way I have some weird issues with gnome 3 apps rendering, no idea how to fix this for now.
Also <code>caja -n</code> which is responsible for displaying icons on desktop loves to hide my xmobar.
You can kill caja and mate will restore it (temporary fix).</p>

<p>If you have any tips feel free to comment!</p>

<p><strong>UPDATE 0</strong> issues with rendering was caused by <code>setWMName "LG3D"</code> in <code>startupHook</code>.
Removed it for now (probably will cause issues with some Java(AWT) applications).</p>

<p><strong>UPDATE 1</strong> If you want to disable desktop add following file:</p>

<figure class='code'><figcaption><span>/usr/share/applications/caja-no-desktop.desktop</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[Desktop Entry]
</span><span class='line'>Name=Caja
</span><span class='line'>Exec=caja -n --no-desktop
</span><span class='line'>Icon=system-file-manager
</span><span class='line'>Terminal=false
</span><span class='line'>Type=Application
</span><span class='line'>StartupNotify=true
</span><span class='line'>NoDisplay=true
</span><span class='line'>OnlyShowIn=MATE;
</span><span class='line'>X-MATE-Bugzilla-Bugzilla=MATE
</span><span class='line'>X-MATE-Bugzilla-Product=caja
</span><span class='line'>X-MATE-Bugzilla-Component=general
</span><span class='line'>X-MATE-Bugzilla-Version=1.6.2
</span><span class='line'>X-MATE-Autostart-Phase=Desktop
</span><span class='line'>X-MATE-Autostart-Notify=true
</span><span class='line'>X-MATE-AutoRestart=true
</span><span class='line'>X-MATE-Provides=filemanager
</span></code></pre></td></tr></table></div></figure>


<p>And now set it as default file manager for mate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Mate 1.6</span>
</span><span class='line'>gsettings <span class="nb">set </span>org.mate.session.required-components filemanager <span class="s2">&quot;caja-no-desktop&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also you can store all <code>*.desktop</code> files in <code>$HOME/.local/share/applications</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first experience with core.typed]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/30/my-first-experience-with-core-dot-typed/"/>
    <updated>2013-08-30T12:30:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/30/my-first-experience-with-core-dot-typed</id>
    <content type="html"><![CDATA[<p>Today I started improving my feeds2imap.clj project with core.typed.
And already hit few issues, so this post is something like collection of tips how to solve issues with core.typed based on my experience.
I couldn&#8217;t find answers on my issues in wiki or documentation.
But I got answers annoying Ambrose Bonnaire-Sergeant on Google+.
Thank you for your patience, man!
And keep doing what you are doing, core.typed is just amazing thing!</p>

<!--more-->


<h3>Unresolved constructor invocation</h3>

<p>Core.typed can&#8217;t match constructor based on arguments type,
you should provide type hints to help core.typed with that.</p>

<h3>By default core.typed assumes that all java methods can return nil</h3>

<p>Use <code>(non-nil-return ClassOrObject/methodName :all)</code> to tell core.typed that method won&#8217;t return nil.
Core.typed will trust you and will skip further checks.</p>

<p>Or for example if you are expecting String as a result you can convert result to String with str before returning it.</p>

<h3>non-nil-return in core.typed works only on methods</h3>

<p>And if you have static method then something like that would not work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">non-nil-return</span> <span class="nv">javax.mail.Message$RecipientType/TO</span> <span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ann</span> <span class="nv">recipient-type-to</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="nv">Message$RecipientType</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="nv">Message$RecipientType</span> <span class="nv">recipient-type-to</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Message$RecipientType/TO</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">comment</span>
</span><span class='line'>  <span class="nv">Type</span> <span class="nv">mismatch</span><span class="err">:</span>
</span><span class='line'>  <span class="nv">Expected</span><span class="err">:</span>       <span class="p">(</span><span class="nf">Fn</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="nv">Message$RecipientType</span><span class="p">])</span>
</span><span class='line'>  <span class="nv">Actual</span><span class="err">:</span>         <span class="p">(</span><span class="nf">Fn</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">U</span> <span class="nv">Message$RecipientType</span> <span class="nv">nil</span><span class="p">)]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">non-nil-return</span> <span class="nv">javax.mail.Message$RecipientType/TO</span> <span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ann</span> <span class="nv">recipient-type-to</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="nv">Message$RecipientType</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="nv">Message$RecipientType</span> <span class="nv">recipient-type-to</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:post</span> <span class="p">[</span><span class="nv">%</span><span class="p">]}</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Message$RecipientType/TO</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is the same as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">non-nil-return</span> <span class="nv">javax.mail.Message$RecipientType/TO</span> <span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ann</span> <span class="nv">recipient-type-to</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="nv">Message$RecipientType</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="nv">Message$RecipientType</span> <span class="nv">recipient-type-to</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">temp</span> <span class="p">(</span><span class="nf">Message$RecipientType/TO</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">assert </span><span class="nv">temp</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">temp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So unless assert evaluates temp to logical true exception will be raised
and function will always return non nil value, which makes core.typed happy.</p>

<h3>Defining Parameterized alias type</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">def-alias</span> <span class="nv">Folder</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">TFn</span> <span class="p">[[</span><span class="nv">x</span> <span class="ss">:variance</span> <span class="ss">:covariant</span><span class="p">]]</span> <span class="p">(</span><span class="nf">Map</span> <span class="nv">Keyword</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">comment</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Folder</span> <span class="nv">Items</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Folder</span> <span class="nv">Urls</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/Gonzih/feeds2imap.clj/commit/1c41d814bdb054d57e644013c85275ec9a45a114">Here is</a> commit with changes related to core.typed.
I must say writing type annotations for code that you wrote few months ago is tricky.
But still I enjoyed process and results and I&#8217;m still a little bit amazed about all core.typed thing.
Power of lisp combined with really smart people :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheap standing desk]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/25/cheap-standing-desk/"/>
    <updated>2013-08-25T12:16:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/25/cheap-standing-desk</id>
    <content type="html"><![CDATA[<p>I love idea of standing desks.
I feel myself much more productive behind standing desk.
But commercial desks suffer from high price and complicated design.</p>

<p>Solution? Build your own standing desk!</p>

<!--more-->


<p>I started using standing desk by making small stand on top of my ordinary desk, so I can remove it when I&#8217;m to lazy to stand. It was one year ago.
After a while with that solution I decided to build my proper standing desk.
But how and what to use as materials? Plain wood is too heavy, expensive and build will take more time (if you want a nice looking desk).
And then I saw joints and pipes used in furniture.
I took unused small door from my desk, some metal pipes (25mm in diameter) and joints.
And best thing is that height is adjustable.
You can build it with 2 shelfs and make bottom one wider for keyboard and mouse and put display on the top shelf.
Easy to put together and take apart. Nice looking.
Cheap. Total cost of materials was ~35$.
For nice and clean cuts some old pipe cutter is perfect.</p>

<h2>Photos</h2>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/1.jpeg" alt="Standing Desk #1" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/2.jpeg" alt="Standing Desk #2" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/3.jpeg" alt="Standing Desk #3" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/4.jpeg" alt="Standing Desk #4" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed/Ping test graphs with Clojure and Raspberry Pi]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi/"/>
    <updated>2013-08-24T14:02:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I&#8217;m often complaining about my ISP quality.
Sometimes pings are high, sometimes download speed goes down.
So I decided to make sure it&#8217;s my ISP fault and not just my opinion based on my hate to them.</p>

<p>How to do so? Let&#8217;s collect data about download speed and pings over time, and show some graphs based on that data.</p>

<!-- more -->


<p>I have unused Raspberry Pi right now, so it will be used to collect data.</p>

<h2>Speedtest data</h2>

<p>For speedtest I will be using python script that uses speedtest.net servers.
Pi is running Pidora right now, so let&#8217;s install script dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum -y install python-argparse python-lxml
</span></code></pre></td></tr></table></div></figure>


<p>Script is hosted on <a href="https://github.com/Janhouse/tespeed">github</a>.
Let&#8217;s get the script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir ~/scripts
</span><span class='line'>wget https://raw.github.com/Janhouse/tespeed/master/tespeed.py -O ~/scripts/speedtest.py
</span></code></pre></td></tr></table></div></figure>


<p>You can test script running it with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>python ~/scripts/speedtest.py
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s wrap python script into additional shell script to store time of data collection in csv.
I&#8217;m not sure if I need time for now, but let&#8217;s keep it anyway.
We will silence stderr from the script and output results as csv.</p>

<figure class='code'><figcaption><span>~/bin/speedtest.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/zsh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;\&quot;$(date -R)\&quot;,$(python ~/scripts/tespeed.py --csv -s)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s put script into crontab to run every 5 minutes, also let&#8217;s redirect stderr to /dev/null in case of Ethernet unavailability or some other issues.</p>

<figure class='code'><figcaption><span>crontab</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*/5 * * * * ~/bin/speedtest.zsh 2&gt;/dev/null &gt;&gt; ~/.speedtest.csv
</span></code></pre></td></tr></table></div></figure>


<h2>Ping data</h2>

<p>For ping data we will be running <code>ping</code> command with 100 packets (<code>ping -c 100</code>) with google dns as target (8.8.8.8) and storing avg value with time to csv file.</p>

<figure class='code'><figcaption><span>~/bin/pingtest.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/zsh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">AVG</span><span class="o">=</span><span class="k">$(</span>ping -c 100 8.8.8.8 | grep rtt | sed -r <span class="s1">&#39;s#.*\=\s.+/(.+)/.+/.+#\1#&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;\&quot;$(date -R)\&quot;,$AVG&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>crontab</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*/5 * * * * ~/bin/pingtest.zsh 2&gt;/dev/null &gt;&gt; ~/.pingtest.csv
</span></code></pre></td></tr></table></div></figure>


<h2>Graphs</h2>

<p>For data visualization let&#8217;s use Clojure with Incanter. Here is clojure code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">incanter-graphs.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">incanter.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">incanter.stats</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">incanter.charts</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure-csv.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">to-f</span> <span class="p">[</span><span class="nv">is</span><span class="p">]</span> <span class="p">(</span><span class="nf">Float/parseFloat</span> <span class="nv">is</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-f-col</span> <span class="p">[</span><span class="nv">data</span> <span class="nv">col</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="nv">to-f</span> <span class="p">(</span><span class="nf">sel</span> <span class="nv">data</span> <span class="ss">:cols</span> <span class="nv">col</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">init-chart</span> <span class="p">[</span><span class="nv">data</span> <span class="nv">rng</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">x-label</span> <span class="nv">y-label</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">line-chart</span> <span class="nv">rng</span> <span class="nv">data</span> <span class="ss">:x-label</span> <span class="nv">x-label</span>
</span><span class='line'>                       <span class="ss">:y-label</span> <span class="nv">y-label</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-to-chart</span> <span class="p">[</span><span class="nv">chart</span> <span class="nv">data</span> <span class="nv">rng</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nf">add-categories</span> <span class="nv">%1</span> <span class="nv">rng</span> <span class="nv">%2</span><span class="p">)</span> <span class="nv">chart</span> <span class="nv">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">draw-file</span> <span class="p">[</span><span class="nv">filename</span> <span class="nv">cols</span> <span class="o">&amp;</span> <span class="p">{</span><span class="ss">:as</span> <span class="nv">opts</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">data</span> <span class="p">(</span><span class="nb">slurp </span><span class="nv">filename</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">csv</span> <span class="p">(</span><span class="nf">parse-csv</span> <span class="nv">data</span> <span class="ss">:delimiter</span> <span class="sc">\,</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">rng</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="p">(</span><span class="nb">count </span><span class="nv">csv</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nb">partial </span><span class="nv">get-f-col</span> <span class="nv">csv</span><span class="p">)</span> <span class="nv">cols</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">chart</span> <span class="p">(</span><span class="nf">init-chart</span> <span class="p">(</span><span class="nb">first </span><span class="nv">data</span><span class="p">)</span> <span class="nv">rng</span> <span class="nv">opts</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">chart-to-show</span> <span class="p">(</span><span class="nf">add-to-chart</span> <span class="nv">chart</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">data</span><span class="p">)</span> <span class="nv">rng</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">view</span> <span class="nv">chart-to-show</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="nv">speedfile</span> <span class="nv">pingfile</span> <span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">draw-file</span> <span class="nv">speedfile</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]</span> <span class="ss">:x-label</span> <span class="s">&quot;Time&quot;</span> <span class="ss">:y-label</span> <span class="s">&quot;Speed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">draw-file</span> <span class="nv">pingfile</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ss">:x-label</span> <span class="s">&quot;Time&quot;</span> <span class="ss">:y-label</span> <span class="s">&quot;Ping time&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s put all launch process to Makefile:</p>

<figure class='code'><figcaption><span>Makefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nf">default</span><span class="o">:</span>
</span><span class='line'>  scp raspberry-pi.local:.speedtest.csv /tmp/
</span><span class='line'>  scp raspberry-pi.local:.pingtest.csv /tmp/
</span><span class='line'><span class="c">  #Remove lines with only time (script failure)</span>
</span><span class='line'>  grep <span class="s2">&quot;[^,]$$&quot;</span> /tmp/.speedtest.csv &gt; /tmp/.speedtest-fixed.csv
</span><span class='line'>  grep <span class="s2">&quot;[^,]$$&quot;</span> /tmp/.pingtest.csv &gt; /tmp/.pingtest-fixed.csv
</span><span class='line'>  lein run /tmp/.speedtest-fixed.csv /tmp/.pingtest-fixed.csv
</span></code></pre></td></tr></table></div></figure>


<p>I adjusted my router, so QoS daemon will give maximum priority to traffic from my Raspberry Pi, so data will be cleaner.
And now we can see some visualization.</p>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/ping-speed-graphs/speed.png" alt="Speed Graph" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/ping-speed-graphs/ping.png" alt="Ping Graph" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSS/Atom reader in Clojure via IMAP]]></title>
    <link href="http://blog.gonzih.me/blog/2013/06/28/rss-slash-atom-reader-in-clojure-via-imap/"/>
    <updated>2013-06-28T10:15:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/06/28/rss-slash-atom-reader-in-clojure-via-imap</id>
    <content type="html"><![CDATA[<h3>Motivation</h3>

<p>Google Reader was shut down and I started looking for alternatives.
And sadly I did not found anything close to Google Reader experience.
There are plenty good alternatives, but all of them suffer from some kind of background noise (social based features, weird hotkeys, weird ui, unusable mobile clients and etc.).
All I wanted was simple to use news reader.</p>

<!-- more -->


<h3>Idea</h3>

<p>Then I found post in the Racket community about storing your feeds in the IMAP folders using &#8220;APPEND&#8221; command by <a href="http://www.greghendershott.com/2013/05/feeds2gmail.html">Greg Hendershott</a>.
That was it. Simplest possible solution, that I can run on small device or server by cron. I played a little bit with Racket source code and decided to write my own version to do the job.</p>

<h3>Clojure version</h3>

<p>First I implemented my <a href="https://github.com/Gonzih/feeds2imap.rb">prototype in Ruby</a> in few hours. I picked up Ruby because of built-in rss/atom and imap libraries.
I used it for few days and liked it. Simple, reliable solution.
So then I decided to rewrite it in Clojure.
Why Clojure?
Because it&#8217;s pure fun to use.
I decided to use java.mail framework for message storing and folder manipulations, feedparser-clj to fetch and parse rss/atom feeds and hiccup for templating.
I was really pleased with feedparser-clj in comparison with Ruby built-in library.
java.mail framework was not so bad as I was expecting at first.</p>

<h3>How it works?</h3>

<p>Here is project logic:</p>

<ul>
<li>Fetch folders and urls from feeds file.</li>
<li>Fetch and parse RSS/Atom data from urls.</li>
<li>Select only new items using cache file.</li>
<li>Create required imap folders.</li>
<li>Store new items as email messages.</li>
<li>Mark items as read (put md5 hashes in to the clj file with set of old hashes).</li>
</ul>


<p>It&#8217;s running now by cron (every hour) on my BeagleBone (using latest ejre version).</p>

<p>Source code is hosted on github <a href="https://github.com/Gonzih/feeds2imap.clj">here</a>. Take a look at project README for usage.</p>

<h3>More implementations</h3>

<ul>
<li><a href="https://github.com/Gonzih/feeds2imap.rb">My Ruby prototype</a></li>
<li><a href="https://github.com/Gonzih/feeds2imap.clj">My Clojure implementation</a></li>
<li><a href="https://github.com/greghendershott/feeds2gmail">Racket implementation</a></li>
<li><a href="https://github.com/cordawyn/rss2imap">Haskell implementation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick LXC configuration with netctl nat]]></title>
    <link href="http://blog.gonzih.me/blog/2013/04/16/fast-lxc-configuration-on-laptop-with-netctl-nat/"/>
    <updated>2013-04-16T07:42:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/04/16/fast-lxc-configuration-on-laptop-with-netctl-nat</id>
    <content type="html"><![CDATA[<p>So I spend few hours playing with Linux Containers. Pretty interesting stuff. So here is small tutorial on how to create and use container on Arch Linux as host machine.</p>

<!--more-->


<p>Install <code>lxc</code> first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo pacman -S lxc
</span></code></pre></td></tr></table></div></figure>


<p>Next is bridge device for nat. I&#8217;m already migrated to netctl in arch linux so my configuration is for netctl.</p>

<figure class='code'><figcaption><span>/etc/netctl/lxcbridge</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">&quot;LXC Bridge connection&quot;</span>
</span><span class='line'><span class="na">Interface</span><span class="o">=</span><span class="s">lxcbr0</span>
</span><span class='line'><span class="na">Connection</span><span class="o">=</span><span class="s">bridge</span>
</span><span class='line'><span class="na">BindsToInterfaces</span><span class="o">=</span><span class="s">()</span>
</span><span class='line'><span class="na">IP</span><span class="o">=</span><span class="s">static</span>
</span><span class='line'><span class="na">Address</span><span class="o">=</span><span class="s">192.168.100.1/24</span>
</span><span class='line'><span class="na">FwdDelay</span><span class="o">=</span><span class="s">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you have <code>dnsmasq</code> installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pacman -S dnsmasq
</span></code></pre></td></tr></table></div></figure>


<p>Run interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo netctl start lxcbridge
</span></code></pre></td></tr></table></div></figure>


<p>And enable it for startup</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo netctl <span class="nb">enable </span>lxcbridge
</span></code></pre></td></tr></table></div></figure>


<p>Add iptables rule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo iptables -t nat -A POSTROUTING -o &lt;you-main-ethernet-device-here&gt; -j MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<p>Save iptables (as superuser):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>iptables-save &gt; /etc/iptables/iptables.rules
</span></code></pre></td></tr></table></div></figure>


<p>Enable ip_forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo sysctl net.ipv4.ip_forward<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>Or to save forwarding persisent add following line:</p>

<figure class='code'><figcaption><span>/etc/sysctl.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>net.ipv4.ip_forward=1
</span></code></pre></td></tr></table></div></figure>


<p>Create new Ubuntu container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-create -n playtime -t ubuntu
</span></code></pre></td></tr></table></div></figure>


<p>It will create new root filesystem with new configuration. Lets now change conatiner&#8217;s configuration:</p>

<figure class='code'><figcaption><span>/var/lib/lxc/playtime/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">lxc.network.type</span> <span class="o">=</span> <span class="s">veth</span>
</span><span class='line'><span class="na">lxc.network.flags</span> <span class="o">=</span> <span class="s">up</span>
</span><span class='line'><span class="na">lxc.network.link</span> <span class="o">=</span> <span class="s">lxcbr0</span>
</span><span class='line'><span class="na">lxc.network.hwaddr</span> <span class="o">=</span> <span class="s">00:FF:AA:00:00:01</span>
</span><span class='line'><span class="na">lxc.network.ipv4</span> <span class="o">=</span> <span class="s">192.168.100.10/24</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets boot our conatiner. Better use screen or tmux for it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-start -n playtime
</span></code></pre></td></tr></table></div></figure>


<p>Default user and password for ubuntu template is <code>ubuntu</code>.</p>

<p>Login to container and add default gateway configuration on network up:</p>

<figure class='code'><figcaption><span>/etc/network/if-up.d/routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'>
</span><span class='line'>route add default gw 192.168.100.1
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>Reboot container with <code>sudo reboot</code> in it.</p>

<p>Now you can ssh to your container <code>ssh ubuntu@192.168.100.10</code>.
You can also run container as daemon <code>sudo lxc-start -n playtime -d</code>.
And you can shutdown container with <code>sudo shutdown</code> inside container.</p>

<p>Thanks for reading. Let me know if I miss something or you know better way of configuring all this stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure on Raspberry Pi: OpenJDK vs Oracle JRE (Java 8 armhf beta) benchmark]]></title>
    <link href="http://blog.gonzih.me/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8/"/>
    <updated>2013-04-14T12:00:00+02:00</updated>
    <id>http://blog.gonzih.me/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8</id>
    <content type="html"><![CDATA[<p><a href="http://jdk8.java.net/fxarmpreview/">Here</a> you can download latest Java 8 preview for armhf. Lets benchmark it on Raspberry Pi!</p>

<!-- more -->


<p>Pi is running Raspbian.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cat /etc/*-release
</span><span class='line'>PRETTY_NAME="Debian GNU/Linux 7.0 (wheezy)"
</span><span class='line'>NAME="Debian GNU/Linux"
</span><span class='line'>VERSION_ID="7.0"
</span><span class='line'>VERSION="7.0 (wheezy)"</span></code></pre></td></tr></table></div></figure>


<p>Pi CPU is running on 700Mhz.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cpufreq-info | grep 'current CPU'
</span><span class='line'>current CPU frequency is 700 MHz.</span></code></pre></td></tr></table></div></figure>


<p>Clojure version is 1.5.1.</p>

<p>Benchmark code is from <a href="http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/">nakkaya&#8217;s post</a>, also used for my BeagleBone Clojure/ClojureScript benchmarks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">benchmark.core</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce * </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span><span class="nv">N</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">x</span><span class="p">))))</span>
</span><span class='line'><span class="c1">;                   ^ integerOverflow fix</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sort-seq</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">repeat </span><span class="mi">100000</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">2000000</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">time-it</span> <span class="p">[</span><span class="nv">fn</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">values</span>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">200</span><span class="p">)]</span> <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">fn</span><span class="p">))))</span>
</span><span class='line'>        <span class="nv">doubles</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">Double.</span> <span class="p">(</span><span class="nb">nth </span><span class="p">(</span><span class="nf">.split</span> <span class="nv">%</span> <span class="s">&quot; &quot;</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span> <span class="nv">values</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">apply + </span><span class="nv">doubles</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">doubles</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(factorial 5000) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(fib 20) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(sort-seq) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">sort-seq</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time I was a little bit smarter to run all code with <code>lein trampoline run</code> to eliminate overhead.</p>

<p>Numbers:</p>

<p>OpenJDK:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">&gt; </span><span class="nv">sudo</span> <span class="nv">apt-get</span> <span class="nv">install</span> <span class="nv">openjdk-7-jre-headless</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">java</span> <span class="nv">-version</span>
</span><span class='line'><span class="nv">java</span> <span class="nv">version</span> <span class="s">&quot;1.7.0_07&quot;</span>
</span><span class='line'><span class="nv">OpenJDK</span> <span class="nv">Runtime</span> <span class="nv">Environment</span> <span class="p">(</span><span class="nf">IcedTea7</span> <span class="mf">2.3</span><span class="nv">.2</span><span class="p">)</span> <span class="p">(</span><span class="mi">7</span><span class="nv">u7-2.3.2a-1+rpi1</span><span class="p">)</span>
</span><span class='line'><span class="nv">OpenJDK</span> <span class="nv">Zero</span> <span class="nv">VM</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">22.0</span><span class="nv">-b10</span>, <span class="nv">mixed</span> <span class="nv">mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span>
</span><span class='line'><span class="mf">90.5</span> <span class="mf">15.7</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span> <span class="mf">5956.007845080006</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span> <span class="mf">713.6807171</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span> <span class="mf">9633.873322030007</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oracle JRE:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">&gt; </span><span class="nv">java</span> <span class="nv">-version</span>
</span><span class='line'><span class="nv">java</span> <span class="nv">version</span> <span class="s">&quot;1.8.0-ea&quot;</span>
</span><span class='line'><span class="nv">Java</span><span class="p">(</span><span class="nf">TM</span><span class="p">)</span> <span class="nv">SE</span> <span class="nv">Runtime</span> <span class="nv">Environment</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">1.8</span><span class="nv">.0-ea-b36e</span><span class="p">)</span>
</span><span class='line'><span class="nv">Java</span> <span class="nv">HotSpot</span><span class="p">(</span><span class="nf">TM</span><span class="p">)</span> <span class="nv">Client</span> <span class="nv">VM</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">25.0</span><span class="nv">-b04</span>, <span class="nv">mixed</span> <span class="nv">mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span>
</span><span class='line'><span class="mf">87.9</span> <span class="mf">18.9</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span> <span class="mf">685.5312071299996</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span> <span class="mf">29.505588125000017</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span> <span class="mf">1137.3281607850001</span>
</span></code></pre></td></tr></table></div></figure>


<p>Startup time for &#8220;Hello, World!&#8221;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">#</span> <span class="nv">OpenJDK</span>
</span><span class='line'><span class="nb">&gt; time </span><span class="nv">lein</span> <span class="nv">run</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">World!</span>
</span><span class='line'><span class="nv">lein</span> <span class="nv">run</span>  <span class="mf">56.51</span><span class="nv">s</span> <span class="nv">user</span> <span class="mf">1.58</span><span class="nv">s</span> <span class="nv">system</span> <span class="mi">87</span><span class="nv">%</span> <span class="nv">cpu</span> <span class="mi">1</span><span class="ss">:06.16</span> <span class="nv">total</span>
</span><span class='line'><span class="nb">&gt; time </span><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">World!</span>
</span><span class='line'><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>  <span class="mf">57.73</span><span class="nv">s</span> <span class="nv">user</span> <span class="mf">0.96</span><span class="nv">s</span> <span class="nv">system</span> <span class="mi">96</span><span class="nv">%</span> <span class="nv">cpu</span> <span class="mi">1</span><span class="ss">:00.57</span> <span class="nv">total</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="nv">Oracle</span> <span class="nv">JRE</span>
</span><span class='line'><span class="nb">&gt; time </span><span class="nv">lein</span> <span class="nv">run</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">World!</span>
</span><span class='line'><span class="nv">lein</span> <span class="nv">run</span>  <span class="mf">31.47</span><span class="nv">s</span> <span class="nv">user</span> <span class="mf">1.43</span><span class="nv">s</span> <span class="nv">system</span> <span class="mi">95</span><span class="nv">%</span> <span class="nv">cpu</span> <span class="mf">34.298</span> <span class="nv">total</span>
</span><span class='line'><span class="nb">&gt; time </span><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">World!</span>
</span><span class='line'><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>  <span class="mf">32.11</span><span class="nv">s</span> <span class="nv">user</span> <span class="mf">1.18</span><span class="nv">s</span> <span class="nv">system</span> <span class="mi">94</span><span class="nv">%</span> <span class="nv">cpu</span> <span class="mf">35.070</span> <span class="nv">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks promising for clojure on small arm devices :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building RC Toy with Clojure]]></title>
    <link href="http://blog.gonzih.me/blog/2013/03/19/building-rc-toy-with-clojure/"/>
    <updated>2013-03-19T11:09:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/03/19/building-rc-toy-with-clojure</id>
    <content type="html"><![CDATA[<p>Bored and have free time? Lets build something.
Lets build RC Toy. Hm, and lets use Clojure (because clojure is pure fun to use).</p>

<!-- more -->


<p>First of all we need some parts.</p>

<ul>
<li>Tamiya Universal Plate Set (TAM70157) (better to order 2 pcs)</li>
<li>Tamiya Track and Wheel Set (TAM70100)</li>
<li>Tamiya Twin Motor Gearbox  (TAM70097)</li>
<li>Arduino (I have UNO and Leonardo, UNO was choosen since I don&#8217;t need to make modifications in Firmata code for it (except baudrate))</li>
<li>HBridge IC L293 (L293B was used)</li>
<li>Bluetooth module (you can buy Arduino ready module, I will be using cheapest possible module)</li>
<li>Bluetooth in PC</li>
<li>Wires</li>
<li>Batteries or Accumulator (I have 9v batteries so I will use them)</li>
<li>Gamepad (Logitech Rumble Gemapad F510 was used)</li>
</ul>


<h1>Putting things together</h1>

<h2>Chassis</h2>

<p>First lets build gearbox. You can use it in few different modes of gear ratio. I selected 114.7:1 gear ratio (lucky guess).
Read instructions, take your time. I had 2 9v motors, so since I will be using 9v batteries I decided to replace default motors with 9v ones.</p>

<p>Next assemble tracks. Pretty easy, right? Next is time to put it all together. Since I had only 1 plate I made second one from peace of plexiglass.
I made something like 2 floored chassis. First floor is for motor and wheels (and maybe batteries) and second is for Arduino (and maybe batterries).</p>

<h2>Bluetooth</h2>

<p>We need to do 2 thing with our cheap bluetooth module:</p>

<p>Solder legs to it
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/bluetooth-module-for-Arduino.jpg" alt="Soldered bluetooth module" /></p>

<p>Use voltage divider (bluetooth module is working on 3.3v, Arduino is working on 5v)
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/bluetooth-module-for-Arduino.svg" alt="Voltage devider" /></p>

<h2>Gearbox and HBridge Driver</h2>

<p>To control motors I decided to use HBridge. You can use bunch of transistors if you want, but I&#8217;m afraid it would be messy.
To understand how HBridge works you should read <a href="http://learn.adafruit.com/adafruit-Arduino-lesson-15-dc-motor-reversing/overview">Adafruit post</a>.</p>

<p>HBridge -> Arduino Schematics:
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/arduino-and-hbridge-l293b-rc-toy.svg" alt="Schematics" /></p>

<h2>Final version</h2>

<h3>Photos</h3>

<p><img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-001.jpg" alt="rc-toy-001" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-002.jpg" alt="rc-toy-002" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-003.jpg" alt="rc-toy-003" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-004.jpg" alt="rc-toy-004" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-005.jpg" alt="rc-toy-005" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-006.jpg" alt="rc-toy-006" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-007.jpg" alt="rc-toy-007" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-008.jpg" alt="rc-toy-008" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-009.jpg" alt="rc-toy-009" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-010.jpg" alt="rc-toy-010" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-011.jpg" alt="rc-toy-011" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-012.jpg" alt="rc-toy-012" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-014.jpg" alt="rc-toy-014" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-016.jpg" alt="rc-toy-016" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-017.jpg" alt="rc-toy-017" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-018.jpg" alt="rc-toy-018" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-019.jpg" alt="rc-toy-019" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-020.jpg" alt="rc-toy-020" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-021.jpg" alt="rc-toy-021" /></p>

<h3>Video</h3>

<p><video width='640' height='480' preload='none' controls poster=' https://dl.dropbox.com/u/4109351/octopress/rc-toy/video-1-cover.jpg'><source src='https://dl.dropbox.com/u/4109351/octopress/rc-toy/video-1.flv' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<h1>Writing some code</h1>

<h2>Bluetooth as Serial port</h2>

<p>I used blueman on my Arch Laptop. Gui is straightforward and easy to use.</p>

<h2>Gamepad and kernel</h2>

<p>You need to find kernel module for your gamepad. For my gamepad module <code>joydev</code> was required.
After module is loaded you should see new device in <code>/dev/input</code>.</p>

<h2>Clojure code</h2>

<p>I used <a href="http://clojure.org/">Clojure</a> as main language for controlling Arduino. I took <a href="https://github.com/nakkaya/clodiuno">Clodiuno</a> library.
It is Firmata protocol implementation for Clojure. Why Firmata? Because it&#8217;s easy, fast and provides great way to extend your project in future.</p>

<p>So I wrote some code, uploaded Firmata to Arduino. And&#8230; it&#8217;s not working.</p>

<p>After some digging in Firmata and Clodiuno code I wrote 2 pull request to Clodiuno.</p>

<p>First issue was that bluetooth uses 9600 baudrate for communications. Fix? <a href="https://github.com/nakkaya/clodiuno/pull/5">pull.</a></p>

<ul>
<li>Update standart Firmata example code in Arduino IDE. Change baudrate to 9600.</li>
<li>Change Clodiuno baudrate to 9600.</li>
</ul>


<p>Second was that Clodiuno waits for version response from Firmata on startup. It&#8217;s ok for wired UNO since it will be restarted when serial connection is established.
But boards like Leonardo or if you are using bluetooth miss that behavior.</p>

<p>Fix? <a href="https://github.com/nakkaya/clodiuno/pull/6">pull.</a> Manually ask firmware version on Clodiuno initialization.</p>

<p>Most of controller related logic was extracted from awesome library <a href="https://github.com/gavilancomun/jinput-overtone">overtone-jinput</a>.
I just replaced overtone related events handling with my own code based on Clodiuno.</p>

<p>Final version of code is on <a href="https://github.com/Gonzih/clj-arduino-rc-toy">GitHub</a></p>

<p>You can run it with <code>./run.sh</code>.</p>

<h1>Raspberry Pi</h1>

<p>Currently work in progress on moving Clojure code to Rapberry Pi.</p>

<h2>Fixed Issues</h2>

<h3>Native dependencies issue</h3>

<p>Seems like jvm tries to load linux64 native dependencies for Raspberry Pi. Fix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#INFO: Failed to load library: no jinput-linux64 in java.library.path</span>
</span><span class='line'>sudo ln -s /usr/lib/jni/libjinput.so /usr/lib/jni/libjinput-linux64.so<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Gamepad configuration</h3>

<p>Add <code>joydev</code> to <code>/etc/modules</code> to see gamepad in <code>/etc/input</code>.
Also you need to switch gamepad to direct input mode (X -> D switch on the back of gamepad).</p>

<h2>Unfixed Issues</h2>

<h3>Bluetooth as Serial port</h3>

<p>To scan for devices from command line use <code>hcitool scan</code>.</p>

<p>To bind bluetooth to serial port on startup use following code (untested yet):</p>

<figure class='code'><figcaption><span>/etc/bluetooth/rfcomm.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rfcomm0 {
</span><span class='line'>        bind yes;
</span><span class='line'>        device mac-adress-of-bluetooth-on-arduino;
</span><span class='line'>        channel 1;
</span><span class='line'>        comment &quot;Arduino&quot;;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>JInput permissions</h3>

<p>For now I have no idea how to fix that issue. Looks like something is wrong with permissions.</p>

<figure class='code'><figcaption><span>/etc/bluetooth/rfcomm.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Failed to open device (/dev/input/js0): Failed to open device /dev/input/js0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I cook Ctags in Vim]]></title>
    <link href="http://blog.gonzih.me/blog/2013/03/18/how-i-cook-ctags-in-vim/"/>
    <updated>2013-03-18T20:50:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/03/18/how-i-cook-ctags-in-vim</id>
    <content type="html"><![CDATA[<p>Ctags is great piece of software. And it took me some time to realize how I can use ctags with vim in optimal for me way. My solution is petty simle. I have few vim functions that vim runs when buffer write is done.</p>

<!--more-->


<p>Functions do following:</p>

<ul>
<li>Initialize tags file with symlink to /tmp (tmpfs) with uuid in name if no symlink was found</li>
<li>Touch tags file</li>
<li>If file is empty (wc -l return 0 lines) then populate it with <code>ctags -R</code> command</li>
<li>Remove all lines from tags file related to current file</li>
<li>Update tags file with new content of current file with <code>ctags -a</code></li>
</ul>


<p>Why I use symlinks for tags file?</p>

<ul>
<li>Writes are slow</li>
<li>Writes are bad for my SSD</li>
<li>Memory is blazingly fast</li>
</ul>


<p>Here is my code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; If tags file does not exist initializes it with symlink to tmp with UUID in</span>
</span><span class='line'><span class="c">&quot; filename</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> InitTagsFileWithSymlink<span class="p">(</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> filepath <span class="p">=</span> <span class="k">a</span>:<span class="k">f</span>
</span><span class='line'>  <span class="k">let</span> issymlink <span class="p">=</span> system<span class="p">(</span><span class="s2">&quot;find &#39;&quot;</span> . filepath . <span class="s2">&quot;&#39; -type l | wc -l&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> issymlink <span class="p">==</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">let</span> uuid <span class="p">=</span> system<span class="p">(</span><span class="s1">&#39;uuidgen&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> cmd  <span class="p">=</span> <span class="s1">&#39;ln -s &quot;/tmp/ctags-for-vim-&#39;</span> . uuid . <span class="s1">&#39;&quot; &quot;&#39;</span> . filepath . <span class="s1">&#39;&quot;&#39;</span>
</span><span class='line'>    <span class="k">let</span> cmd  <span class="p">=</span> substitute<span class="p">(</span>cmd<span class="p">,</span> <span class="s1">&#39;\n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> resp <span class="p">=</span> system<span class="p">(</span>cmd<span class="p">)</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Populates tags file if lines count is equal to 0</span>
</span><span class='line'><span class="c">&quot; with `ctags -R .`</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> PopulateTagsFile<span class="p">(</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> filepath <span class="p">=</span> <span class="k">a</span>:<span class="k">f</span>
</span><span class='line'>  <span class="k">let</span> resp     <span class="p">=</span> system<span class="p">(</span><span class="s1">&#39;touch &quot;&#39;</span> . filepath . <span class="s1">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="nb">lines</span>    <span class="p">=</span> system<span class="p">(</span><span class="s1">&#39;wc -l &quot;&#39;</span> . filepath . <span class="s1">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> linescnt <span class="p">=</span> substitute<span class="p">(</span><span class="nb">lines</span><span class="p">,</span> <span class="s1">&#39;\D&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> linescnt <span class="p">==</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">let</span> cwd  <span class="p">=</span> getcwd<span class="p">()</span>
</span><span class='line'>    <span class="k">let</span> cmd  <span class="p">=</span> <span class="s1">&#39;ctags -Rf &quot;&#39;</span>. filepath . <span class="s1">&#39;&quot; &quot;&#39;</span> . cwd . <span class="s1">&#39;&quot;&#39;</span>
</span><span class='line'>    <span class="k">let</span> resp <span class="p">=</span> system<span class="p">(</span>cmd<span class="p">)</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Remove tags for saved file from tags file</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> DelTagOfFile<span class="p">(</span><span class="k">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> fullpath    <span class="p">=</span> <span class="k">a</span>:<span class="k">file</span>
</span><span class='line'>  <span class="k">let</span> cwd         <span class="p">=</span> getcwd<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> tagfilename <span class="p">=</span> cwd . <span class="s2">&quot;/tags&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">f</span>           <span class="p">=</span> substitute<span class="p">(</span>fullpath<span class="p">,</span> cwd . <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">f</span>           <span class="p">=</span> escape<span class="p">(</span><span class="k">f</span><span class="p">,</span> <span class="s1">&#39;./&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> cmd         <span class="p">=</span> <span class="s1">&#39;sed --follow-symlinks -i &quot;/&#39;</span> . <span class="k">f</span> . <span class="s1">&#39;/d&quot; &quot;&#39;</span> . tagfilename . <span class="s1">&#39;&quot;&#39;</span>
</span><span class='line'>  <span class="k">let</span> resp        <span class="p">=</span> system<span class="p">(</span>cmd<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Init tags file</span>
</span><span class='line'><span class="c">&quot; Populate it</span>
</span><span class='line'><span class="c">&quot; Remove data related to saved file</span>
</span><span class='line'><span class="c">&quot; Append it with data for saved file</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> UpdateTags<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">f</span>           <span class="p">=</span> expand<span class="p">(</span><span class="s2">&quot;%:p&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> cwd         <span class="p">=</span> getcwd<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> tagfilename <span class="p">=</span> cwd . <span class="s2">&quot;/tags&quot;</span>
</span><span class='line'>  <span class="k">call</span> InitTagsFileWithSymlink<span class="p">(</span>tagfilename<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> PopulateTagsFile<span class="p">(</span>tagfilename<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> DelTagOfFile<span class="p">(</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> cmd  <span class="p">=</span> <span class="s1">&#39;ctags -a -f &#39;</span> . tagfilename . <span class="s1">&#39; &quot;&#39;</span> . <span class="k">f</span> . <span class="s1">&#39;&quot;&#39;</span>
</span><span class='line'>  <span class="k">let</span> resp <span class="p">=</span> system<span class="p">(</span>cmd<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'>command UpdateTags <span class="k">call</span> UpdateTags<span class="p">()</span>
</span><span class='line'>autocmd <span class="nb">BufWritePost</span> *.rb<span class="p">,</span>*.<span class="nb">js</span><span class="p">,</span>*.coffee<span class="p">,</span>*.clj <span class="k">call</span> UpdateTags<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blue Midnight Commander color scheme]]></title>
    <link href="http://blog.gonzih.me/blog/2013/02/14/blue-midnight-commander-color-scheme/"/>
    <updated>2013-02-14T21:22:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/02/14/blue-midnight-commander-color-scheme</id>
    <content type="html"><![CDATA[<p>I spend today few hours reading mc documentation about color scheme configuration. Came up with following color scheme. Enjoy :)</p>

<p><a href="https://raw.github.com/Gonzih/dotfiles/a43c06d7cd12f3e1e06f3efe655e082e4dc78012/.config/mc/theme.png"><img src="https://dl.dropbox.com/u/4109351/octopress/midnight-commander-theme/theme.png" alt="Blue Midnight Commander color scheme" /></a></p>

<figure class='code'><figcaption><span>.config/mc/ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Colors]</span>
</span><span class='line'><span class="na">base_color</span><span class="o">=</span><span class="s">lightgray,blue:normal=blue,default:reverse=green,default:gauge=gray,lightgray:selected=white,blue:marked=yellow,default:markselect=yellow,default:directory=brightblue,default:executable=brightgreen,default:link=cyan,default:device=brightmagenta,default:core=red,default:special=lightgray,default:dnormal=lightgray,blue:dfocus=lightgray,black:dhotnormal=yellow,blue:dhotfocus=yellow,black:menunormal=lightgray,blue:menuhot=yellow,blue:menusel=lightgray,black:menuhotsel=yellow,black:menuinactive=lightgray,gray:errors=lightgray,red:errdhotnormal=yellow,red:errdhotfocus=yellow,lightgray:input=lightblue,gray:inputunchanged=blue,gray:inputmark=white,blue:bbarhotkey=white,black:bbarbutton=lightgray,blue:viewbold=lightgray,default:viewunderline=lightblue,default:viewselected=lightgray,grey:helpnormal=lightgray,default:helpitalic=lightblue,default:helpbold=lightgray,default:helplink=green,default:helpslink=lighgreen,defalt:</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more information take look at <a href="http://www.midnight-commander.org/wiki/doc/common/skins">mc wiki</a> and run <code>mc --help-color</code> to see available color variables in your mc version.
Format of color configuration is <code>what=foreground,background:</code>. All configuration shoud be in one line (ofcourse you can write it in multiple lines and then use vim (or other cool editor) magic).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClojureScript on BeagleBone: simple benchmark with Node.js]]></title>
    <link href="http://blog.gonzih.me/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js/"/>
    <updated>2013-01-23T17:16:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>Benchmark is based on my <a href="http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/">previous experiments</a> with BeagleBone and Clojure. Setup is the same. BeagleBone is running Ubuntu 12.04. Cpu is running on 500 Mhz.
Node version is 0.6.12. ClojureScript is compiled with advanced and simple optimizations.</p>

<!-- more -->


<p><a href="https://github.com/Gonzih/clojurescript-small-benchmark-for-embed">Code</a> is modified to run on top of the JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">benchmark.core</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce * </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">x</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sort-seq</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">repeat </span><span class="mi">100000</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">2000000</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">time-fun</span> <span class="p">[</span><span class="nv">fun</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">start</span>  <span class="p">(</span><span class="nf">.getTime</span> <span class="p">(</span><span class="nf">js/Date.</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">_</span>      <span class="p">(</span><span class="nf">fun</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">end</span>    <span class="p">(</span><span class="nf">.getTime</span> <span class="p">(</span><span class="nf">js/Date.</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">result</span> <span class="p">(</span><span class="nb">- </span><span class="nv">end</span> <span class="nv">start</span><span class="p">)]</span>
</span><span class='line'>    <span class="nv">result</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">time-it</span> <span class="p">[</span><span class="nv">fun</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">values</span>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">200</span><span class="p">)]</span> <span class="p">(</span><span class="nf">time-fun</span> <span class="nv">fun</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">apply + </span><span class="nv">values</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">count </span><span class="nv">values</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(factorial 5000) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(fib 20) \t Avg: &quot;</span>         <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(sort-seq) \t Avg: &quot;</span>       <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">sort-seq</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">set!</span> <span class="nv">*main-cli-fn*</span> <span class="nv">-main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Benchmark results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">&gt; node </span><span class="nv">--version</span>
</span><span class='line'><span class="nv">v0.6.12</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="nv">simple</span> <span class="nv">compiler</span> <span class="nv">optimization</span>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span> <span class="nv">VSZ</span>    <span class="nv">RSS</span>   <span class="nv">TTY</span>    <span class="nv">STAT</span> <span class="nv">START</span>  <span class="nv">TIME</span> <span class="nv">COMMAND</span>
</span><span class='line'><span class="mf">91.4</span> <span class="mf">20.3</span> <span class="mi">90816</span>  <span class="mi">51292</span> <span class="nv">pts/1</span>  <span class="nv">Rl+</span>  <span class="mi">08</span><span class="ss">:46</span>  <span class="mi">0</span><span class="ss">:54</span> <span class="nb">node </span><span class="nv">clojurescript-benchmark-optimization-simple.js</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; node </span><span class="nv">clojurescript-benchmark-optimization-simple.js</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span> <span class="mf">64.345</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span> <span class="mf">5.575</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span> <span class="mf">7281.975</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="nv">advanced</span> <span class="nv">compiler</span> <span class="nv">optimization</span>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span> <span class="nv">VSZ</span>    <span class="nv">RSS</span>   <span class="nv">TTY</span>    <span class="nv">STAT</span> <span class="nv">START</span>  <span class="nv">TIME</span> <span class="nv">COMMAND</span>
</span><span class='line'><span class="mf">99.0</span> <span class="mf">20.9</span> <span class="mi">92200</span>  <span class="mi">52776</span> <span class="nv">pts/0</span>  <span class="nv">Rl+</span>  <span class="mi">07</span><span class="ss">:14</span>  <span class="mi">0</span><span class="ss">:44</span> <span class="nb">node </span><span class="nv">clojurescript-benchmark-optimization-advanced.js</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; node </span><span class="nv">clojurescript-benchmark-optimization-advanced.js</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span> <span class="mf">54.775</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span> <span class="mf">2.77</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span> <span class="mf">6325.71</span>
</span></code></pre></td></tr></table></div></figure>


<p>So as you can see from output above - ClojureScript can be well suitable for development and scripting on small boards like BeagleBone or Raspberry Pi.
Good speed and better semantics at low prices, I ♥ Clojure and ClojureScript :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy HTML5 Validation Fallback for Older Browsers using Modernizr and JQuery Validation Plugin]]></title>
    <link href="http://blog.gonzih.me/blog/2012/12/29/easy-html5-validation-fallback-for-older-browsers-using-modernizr-and-jquery-validation-plugin/"/>
    <updated>2012-12-29T12:15:00+01:00</updated>
    <id>http://blog.gonzih.me/blog/2012/12/29/easy-html5-validation-fallback-for-older-browsers-using-modernizr-and-jquery-validation-plugin</id>
    <content type="html"><![CDATA[<p>So I heard that you hate IE. Also I heard that you love HTML5. Is that true? Great, I feel the same about IE. So here is quick fallback script for html5 validation in older browsers (or crappy ones, like IE).
You will need three things for that.</p>

<p>First is <a href="http://modernizr.com/">Modernizr</a> javascript library. It allows you to detect which features are supported by your browser and which aren&#8217;t.</p>

<p>Second is <a href="http://jquery.com/">JQuery</a>. I think you are already familiar with it, so there is no need to tell you why it&#8217;s awesome and how to use it.</p>

<p>Third is <a href="http://docs.jquery.com/Plugins/Validation">JQuery Validation Plugin</a>. It provides mechanism for form validation based on input classes.</p>

<p>So now only things you need to do is to convert html5 validation attributes to html classes and run validation plugin. Here is small <a href="http://coffeescript.org/">CoffeeScript</a> snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># initialize plugin on page ready</span>
</span><span class='line'><span class="nx">$</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="k">unless</span> <span class="p">(</span><span class="nx">Modernizr</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s">&#39;form&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s">&#39;input[required]&#39;</span><span class="p">).</span><span class="nx">each</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;class&#39;</span><span class="p">,</span> <span class="s">&#39;required &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;type&#39;</span><span class="p">)).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s">&#39;required&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s">&#39;form&#39;</span><span class="p">).</span><span class="nx">each</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">validate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># check if form is valid by hand</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&#39;form&#39;</span><span class="p">).</span><span class="nx">valid</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as always, Have a nice day! :)</p>
]]></content>
  </entry>
  
</feed>
