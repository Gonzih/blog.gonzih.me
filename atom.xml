<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2016-03-17T09:02:31+00:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arch Linux on Lenovo IdeaPad Y700 15"]]></title>
    <link href="http://blog.gonzih.me/blog/2015/12/11/arch-linux-on-lenovo-ideapad-y700-15/"/>
    <updated>2015-12-11T13:20:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2015/12/11/arch-linux-on-lenovo-ideapad-y700-15</id>
    <content type="html"><![CDATA[<p>Collection of tweaks that I gathered after installing Arch Linux on to Lenovo IdeaPAd Y700.</p>

<!-- more -->


<h1>What works so far</h1>

<ul>
<li>WIFI</li>
<li>Suspend (look at the bumblebee issue with suspend if nvidia module gets loaded on resume)</li>
<li>Sound without subwoofer</li>
<li>Video (I used bumblebee to switch between intel/nvidia GPUs)</li>
<li>Brightness</li>
<li>Keyboard backlit</li>
<li>Power managment via laptop mode tools and systemd.</li>
<li>Card reader (you might need to run <code>echo 1 | sudo tee /sys/bus/pci/rescan</code> so card reader becomes visible)</li>
<li>HDMI output</li>
</ul>


<h1>What does not work</h1>

<ul>
<li>Subwoofer</li>
</ul>


<h1>Installation</h1>

<h2>Boot</h2>

<ul>
<li>Add nomodeset to the kernel options on Live USB boot</li>
<li>Make sure secure boot is disabled (to make your life easier)</li>
<li>Follow <a href="https://wiki.archlinux.org/index.php/Installation_guide">arch linux installation instructions</a></li>
</ul>


<h1>Extra tweaking</h1>

<h2>Video</h2>

<ul>
<li>Make sure switchable GPUs are enabled in BIOS</li>
<li>Follow <a href="https://wiki.archlinux.org/index.php/Bumblebee#Installing_Bumblebee_with_Intel.2FNVIDIA">insructions on the arch wiki</a></li>
<li>To enable intel GPU add <code>i915.preliminary_hw_support=1</code> to <code>GRUB_CMDLINE_LINUX_DEFAULT</code> in the <code>/etc/default/grub</code> file. This should be solved after 4.3 kernel release.</li>
<li>Problems with video scaling in fullscreen mode can be solved by using gl as an output driver (mplayer -vo gl).</li>
</ul>


<h2>Wifi</h2>

<p>Since there is no HW based wifi switch (only Fn+F5 combination) and kernel still tries to read it wifi is reported disabled on every boot.
There was a patch for the 17 inch model <a href="http://www.gossamer-threads.com/lists/linux/kernel/2323659">here</a>.</p>

<h3>Temporary solution 1:</h3>

<ul>
<li><code>sudo systemctl enable rfkill-unblock@wifi.service</code></li>
<li><code>sudo rfkill unblock wifi</code></li>
<li>Works fine with <code>wicd</code></li>
<li>Configuring NetworkManager service to be run after rfkill service should also work</li>
</ul>


<h3>Temporary solution 2:</h3>

<ul>
<li><code>echo blacklist ideapad_laptop | sudo tee /etc/modprobe.d/blacklist.conf</code> to disable acpi module</li>
</ul>


<h2>Audio clicking</h2>

<p>This is caused by suspend-on-idle module in the pulse audio. Instead of disabling the module I decided to just set very long timeout.
To do that append <code>timeout=36000</code> to line <code>load-module module-suspend-on-idle</code> in the <code>/etc/pulse/default.pa</code> configuration file.
And now restart pulse by running <code>pulseaudio --kill</code> and <code>pulseaudio --start</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux on Macbook Pro 8.2 (17" 2011)]]></title>
    <link href="http://blog.gonzih.me/blog/2015/08/08/arch-linux-on-macbook-pro-8-dot-2-17-2011/"/>
    <updated>2015-08-08T09:53:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2015/08/08/arch-linux-on-macbook-pro-8-dot-2-17-2011</id>
    <content type="html"><![CDATA[<p>Couple of tips from my experience of running Arch on Macbook 8.2.</p>

<!--more-->


<h2>Installation</h2>

<p><a href="https://wiki.archlinux.org/index.php/MacBook">Arch Wiki page</a> covers installation well enough in my opinion.</p>

<h2>Use broadcom-wl wireless module from AUR</h2>

<p>This is proprietary broadcom driver. Works fine with BCM4331.
Only thing that does not work - hidden SSID.</p>

<p>OpenSource driver (that is part of the kernel) and reverse engeneered ones (b43) are too unstable in my experience.</p>

<p>To make sure that correct module is used by hardwrare blacklist every other module and reboot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#/etc/modprobe.d/wl.conf
</span><span class='line'>blacklist b43
</span><span class='line'>blacklist b43legacy
</span><span class='line'>blacklist ssb
</span><span class='line'>blacklist bcm43xx
</span><span class='line'>blacklist brcm80211
</span><span class='line'>blacklist brcmfmac
</span><span class='line'>blacklist brcmsmac
</span><span class='line'>blacklist bcma</span></code></pre></td></tr></table></div></figure>


<h2>Disable Radeon GPU for better power consumption</h2>

<p>This will reduce power usage dramatically but also will disable external screen support via display port.
This laptop relies on the external gpu to work with display port.</p>

<p>Edit <code>/etc/grub.d/00_header</code> and add outb lines in between <code>set gfxmode=${GRUB_GFXMODE}</code> and <code>load video</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>set gfxmode=${GRUB_GFXMODE}
</span><span class='line'>outb 0x728 1
</span><span class='line'>outb 0x710 2
</span><span class='line'>outb 0x740 2
</span><span class='line'>outb 0x750 0
</span><span class='line'>load video
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Generate new grub config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure>


<p>PS. This post will probably grow over time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nvim terminal + ClojureScript and figwheel]]></title>
    <link href="http://blog.gonzih.me/blog/2015/06/15/nvim-terminal-plus-clojurescript-and-figwheel/"/>
    <updated>2015-06-15T19:37:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2015/06/15/nvim-terminal-plus-clojurescript-and-figwheel</id>
    <content type="html"><![CDATA[<p>This is a small post on how to improve your ClojureScript development flow in NeoVim using its terminal feature.</p>

<!--more-->


<p><a href="http://neovim.io/">NeoVim</a> nowadays is almost fully compatible with vim.
It is able to reuse my <a href="https://github.com/Gonzih/.vim/blob/master/vimrc">.vimrc</a> file without any issues.
And recently it got proper terminal emulator built-in.
So how about reusing it for ClojureScript development?</p>

<p>If you are lazy (like I am) and don&#8217;t want to setup piggieback support
for fireplace.vim or don&#8217;t feel like tmux integration is good enough
this solution should be your new starting point.</p>

<p>Just open some clojure[script] file and create second split.
Open terminal using <code>:terminal</code> command.</p>

<p>Here are some keybindings that will help you to send code from
your clojure buffer to the terminal buffer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> has<span class="p">(</span><span class="s2">&quot;nvim&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c">  &quot; Open terminal and run lein figwheel</span>
</span><span class='line'>  nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="nb">term</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">v</span>:terminal<span class="p">&lt;</span>CR<span class="p">&gt;</span>lein figwheel<span class="p">&lt;</span>CR<span class="p">&gt;&lt;</span>C<span class="p">-</span>\<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">n</span><span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">p</span>
</span><span class='line'><span class="c">  &quot; Evaluate anything from the visual mode in the next window</span>
</span><span class='line'>  vmap <span class="p">&lt;</span>buffer<span class="p">&gt;</span> <span class="p">,</span><span class="k">e</span> <span class="k">y</span><span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>wpi<span class="p">&lt;</span>CR<span class="p">&gt;&lt;</span>C<span class="p">-</span>\<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">n</span><span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span><span class="k">p</span>
</span><span class='line'><span class="c">  &quot; Evaluate outer most form</span>
</span><span class='line'>  nmap <span class="p">&lt;</span>buffer<span class="p">&gt;</span> <span class="p">,</span><span class="k">e</span> ^<span class="k">v</span>%<span class="p">,</span><span class="k">e</span>
</span><span class='line'><span class="c">  &quot; Evaluate buffer&quot;</span>
</span><span class='line'>  nmap <span class="p">&lt;</span>buffer<span class="p">&gt;</span> <span class="p">,</span><span class="k">b</span> ggVG<span class="p">,</span><span class="k">e</span>
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hey! Now you can finally stop looking at the emacs land!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ServerSide rendering of Reagent components]]></title>
    <link href="http://blog.gonzih.me/blog/2015/02/16/serverside-rendering-of-reagent-components/"/>
    <updated>2015-02-16T10:12:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2015/02/16/serverside-rendering-of-reagent-components</id>
    <content type="html"><![CDATA[<p>Great thing about React is that you can write what people nowadays call &#8220;isomorphic JavaScript&#8221;.
In this post we will not discuss how wrong this term is in many ways,
but instead we will focus on how to achieve similar results in your ClojureScript code using Reagent library.</p>

<!--more-->


<p>In my experience simplest optimization to run in some js engine on server side is whitespace.
It does not do any renaming/restructuring of your code but eliminates need to take care of dependencies loading.
So our compiler configuration should look something like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:id</span> <span class="s">&quot;server-side&quot;</span>
</span><span class='line'> <span class="ss">:source-paths</span> <span class="p">[</span><span class="s">&quot;src&quot;</span><span class="p">]</span>
</span><span class='line'> <span class="ss">:compiler</span> <span class="p">{</span><span class="ss">:output-to</span> <span class="s">&quot;resources/public/javascripts/server-side.js&quot;</span>
</span><span class='line'>            <span class="ss">:output-dir</span> <span class="s">&quot;resources/public/javascripts/out-server-side&quot;</span>
</span><span class='line'>            <span class="ss">:preamble</span> <span class="p">[</span><span class="s">&quot;meta-inf/resources/webjars/react/0.12.1/react-with-addons.min.js&quot;</span><span class="p">]</span>
</span><span class='line'>            <span class="ss">:pretty-print</span> <span class="nv">false</span>
</span><span class='line'>            <span class="ss">:warnings</span> <span class="nv">true</span>
</span><span class='line'>            <span class="ss">:optimizations</span> <span class="ss">:whitespace</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next step is to make sure that all functions that use browser specific stuff like document/window are moved in to react lifecycle methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">main-component</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">with-meta</span>
</span><span class='line'>    <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="nv">...</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:component-did-mount</span> <span class="p">(</span><span class="nb">comp </span><span class="nv">init-my-scroll-handler!</span>
</span><span class='line'>                                <span class="nv">also-init-my-go-loop!</span><span class="p">)}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next let&#8217;s create function that will do some rendering to the string.
I like to keep this function in a component specific ns just for convenience.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="o">^</span><span class="ss">:export</span> <span class="nv">render-me-to-s</span> <span class="p">[</span><span class="nv">initial-state</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reset!</span> <span class="nv">my-main-state</span> <span class="p">(</span><span class="nf">js-&gt;clj</span> <span class="nv">initial-state</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">; Render component to markup without reactid</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reagent.core/render-to-static-markup</span> <span class="p">[</span><span class="nv">main-component</span><span class="p">])</span>
</span><span class='line'>  <span class="c1">; Or render component to ready to-go react markup</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reagent.core/render-to-string</span> <span class="p">[</span><span class="nv">main-component</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now server side bootstrapping, most of this code was taken from <a href="https://github.com/reactjs/react-rails">react-rails plugin</a>.</p>

<p>First of all react expects to have global or window objects in your js engine:</p>

<figure class='code'><figcaption><span>setup.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">global</span> <span class="o">=</span> <span class="nx">global</span> <span class="o">||</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">self</span> <span class="o">||</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nb">window</span> <span class="o">||</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">console</span> <span class="o">=</span> <span class="nx">global</span><span class="p">.</span><span class="nx">console</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="p">[</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="s1">&#39;log&#39;</span><span class="p">,</span> <span class="s1">&#39;info&#39;</span><span class="p">,</span> <span class="s1">&#39;warn&#39;</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">fn</span> <span class="k">in</span> <span class="nx">console</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">[</span><span class="nx">fn</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s try and use all this in our code (for now in Ruby):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cxt</span> <span class="o">=</span> <span class="ss">V8</span><span class="p">:</span><span class="ss">:Context</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">cxt</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;setup.js&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">cxt</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;resources/public/javascripts/server-side.js&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="n">cxt</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s2">&quot;my.amazing_component.ns.render_me_to_s(</span><span class="si">#{</span><span class="n">init_state</span><span class="o">.</span><span class="n">to_json</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. As a way to pass data from ruby to clojurescript json works fine.
Sometimes you might want to use <code>ActionController::Base.helpers.j</code> helper that will
escape your data for usage inside json, but most of the time you should be alright without it.</p>

<p>If you have issues with core.async there are 2 ways to solve it.
I personally prefer to move core.async initialization into some lifecycle method.
Another solution is to implement setTimeout function like that in your <code>setup.js</code> snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">goog</span><span class="p">.</span><span class="nx">global</span><span class="p">.</span><span class="nx">setTimeout</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">cb</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now frontend part. First let&#8217;s in-line generated html in to the container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div id=&quot;content&quot;&gt;</span><span class="cp">&lt;%=</span> <span class="n">html</span> <span class="cp">%&gt;</span><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then let&#8217;s write function that will render our component on frontend:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="o">^</span><span class="ss">:export</span> <span class="nv">mount-me</span> <span class="p">[</span><span class="nv">initial-state</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reset!</span> <span class="nv">my-main-state</span> <span class="p">(</span><span class="nf">js-&gt;clj</span> <span class="nv">initial-state</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reagent.core/render</span> <span class="p">[</span><span class="nv">main-component</span><span class="p">]</span>
</span><span class='line'>                       <span class="p">(</span><span class="nf">js/document.getElementById</span> <span class="s">&quot;content&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As far as I understand react should reuse your markup on frontend and just attach new handlers to it.
Am I wrong on this one? Don&#8217;t know yet.</p>

<p>Inline javascript that you should use on frontend looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">my.amazing_component.ns.mount_me(</span><span class="cp">&lt;%=</span> <span class="n">init_state</span><span class="o">.</span><span class="n">to_json</span> <span class="cp">%&gt;</span><span class="x">)</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Nashorn example (result of my experiments in the REPL)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">import </span><span class="o">&#39;</span><span class="p">[</span><span class="nv">javax.script</span> <span class="nv">ScriptEngineManager</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nashorn</span> <span class="p">(</span><span class="nf">.getEngineByName</span> <span class="p">(</span><span class="nf">ScriptEngineManager.</span><span class="p">)</span> <span class="s">&quot;nashorn&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Same as in ruby version</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">setup-script</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;setup.js&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">ss-script</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;resources/public/javascripts/server-side.js&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">render-script</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;my.amazing_component.ns.render_me_to_s(&quot;</span> <span class="nv">my-state-json-string</span> <span class="s">&quot;);&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">.eval</span> <span class="nv">nashorn</span> <span class="nv">setup-script</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">.eval</span> <span class="nv">nashorn</span> <span class="nv">ss-script</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">.eval</span> <span class="nv">nashorn</span> <span class="nv">render-script</span><span class="p">)</span> <span class="c1">; our html markup</span>
</span></code></pre></td></tr></table></div></figure>


<p>I must admit that this code works on small reagent example.
I&#8217;m unable to load production code from my current project in to Nashorn.</p>

<p>Also it helps a lot if you started developing your project with server side rendering in mind.</p>

<p>Of course it&#8217;s better to have some kind of &#8220;renderers pool&#8221; in JVM.
Good thing that clojure allows you to implement thing like that in few lines of code.
In ruby it&#8217;s not a problem since we have 1 context per worker.</p>

<p><strong>Useful Links:</strong></p>

<ul>
<li><a href="https://groups.google.com/forum/#!topic/clojurescript/IIjUxnl4Zbw">ClojureScript mailing list topic</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ln -sf /usr/bin/emacs /usr/bin/vim ?]]></title>
    <link href="http://blog.gonzih.me/blog/2015/02/15/ln-sf-usr-bin-emacs-usr-bin-vim/"/>
    <updated>2015-02-15T19:21:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2015/02/15/ln-sf-usr-bin-emacs-usr-bin-vim</id>
    <content type="html"><![CDATA[<p>Some time ago I actually did run <code>ln -sf /usr/bin/emacs /usr/bin/vim</code>.
And left it like that for a couple of days.
I must say that it was surprisingly nice experience.
Tinkering around with elisp, building editing environment from scratch.</p>

<p>Of course interesting question is &#8220;How did I end up with this idea in my head?&#8221;.</p>

<!--more-->


<p>I tried to play with emacs few times couple of years ago.
But as a modal editing kind of guy I was unable to comprehend finger bending experience that default key bindings in emacs give you.</p>

<p>I tried evil mode, but it went not so well.
Problem is that I&#8217;m also using programmer dvorak layout, so I need to remap couple of keys for better comfort.
I failed all my previous attempts because it was not very trivial at that time to remap those keys everywhere.
Also probably my lack of patience played against me.
So I gave up and continued using vim (something like 5 years of hapiness).</p>

<p>Recently ClojureScript tool called <a href="https://github.com/bhauman/lein-figwheel">figwheel</a> added repl support.
So as a result you have repl that compiles your clojure code into javascript and executes result in your browser session printing result back to you.
Development flow like that is very common practice in clojure world and one reason why it makes clojure much better.
Problem here is that it does not support nrepl (network repl) protocol and best tool for clojure in vim <a href="https://github.com/tpope/vim-fireplace">vim-fireplace</a> relies on nrepl.
I was using for some time <a href="https://github.com/sjl/tslime2.vim">tslime2</a> in vim to work with ClojureScript.
Idea is very simple - tslime allows you to send pieces of text from your vim into some tmux panel.
It works. You don&#8217;t have out of the box tooling that will select your top most clojure form sadly.
Once upon a time I had discussion on #clojurescript irc and <a href="https://twitter.com/martinklepsch">@martinklepsh</a> mentioned that nowadays evil-mode is much better.
I was bored and followed that track. I did run <code>rm -rf .emacs.d</code> and started from scratch.
As a result my workflow from vim was ported to emacs in a couple of hours.
It surprised me both how simple was that and how relatively close my setup is to default one in vim/evil.
I set my default editor to emacs and continued doing my thing for a couple of days.</p>

<p>And here what I think so far.</p>

<p>Good:</p>

<ul>
<li>Evil mode is good and it&#8217;s very close. It&#8217;s probably closest thing to vim that I ever tried.
It&#8217;s not fancy smart like vim mode in IntelliJ IDEA that actually reads your .vimrc and uses it to configure keybindings
(Big shout outs to the author of idea plugin. It&#8217;s very impressive.)</li>
<li>Writing configuration in a language that I understand was a big relief.</li>
<li>Mapping configuration is simpler. You are mapping elisp function to the key. It&#8217;s simpler and easier to understand than remapping mechanism in vim.</li>
<li>Helm surprised me in it&#8217;s speed and functionality, I spent lot of time fighting with Ctrl-P/Unite in vim. Configuring Unite was painful experience. Helm on the other hand just works. And works well.</li>
<li>Inferior lisp is so goooood. Having editor with lisp support in mind is incredible experience for any lisp developer. <a href="https://github%20in%20inferior%20lisp%20mode%20tuned%20to%20play%20well%20with%20clojure">inf-clojure</a> is enhanced clojure mode for the inf-lisp.</li>
<li>It can do async stuff! If you used vim then you know what I mean. In emacs it&#8217;s just there. Without required pythor/ruby support enabled during compilation.</li>
<li>Built-in package manager. Just run <code>package-install</code> and it&#8217;s there. No NeoBundle/Bundle installation needed. No need to mess with git submodules.</li>
<li>Ability to inspect everything at run time helps during configuration. Some key executes something weird? Just run <code>describe-key</code> and see what is going on. You can do something similar in vim, but in emacs it&#8217;s much better.</li>
<li>Startup time is slow and it&#8217;s solvable. Just run systemd user service with <code>emacs --daemon</code> and that is enough for most cases.</li>
<li>And you still have emacs operating system at your disposal!</li>
<li>Configuring emacs from scratch made me realize that my vim configuration is really really messy and big. I need probably to think about some changes in there.</li>
</ul>


<p>Not so good:</p>

<ul>
<li>Paredit feels different from one that exists in vim. Less strict I guess most of the time and too strict when it&#8217;s unnecessary. Of course this is related only to my habits and muscle memory.</li>
<li>Evil is slower.
Most of the time it&#8217;s not a problem. But sometimes I&#8217;m mashing my keyboard too fast and mess happens.
Good example is replace (<code>r</code>) key.
Press <code>r:</code> too fast and you might end up in vim command line.</li>
<li>Evil is just a plugin. Sometimes you are forced to use default emacs mode in some menus/buffers that don&#8217;t play well with evil.</li>
<li>Good example of painful evil integration is cider.
It just does not work with evil mode.
Most configuration examples that I was able to find on github related to cider and evil mode where just forcing default emacs mode in cider repl and related buffers.
That was big disappointment for me. I had high hopes for the cider. I&#8217;m realizing that I don&#8217;t really need everything that cider provides.
I&#8217;m very happy with just ability to evaluate code, without even debugger and nice stacktraces.
But cider looked so shiny and cool. And bloated. Seems like author of cider does not use evil mode so my hopes that cider+evil story will improve are low.
After few hours of grinding my teeth over emacs configuration I gave up and decided to rely on <a href="https://github.com/clojure-emacs/inf-clojure">inf-clojure</a>.</li>
</ul>


<p>Will I continue using emacs? Yes.</p>

<p>Will it be my default editor? Probably no.
Vim feels more reliable because it provides modal editing experience out of the box.
In emacs it an option.
I&#8217;m totally fine with giving away all that goodness that emacs provides to have proper editing experience <strong>all the time</strong>.
In every buffer, in every menu.
And I will continue slowly improving my emacs configuration.</p>

<p>This experiment reminded me how many things are missing from my setup.
It also reminded me that <a href="https://neovim.org">neovim</a> might be next big thing in my tool belt.
I&#8217;m really hoping to see big movement around neovim once project becomes more or less compatible with current viml based configurations.</p>

<p><strong>PS</strong></p>

<ul>
<li><a href="http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">Here</a> is very good tutorial to get vim users started in emacs.</li>
<li>My .emacs.d is <a href="https://github.com/Gonzih/.emacs.d">here</a>. I tried to keep it minimalistic.</li>
<li>My .vim is <a href="https://github.com/Gonzih/.vim">here</a>.</li>
<li>If you are looking for the best vim like experience in emacs please take a look at the <a href="https://github.com/syl20bnr/spacemacs">spacemacs project</a>.</li>
<li>Looking for the good color theme in emacs? Take a look at the port of <a href="https://github.com/morhetz/gruvbox">vim&#8217;s gruvbox theme</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grench binary for OpenSUSE]]></title>
    <link href="http://blog.gonzih.me/blog/2014/10/23/grench-binary-for-opensuse/"/>
    <updated>2014-10-23T08:47:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/10/23/grench-binary-for-opensuse</id>
    <content type="html"><![CDATA[<p><a href="http://leiningen.org/grench.html">Grenchman</a> is a small tool that runs leiningen tasks over nrepl.
Helps with JVM startup time during development.
Build in OCaml. If you are not in to the building binary on your own,
there are pre-build binaries on the <a href="http://leiningen.org/grench.html">official website</a>.</p>

<p>And here is one missing binary for OpenSUSE (tested on 13.1, fedora binary does not work).</p>

<p><a href="https://dl.dropboxusercontent.com/u/4109351/grenchman/grench-0.2.0-opensuse">grench-opensuse</a>
[<a href="https://dl.dropboxusercontent.com/u/4109351/grenchman/grench-0.2.0-opensuse.sha1">sha1</a>
| <a href="https://dl.dropboxusercontent.com/u/4109351/grenchman/grench-0.2.0-opensuse.asc">sig</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two way data bindings in Reagent]]></title>
    <link href="http://blog.gonzih.me/blog/2014/10/22/two-way-data-bindings-in-reagent/"/>
    <updated>2014-10-22T17:29:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/10/22/two-way-data-bindings-in-reagent</id>
    <content type="html"><![CDATA[<p>Small code snippet showing ability to generate 2 way data bindings in Reagent.
Underneath it&#8217;s all about core.async.
Also provides ability to apply transformation using transducers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">form</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bind-input</span>
</span><span class='line'>  <span class="s">&quot;Generat on-change callback,</span>
</span><span class='line'><span class="s">   bind value to form-key of form-atom.</span>
</span><span class='line'><span class="s">   Provides ability to implement transformation using transducers.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">form-atom</span> <span class="nv">form-key</span> <span class="nv">xform</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">local-chan</span> <span class="p">(</span><span class="nf">chan</span> <span class="mi">1</span> <span class="nv">xform</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">go-loop</span> <span class="p">[]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">swap!</span> <span class="nv">form-atom</span> <span class="nb">assoc </span><span class="nv">form-key</span> <span class="p">(</span><span class="nf">&lt;!</span> <span class="nv">local-chan</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">recur</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">event</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">put!</span> <span class="nv">local-chan</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">.-value</span> <span class="p">(</span><span class="nf">.-target</span> <span class="nv">event</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bound-input</span>
</span><span class='line'>  <span class="s">&quot;Generate input,</span>
</span><span class='line'><span class="s">   create two way data binding</span>
</span><span class='line'><span class="s">   between input value and value under form-key in form-atom.</span>
</span><span class='line'><span class="s">   Provides ability to implement transformation using transducers.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">attrs</span> <span class="nv">form-atom</span> <span class="nv">form-key</span> <span class="nv">xform</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:input</span> <span class="p">(</span><span class="nb">merge </span><span class="nv">attrs</span>
</span><span class='line'>                 <span class="p">{</span><span class="ss">:value</span> <span class="p">(</span><span class="nf">form-key</span> <span class="o">@</span><span class="nv">form-atom</span><span class="p">)</span>
</span><span class='line'>                  <span class="ss">:on-change</span> <span class="p">(</span><span class="nf">bind-input</span> <span class="nv">form-atom</span> <span class="nv">form-key</span> <span class="nv">xform</span><span class="p">)})])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">main-component</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:div</span>
</span><span class='line'>   <span class="p">[</span><span class="ss">:h3</span> <span class="p">(</span><span class="ss">:name</span> <span class="o">@</span><span class="nv">form</span><span class="p">)</span> <span class="s">&quot; value&quot;</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">bound-input</span> <span class="p">{</span><span class="ss">:type</span> <span class="ss">:text</span><span class="p">}</span> <span class="nv">form</span> <span class="ss">:name</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">&gt; </span><span class="mi">15</span> <span class="p">(</span><span class="nb">count </span><span class="nv">%</span><span class="p">)))]])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">reagent/render-component</span> <span class="p">[</span><span class="nv">main-component</span><span class="p">]</span>
</span><span class='line'>                          <span class="p">(</span><span class="nf">js/document.getElementById</span> <span class="s">&quot;content&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing shell scripts with Clojure+JamVM]]></title>
    <link href="http://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure/"/>
    <updated>2014-09-28T11:04:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/09/28/replacing-shell-scripts-with-clojure</id>
    <content type="html"><![CDATA[<p>We all hate shell scripting.
Scripts are annoyingly hard to debug, test and verify.
Would be lovely, to use some kind of lisp for scripting, right?
To do interactive development with repl in your favorite editor.
To write it in a nice predictable language that you also enjoy.
But sometimes it&#8217;s impossible to add some external dependencies to the system.
What if you have only JVM to your disposal, will you be able to pull it off only with JVM and clojure.jar?</p>

<!--more-->


<h1>Basic setup</h1>

<p>First what we will need is to get clojure jar file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -O /opt/clojure.jar 'http://central.maven.org/maven2/org/clojure/clojure/1.6.0/clojure-1.6.0.jar'</span></code></pre></td></tr></table></div></figure>


<p>Next lets create executable that will live in <code>/usr/bin</code> (or <code>/opt/bin</code> or <code>/home/youruser/bin</code>):</p>

<figure class='code'><figcaption><span>/usr/bin/clojure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exec </span>java -jar /opt/clojure.jar <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now it&#8217;s time for our hello world script:</p>

<figure class='code'><figcaption><span>/opt/test.clj</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">#</span><span class="nv">!/usr/bin/clojure</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;hello world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x /opt/test.clj
</span></code></pre></td></tr></table></div></figure>


<p>And run it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/opt/test.clj
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<p>Yay! But it feels kind of slow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time</span> /opt/test.clj
</span><span class='line'>hello world
</span><span class='line'>
</span><span class='line'>real  0m2.684s
</span><span class='line'>user  0m2.239s
</span><span class='line'>sys   0m0.186s
</span></code></pre></td></tr></table></div></figure>


<p>2 seconds startup time, not really suitable for scripting, right?
Can we improve that? What if there would be JVM with fast startup and low memory usage.</p>

<h1>Introducing JamVM.</h1>

<p><em>&#8220;But&#8230; but you told us that there is only JVM available on production system without ability to add external dependencies.&#8221;</em></p>

<p>I lied, sorry.</p>

<p>Compiling JamVM with OpenJDK support:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Fetching required dependencies and source</span>
</span><span class='line'>apt-get -y install openjdk-7-jdk openjdk-7-jre build-essential zlib1g-dev
</span><span class='line'><span class="nb">cd</span> /opt
</span><span class='line'>wget -O jamvm-2.0.0.tar.gz <span class="s1">&#39;http://downloads.sourceforge.net/project/jamvm/jamvm/JamVM%202.0.0/jamvm-2.0.0.tar.gz&#39;</span>
</span><span class='line'>tar -xvzf jamvm-2.0.0.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c"># Building</span>
</span><span class='line'><span class="nb">cd</span> /opt/jamvm-2.0.0
</span><span class='line'>./configure --with-java-runtime-library<span class="o">=</span>openjdk7 <span class="o">&amp;&amp;</span> make check <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> make install
</span><span class='line'>
</span><span class='line'><span class="c"># Installing in to the openjdk installation</span>
</span><span class='line'>mkdir /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm
</span><span class='line'>cp /usr/local/jamvm/lib/libjvm.so /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/jamvm/libjvm.so
</span><span class='line'>
</span><span class='line'><span class="c"># Trying it out</span>
</span><span class='line'>java -jamvm -version
</span></code></pre></td></tr></table></div></figure>


<p>JamVM will be installed as separate vm in openjdk, so it will not mess with existing installation.
You will need to use -jamvm option to java command to run it with small overhead vm.</p>

<p>Let&#8217;s update our clojure executable:</p>

<figure class='code'><figcaption><span>/usr/bin/clojure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exec </span>java -jamvm -jar /opt/clojure.jar <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s try it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time</span> /opt/test.clj
</span><span class='line'>hello world
</span><span class='line'>
</span><span class='line'>real  0m0.866s
</span><span class='line'>user  0m0.764s
</span><span class='line'>sys   0m0.076s
</span></code></pre></td></tr></table></div></figure>


<p>Better, right?</p>

<h2>How slow is JamVM? Some benchmarks:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Clojure 1.6
</span><span class='line'>
</span><span class='line'>JamVM:
</span><span class='line'>
</span><span class='line'>(factorial 5000) Avg: 248.65890986500017
</span><span class='line'>(fib 20)         Avg: 35.33471996000001
</span><span class='line'>(sort-seq)       Avg: 405.7438969800002
</span><span class='line'>
</span><span class='line'>OpenJDK:
</span><span class='line'>
</span><span class='line'>(factorial 5000) Avg: 25.016900630000006
</span><span class='line'>(fib 20)         Avg: 0.69957772
</span><span class='line'>(sort-seq)       Avg: 11.553695560000001
</span></code></pre></td></tr></table></div></figure>


<p>Much slower, but if you think about it
shell scripting most of the time is about executing external commands,
IO and data filtering. Might be as well not so bad.
Also memory usage of JamVM makes it perfect for embedded systems.</p>

<h2>Why not use something like lein exec?</h2>

<p>Lein exec is nice. But it adds overhead.
If you need external dependencies you can solve it (in theory)
with classpath manipulations in java command (<code>java -cp dep.jar:dep2.jar:.</code>).
Still you can plug lein exec to JamVM if you want.</p>

<h3>Update</h3>

<p>I just noticed that in Ubuntu 14:04 repos there is already JamVM package,
so you can just run <code>apt-get -y install icedtea-7-jre-jamvm</code> to install latest build.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Hacker News json api with Haskell]]></title>
    <link href="http://blog.gonzih.me/blog/2014/08/13/hacker-news-json-api-with-haskell/"/>
    <updated>2014-08-13T21:43:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/08/13/hacker-news-json-api-with-haskell</id>
    <content type="html"><![CDATA[<p>Small announcement post.</p>

<p>Today I launched tiny scotty server that serves json for Hacker News front page.
Project source code is located on <a href="https://github.com/Gonzih/HNApi">github</a>.
You can access api <a href="http://hn.gonzih.me/">here</a>.</p>

<p>Hacker news parser is implemented using <a href="http://hackage.haskell.org/package/hxt-8.5.2">HXT</a>
and <a href="http://egonschiele.github.io/HandsomeSoup/">HandsomeSoup</a>.
Json is served with help of <a href="https://github.com/scotty-web/scotty/">Scotty</a> web framework.
Currently it&#8217;s running on Heroku using <a href="https://github.com/begriffs/heroku-buildpack-ghc">this ghc-7.8 buildpack</a>.</p>

<p>I don&#8217;t use RSS since I&#8217;m also interested in points and amount of comments.
For me HN is more about interesting links than community and conversations behind the posts.
So I don&#8217;t really care about anything except front page.</p>

<p>Originally I started this project as a Haskell learning exercise.
I hope someone will find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Spotify Linux beta on OpenSUSE 13.1]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1/"/>
    <updated>2014-05-27T13:31:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/27/installing-spotify-linux-beta-on-opensuse-13-dot-1</id>
    <content type="html"><![CDATA[<p>Very small post (more like insruction for myself for the future) on how to convert deb packages provided by Spotify to rpm.
Solution can be applied to any rpm based system (I think so).</p>

<ul>
<li>Install <a href="http://software.opensuse.org/package/alien">alien</a> (perl scripts for converting packages).</li>
<li>Download deb from <a href="http://repository.spotify.com/pool/non-free/s/spotify/">spotify repository</a>, pay attention to architecture.</li>
<li>Convert deb -> rpm by running <code>sudo alien --scripts -r spotify*.deb</code>.</li>
<li>Install rpm <code>sudo zypper in spotify*.rpm</code>.</li>
<li>Run <code>spotify</code>.</li>
</ul>


<p>And it should work.
I noticed few warning about default locates and missing libraries, but client still works fine without any changes to system (symlinks, locales and etc).</p>

<p><strong>PS</strong></p>

<p>If you have issues with volume being too loud by default make sure that you changed <code>flat-volumes</code> from <code>yes</code> to <code>no</code> in <code>/etc/pulse/daemon.conf</code></p>

<p><strong>PPS</strong></p>

<p>People reported that installing version 0.9 -> uninstalling it -> installing version 1.0 might break your system. So watch out for the uninstallation errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconnect to NetworkManager VPN on systemd based system]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/26/autoconnect-to-networkmanager-vpn-on-systemd-based-system/"/>
    <updated>2014-05-26T21:17:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/26/autoconnect-to-networkmanager-vpn-on-systemd-based-system</id>
    <content type="html"><![CDATA[<p>Here is small post with instructions how to setup auto connect to VPN.
Of course you can probably figure out all this yourself, but what if you are lazy?</p>

<!-- more -->


<p>Following was tested on OpenSuse 13.1.</p>

<ul>
<li><p>First create new VPN connection in NetworkManager.</p></li>
<li><p>Create dispatcher file that will connect your VPN.</p></li>
</ul>


<figure class='code'><figcaption><span>/etc/NetworkManager/dispatcher.d/vpn-up</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>CONN=&quot;MY-CONNECTION-NAME&quot;
</span><span class='line'>
</span><span class='line'>nmcli con status id $CONN &gt; /dev/null
</span><span class='line'>
</span><span class='line'>rc=$?
</span><span class='line'>if [[ $rc != 0 ]] ; then
</span><span class='line'>    nmcli con up id $CONN
</span><span class='line'>    sleep 5 # optional wait time
</span><span class='line'>fi
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Make file executable <code>chmod +x /etc/NetworkManager/dispatcher.d/vpn-up</code></li>
<li>Make sure that dispatcher is running by running <code>journalctl -b -u NetworkManager</code> and looking for the line that looks like:</li>
</ul>


<figure class='code'><figcaption><span>journalctl -b -u NetworkManager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;warn&gt; Dispatcher failed: (32) Unit dbus-org.freedesktop.nm-dispatcher.service failed to load: No such file or directory.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If you see line about dispatcher service - enable it manually by running <code>systemctl enable NetworkManager-dispatcher.service</code>.</li>
<li>By default NetworkManager will store VPN password in keyring, to start VPN without keyring dependencies update VPN connection configuration with following changes:</li>
</ul>


<figure class='code'><figcaption><span>/etc/NetworkManager/system-connections/MY-CONNECTION-NAME</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>...
</span><span class='line'>[vpn]
</span><span class='line'>password-flags=0
</span><span class='line'>...
</span><span class='line'>[vpn-secrets]
</span><span class='line'>password=MY-VPN-PASSWORD
</span></code></pre></td></tr></table></div></figure>


<p>And now everything should work like a charm!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HN Tray icon in 50 lines of Clojure]]></title>
    <link href="http://blog.gonzih.me/blog/2014/05/24/hn-tray-icon-in-50-lines-of-clojure/"/>
    <updated>2014-05-24T22:03:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/05/24/hn-tray-icon-in-50-lines-of-clojure</id>
    <content type="html"><![CDATA[<p>Today I got a little bit bored and spend few hours poking around with java.awt in Clojure.
Result is tray app that shows stories from HN front page.
Just in ~50 lines of Clojure code.
Enjoy!</p>

<p><a href="https://github.com/Gonzih/hn-tray.clj">Github Project.</a></p>

<p>Source code is below:</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">hn.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">cheshire.core</span> <span class="ss">:as</span> <span class="nv">json</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure.java.browse</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">browse-url</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure.java.io</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">resource</span><span class="p">]])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">java.awt</span> <span class="nv">SystemTray</span> <span class="nv">TrayIcon</span> <span class="nv">PopupMenu</span> <span class="nv">MenuItem</span> <span class="nv">Toolkit</span><span class="p">]</span>
</span><span class='line'>           <span class="p">[</span><span class="nv">java.awt.event</span> <span class="nv">ActionListener</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">menu-item</span> <span class="p">[</span><span class="nv">label</span> <span class="nv">callback</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">menu</span> <span class="p">(</span><span class="nf">MenuItem.</span> <span class="nv">label</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">listener</span> <span class="p">(</span><span class="nb">proxy </span><span class="p">[</span><span class="nv">ActionListener</span><span class="p">]</span> <span class="p">[]</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">actionPerformed</span> <span class="p">[</span><span class="nv">event</span><span class="p">]</span> <span class="p">(</span><span class="nf">callback</span><span class="p">)))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.addActionListener</span> <span class="nv">menu</span> <span class="nv">listener</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">menu</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">hn-api-url</span> <span class="s">&quot;http://api.ihackernews.com/page&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">hn-items</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">hn-api-url</span>
</span><span class='line'>      <span class="nv">slurp</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">json/parse-string</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">:items</span>
</span><span class='line'>      <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nb">sort-by </span><span class="ss">:points</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>      <span class="nv">reverse</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-hn-to-menu!</span> <span class="p">[</span><span class="nv">menu</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">mapfn</span> <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">title</span> <span class="nv">url</span> <span class="nv">commentCount</span> <span class="nv">points</span><span class="p">]}]</span>
</span><span class='line'>            <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">full-title</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;%-4s (%-4s) - %s&quot;</span> <span class="nv">points</span> <span class="nv">commentCount</span> <span class="nv">title</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">menu-item</span> <span class="p">(</span><span class="nf">menu-item</span> <span class="nv">full-title</span> <span class="o">#</span><span class="p">(</span><span class="nf">browse-url</span> <span class="nv">url</span><span class="p">))]</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">println </span><span class="nv">full-title</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">.add</span> <span class="nv">menu</span> <span class="nv">menu-item</span><span class="p">)))]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doall </span><span class="p">(</span><span class="nb">map </span><span class="nv">mapfn</span> <span class="p">(</span><span class="nf">hn-items</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">exit</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">shutdown-agents</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">System/exit</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">tray</span> <span class="p">(</span><span class="nf">SystemTray/getSystemTray</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">image</span> <span class="p">(</span><span class="nf">.getImage</span> <span class="p">(</span><span class="nf">Toolkit/getDefaultToolkit</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">resource</span> <span class="s">&quot;icon.png&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">icon</span> <span class="p">(</span><span class="nf">TrayIcon.</span> <span class="nv">image</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">exit</span> <span class="p">(</span><span class="nf">menu-item</span> <span class="s">&quot;Exit&quot;</span> <span class="nv">exit</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.setImageAutoSize</span> <span class="nv">icon</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.add</span> <span class="nv">tray</span> <span class="nv">icon</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">loop </span><span class="p">[]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">popup</span> <span class="p">(</span><span class="nf">PopupMenu.</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Updating items&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">add-hn-to-menu!</span> <span class="nv">popup</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">.add</span> <span class="nv">popup</span> <span class="nv">exit</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">.setPopupMenu</span> <span class="nv">icon</span> <span class="nv">popup</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="p">(</span><span class="nb">* </span><span class="mi">5</span> <span class="mi">60</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hardware Cut/Copy/Paste with Arduino Leonardo]]></title>
    <link href="http://blog.gonzih.me/blog/2014/03/04/hardware-cut-slash-copy-slash-paste-with-arduino-leonardo/"/>
    <updated>2014-03-04T10:02:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2014/03/04/hardware-cut-slash-copy-slash-paste-with-arduino-leonardo</id>
    <content type="html"><![CDATA[<p>Since I switched to Programmed Dvorak layout default keybindings for different operations started to annoy me sometimes.
I was thinking about hardware cut/copy/paste in apps even before that. But only with Dvorak I realized how useful it can be.
I always wondered why there is no hardware support for that on various keyboard that are out there. And then I saw <a href="http://keyboard.io">keyboard.io</a>.
Project is about hackable ergonomic mechanical keyboards build on top of Teensy/Arduino Micro boards. And I decided to play a little bit with that idea.
Lets start with implementing hardware cut/copy/paste using Leonardo and then lets see how far we can push the idea.</p>

<!-- more -->


<h2>Emulating keyboard on Leonardo.</h2>

<p>With release of first boards based on ATmega32u4 Keyboard and Mouse libraries were introduced in Arduino IDE.
Those libraries allow you to emulate fully functional mouse and keyboard from your Arduino board using USB connection. For more information take a look at the <a href="http://arduino.cc/en/Reference/MouseKeyboard">documentation</a>.</p>

<h2>Arduino wiring.</h2>

<p>Wiring will be very simple. We will have 3 buttons on pins 2, 3 and 4 with pull down resistors.</p>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/hardware-cut-copy-paste/schematics1.png" alt="schematics1" /></p>

<h2>Hardware Cut/Copy/Paste.</h2>

<p>So this will be our simplest solution to the my original idea. Here is Arduino sketch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// version 0.0.1</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">cutPin</span>   <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">copyPin</span>  <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">pastePin</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">cutPin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">copyPin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pinMode</span><span class="p">(</span><span class="n">pastePin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Keboard</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">cutpin</span><span class="p">)</span>   <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span> <span class="n">cut</span><span class="p">();</span>   <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">copypin</span><span class="p">)</span>  <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span> <span class="n">copy</span><span class="p">();</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">pastepin</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span> <span class="n">paste</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">pressCtrl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">press</span><span class="p">(</span><span class="n">KEY_LEFT_CTRL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">pressShift</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">press</span><span class="p">(</span><span class="n">KEY_LEFT_SHIFT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">cut</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pressCtrl</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sc">&#39;x&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">releaseAll</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">copy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pressCtrl</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sc">&#39;c&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">releaseAll</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">paste</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pressCtrl</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sc">&#39;v&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">releaseAll</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works! But&#8230; for example in my terminal I use Ctrl+Shift+C to copy selection.
Of course I can press Shift+Copy combination. But maybe there is a better solution.</p>

<h2>Automatic detection of key combination.</h2>

<p>Idea is simple. We have serial port open on Leonardo and our Linux PC.
When I&#8217;m pressing copy on Leonardo it will ask through serial port PC about required combination.
On PC there will be running ruby script that will detect currently focused window and look up at the configuration file for
keys combination. If there is no combination will be found or reply from script will be timed out we will use default combination.</p>

<h2>Detecting WM_CLASS from Ruby (2.0.0+).</h2>

<p>From my experience with Xmonad best method to detect unique window type is by WM_CLASS string from X properties.
Here is Window class for the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Window</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">current</span>
</span><span class='line'>    <span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="sb">`xprop -root`</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@root_data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id</span>
</span><span class='line'>    <span class="n">matches</span> <span class="o">=</span> <span class="vi">@root_data</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/_NET_ACTIVE_WINDOW\(WINDOW\)/</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">matches</span>
</span><span class='line'>      <span class="n">match_data</span> <span class="o">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/_NET_ACTIVE_WINDOW\(WINDOW\):.*#\s(.*)\n/</span><span class="p">)</span>
</span><span class='line'>      <span class="n">match_data</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s1">&#39;No Window id was found&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">wm_class</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="sb">`xprop -id &#39;</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="sb">&#39;`</span>
</span><span class='line'>    <span class="n">matches</span> <span class="o">=</span> <span class="n">out</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/WM_CLASS\(STRING\)/</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">matches</span>
</span><span class='line'>      <span class="n">match_data</span> <span class="o">=</span> <span class="n">matches</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/WM_CLASS\(STRING\)[^&quot;]*(&quot;.*&quot;)\n/</span><span class="p">)</span>
</span><span class='line'>      <span class="n">match_data</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&quot;/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s1">&#39;No Window class was found&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is_a?</span><span class="p">(</span><span class="n">class_string</span><span class="p">)</span>
</span><span class='line'>    <span class="n">wm_class</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span> <span class="o">==</span> <span class="n">class_string</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Window</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">wm_class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;gvim&quot;</span><span class="p">,</span> <span class="s2">&quot;Gvim&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Window</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="s2">&quot;gvim&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Keys configuration.</h2>

<p>For now lets implement simplest class for that and store all configuration in constant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Keys</span>
</span><span class='line'>  <span class="no">CONFIG</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;terminology&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;copy&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-c&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;cut&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-c&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;paste&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-v&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">[]</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="no">CONFIG</span><span class="o">[</span><span class="n">key</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">for</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
</span><span class='line'>    <span class="n">window</span><span class="o">.</span><span class="n">wm_class</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span>
</span><span class='line'>      <span class="no">CONFIG</span><span class="o">[</span><span class="n">k</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">compact</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Keys</span><span class="o">[</span><span class="s1">&#39;terminology&#39;</span><span class="o">][</span><span class="s1">&#39;copy&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-c&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When current window is terminology</span>
</span><span class='line'><span class="no">Keys</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="no">Window</span><span class="o">.</span><span class="n">current</span><span class="p">)</span><span class="o">[</span><span class="s1">&#39;copy&#39;</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s1">&#39;ctrl-shift-c&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Communicating with Arduino via SerialPort.</h2>

<p>Code below uses sketch described above with redefined copy/paste/cut functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">String</span> <span class="n">stringIn</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Let&#39;s assume than combination aren&#39;t longer than 4 keys</span>
</span><span class='line'><span class="n">String</span> <span class="n">collectedStrings</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">counter</span><span class="p">,</span> <span class="n">inByte</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setup</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stringIn</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">cut</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;cut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">copy</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;copy&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">paste</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;paste&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">resetReader</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">stringIn</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">collectedStrings</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">readLine</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">Serial</span><span class="p">.</span><span class="n">available</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">inByte</span> <span class="o">=</span> <span class="n">Serial</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
</span><span class='line'>    <span class="n">stringIn</span> <span class="o">+=</span> <span class="n">inByte</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">inByte</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">){</span>  <span class="c1">// Handle delimiter</span>
</span><span class='line'>      <span class="n">collectedStrings</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="n">stringIn</span><span class="p">);</span>
</span><span class='line'>      <span class="n">stringIn</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">inByte</span> <span class="o">==</span>  <span class="sc">&#39;\r&#39;</span><span class="p">){</span>  <span class="c1">// end of line</span>
</span><span class='line'>      <span class="n">resetReader</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">executeCombination</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pressKey</span><span class="p">(</span><span class="n">collectedstrings</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Keyboard</span><span class="p">.</span><span class="n">releaseAll</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">pressKeys</span><span class="p">(</span><span class="n">String</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s">&quot;ctrl&quot;</span><span class="o">:</span>
</span><span class='line'>      <span class="n">pressCtrl</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s">&quot;shift&quot;</span><span class="o">:</span>
</span><span class='line'>      <span class="n">pressShift</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="kt">char</span><span class="p">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">key</span><span class="p">.</span><span class="n">toCharArray</span><span class="p">();</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">k</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="n">Keyboard</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>More information on ruby-serialport is <a href="http://ruby-serialport.rubyforge.org/">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;serialport&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Connection</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">port</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">port</span>
</span><span class='line'>      <span class="n">port</span> <span class="o">=</span> <span class="sb">`ls /dev/ttyACM*`</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@connection</span> <span class="o">=</span> <span class="no">SerialPort</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="mi">9600</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">loop</span>
</span><span class='line'>    <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="n">action</span> <span class="o">=</span> <span class="vi">@connection</span><span class="o">.</span><span class="n">readline</span>
</span><span class='line'>        <span class="vi">@connection</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Keys</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="no">Window</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">wm_class</span><span class="p">)</span><span class="o">[</span><span class="n">action</span><span class="o">]</span><span class="si">}</span><span class="se">\r</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>        <span class="nb">p</span> <span class="n">e</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">loop</span> <span class="c1"># starts infinite loop</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>PS.</strong> This post is more like collection of theoretical pices of code.
I have no time (and probably enthusiasm) to put all this together (at least right now).
So this implementation can be broken and inaccurate in many ways.
Feel free to point out any errors and mistakes and I will fix them.</p>

<!--
vim: ts=2:sts=2:sw=2:expandtab
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VisualRuby gem on OpenSUSE 13.1]]></title>
    <link href="http://blog.gonzih.me/blog/2013/12/13/visualruby-gem-on-opensuse-13-dot-1/"/>
    <updated>2013-12-13T10:10:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2013/12/13/visualruby-gem-on-opensuse-13-dot-1</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/visualruby/1.png" alt="visualruby" /></p>

<p>I found out about ruby gem called <a href="http://visualruby.net/">visualruby</a> and decided to give it a try. Unfortunately it has a lot of dependencies that were missing on my system.
So to save my (or maybe your&#8217;s if you are reading this now) time in the future here are required dependencies for OpenSUSE 13.1.
I bet you can figure out similar packages for different distribution.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo zypper -n in <span class="se">\</span>
</span><span class='line'>glib2 glib2-branding-openSUSE glib2-devel <span class="se">\</span>
</span><span class='line'>atk-devel cairo-devel pango-devel gdk-pixbuf-devel <span class="se">\</span>
</span><span class='line'>gtk2-devel gtksourceview2-devel glade
</span></code></pre></td></tr></table></div></figure>


<p>Adjust glade command in settings to glade from glade-gtk2. And now you can run it! :)
It&#8217;s not working very well (at least in examples) since most of stuff in suse 13.1 is based on gtk3+.
But I&#8217;m still in process of figuring things out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yin-Yang Call/cc puzzle in Ruby]]></title>
    <link href="http://blog.gonzih.me/blog/2013/11/26/yin-yang-callcc-puzzle-in-ruby/"/>
    <updated>2013-11-26T11:23:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2013/11/26/yin-yang-callcc-puzzle-in-ruby</id>
    <content type="html"><![CDATA[<p>Digging deeper in to the call/cc land I found interesting puzzle called yin-yang.</p>

<p>Here is Scheme implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">yin</span>
</span><span class='line'>        <span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="o">#</span><span class="err">\</span><span class="nv">@</span><span class="p">)</span> <span class="nv">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">call-with-current-continuation </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span> <span class="nv">c</span><span class="p">))))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">yang</span>
</span><span class='line'>        <span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="o">#</span><span class="err">\</span><span class="nv">*</span><span class="p">)</span> <span class="nv">cc</span><span class="p">)</span> <span class="p">(</span><span class="nb">call-with-current-continuation </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span> <span class="nv">c</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">yin</span> <span class="nv">yang</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will print <code>@*@**@***@****@*****@******@...</code> forever.</p>

<!-- more -->


<p><a href="http://yinwang0.wordpress.com/2012/07/27/yin-yang-puzzle/">Here</a> you can find good explanation,
also few of explanations can be found on <a href="http://stackoverflow.com/questions/2694679/how-does-the-yin-yang-puzzle-work">StackOverflow</a>.</p>

<p>After I understand how it works I got all that excited and implemented given puzzle in ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;continuation&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">yin</span>  <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span> <span class="p">{</span> <span class="nb">print</span> <span class="s2">&quot;@&quot;</span><span class="p">;</span> <span class="n">cc</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">callcc</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="p">})</span>
</span><span class='line'><span class="n">yang</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span> <span class="p">{</span> <span class="nb">print</span> <span class="s2">&quot;*&quot;</span><span class="p">;</span> <span class="n">cc</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">callcc</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">yin</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">yang</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it doesn&#8217;t work. It prints <code>@*@*********...</code> forever.</p>

<p>No idea why. Maybe there are some limitations of <a href="http://www.ruby-doc.org/core-2.0.0/Continuation.html">ruby&#8217;s call/cc</a>.
I will research further, but if you have any information about that feel free to comment or email me.</p>

<p>Cheers!</p>

<p><strong>UPDATE</strong> Abinoam Praxedes Marques Junio <a href="https://www.ruby-forum.com/topic/4418860#1129811">figured</a> out that let (which is basically lambda application underneath) is crucial here.
So here is his fixed version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;continuation&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">yin</span><span class="p">,</span> <span class="n">yang</span><span class="o">|</span>
</span><span class='line'>  <span class="n">yin</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">yang</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">cc</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;@&quot;</span><span class="p">;</span> <span class="n">cc</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">callcc</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="p">}),</span>
</span><span class='line'>         <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">cc</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;*&quot;</span><span class="p">;</span> <span class="n">cc</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">callcc</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span> <span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSUSE 13.1 + Mate 1.6 + Xmonad]]></title>
    <link href="http://blog.gonzih.me/blog/2013/11/21/opensuse-13-dot-1-plus-mate-1-dot-6-plus-xmonad/"/>
    <updated>2013-11-21T22:46:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2013/11/21/opensuse-13-dot-1-plus-mate-1-dot-6-plus-xmonad</id>
    <content type="html"><![CDATA[<p>So OpenSUSE 13.1 was released. And it&#8217;s great. But&#8230;
Since gnome 3.9 support for custom window managers was broken.
How to restore sanity to your desktop? Mate it! Here is quick how to.</p>

<p><a href="https://dl.dropbox.com/u/4109351/octopress/suse-mate-xmonad/1.png"><img src="https://dl.dropbox.com/u/4109351/octopress/suse-mate-xmonad/re_1.png" alt="preview" /></a></p>

<!-- more -->


<p>Patterns for installing mate in OpenSUSE can be found here <a href="http://en.opensuse.org/Portal:MATE">http://en.opensuse.org/Portal:MATE</a></p>

<p>Xmonad can be installed using cabal install or using packages from OBS.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo zypper -n in xorg-x11-devel
</span><span class='line'>
</span><span class='line'>cabal install xmonad         --flags<span class="o">=</span><span class="s2">&quot;with_utf8 with_xft&quot;</span>
</span><span class='line'>cabal install xmonad-contrib --flags<span class="o">=</span><span class="s2">&quot;with_utf8 with_xft&quot;</span>
</span><span class='line'>cabal install xmobar         --flags<span class="o">=</span><span class="s2">&quot;with_utf8 with_xft&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create following file:</p>

<figure class='code'><figcaption><span>/usr/share/applications/xmonad.desktop</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[Desktop Entry]
</span><span class='line'>Type=Application
</span><span class='line'>Name=Xmonad
</span><span class='line'># Replace it with your xmonad launcher
</span><span class='line'>Exec=xmonad
</span><span class='line'>NoDisplay=true
</span><span class='line'>Terminal=false
</span><span class='line'>StartupNotify=false
</span><span class='line'>Categories=
</span></code></pre></td></tr></table></div></figure>


<p>Set xmonad as window manager for Mate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Mate 1.4</span>
</span><span class='line'>mateconftool-2 -s /desktop/mate/session/required_components/windowmanager xmonad --type string
</span><span class='line'>
</span><span class='line'><span class="c"># Mate 1.6</span>
</span><span class='line'>gsettings <span class="nb">set </span>org.mate.session.required-components windowmanager xmonad
</span></code></pre></td></tr></table></div></figure>


<p>If you have Gnome 3 installed make sure that gnome-settings daemon is not running in mate (can cause gsettings error).</p>

<p>Enjoy!</p>

<p>By the way I have some weird issues with gnome 3 apps rendering, no idea how to fix this for now.
Also <code>caja -n</code> which is responsible for displaying icons on desktop loves to hide my xmobar.
You can kill caja and mate will restore it (temporary fix).</p>

<p>If you have any tips feel free to comment!</p>

<p><strong>UPDATE 0</strong> issues with rendering was caused by <code>setWMName "LG3D"</code> in <code>startupHook</code>.
Removed it for now (probably will cause issues with some Java(AWT) applications).</p>

<p><strong>UPDATE 1</strong> If you want to disable desktop add following file:</p>

<figure class='code'><figcaption><span>/usr/share/applications/caja-no-desktop.desktop</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[Desktop Entry]
</span><span class='line'>Name=Caja
</span><span class='line'>Exec=caja -n --no-desktop
</span><span class='line'>Icon=system-file-manager
</span><span class='line'>Terminal=false
</span><span class='line'>Type=Application
</span><span class='line'>StartupNotify=true
</span><span class='line'>NoDisplay=true
</span><span class='line'>OnlyShowIn=MATE;
</span><span class='line'>X-MATE-Bugzilla-Bugzilla=MATE
</span><span class='line'>X-MATE-Bugzilla-Product=caja
</span><span class='line'>X-MATE-Bugzilla-Component=general
</span><span class='line'>X-MATE-Bugzilla-Version=1.6.2
</span><span class='line'>X-MATE-Autostart-Phase=Desktop
</span><span class='line'>X-MATE-Autostart-Notify=true
</span><span class='line'>X-MATE-AutoRestart=true
</span><span class='line'>X-MATE-Provides=filemanager
</span></code></pre></td></tr></table></div></figure>


<p>And now set it as default file manager for mate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Mate 1.6</span>
</span><span class='line'>gsettings <span class="nb">set </span>org.mate.session.required-components filemanager <span class="s2">&quot;caja-no-desktop&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also you can store all <code>*.desktop</code> files in <code>$HOME/.local/share/applications</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first experience with core.typed]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/30/my-first-experience-with-core-dot-typed/"/>
    <updated>2013-08-30T12:30:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/30/my-first-experience-with-core-dot-typed</id>
    <content type="html"><![CDATA[<p>Today I started improving my feeds2imap.clj project with core.typed.
And already hit few issues, so this post is something like collection of tips how to solve issues with core.typed based on my experience.
I couldn&#8217;t find answers on my issues in wiki or documentation.
But I got answers annoying Ambrose Bonnaire-Sergeant on Google+.
Thank you for your patience, man!
And keep doing what you are doing, core.typed is just amazing thing!</p>

<!--more-->


<h3>Unresolved constructor invocation</h3>

<p>Core.typed can&#8217;t match constructor based on arguments type,
you should provide type hints to help core.typed with that.</p>

<h3>By default core.typed assumes that all java methods can return nil</h3>

<p>Use <code>(non-nil-return ClassOrObject/methodName :all)</code> to tell core.typed that method won&#8217;t return nil.
Core.typed will trust you and will skip further checks.</p>

<p>Or for example if you are expecting String as a result you can convert result to String with str before returning it.</p>

<h3>non-nil-return in core.typed works only on methods</h3>

<p>And if you have static method then something like that would not work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">non-nil-return</span> <span class="nv">javax.mail.Message$RecipientType/TO</span> <span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ann</span> <span class="nv">recipient-type-to</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="nv">Message$RecipientType</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="nv">Message$RecipientType</span> <span class="nv">recipient-type-to</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Message$RecipientType/TO</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">comment</span>
</span><span class='line'>  <span class="nv">Type</span> <span class="nv">mismatch</span><span class="err">:</span>
</span><span class='line'>  <span class="nv">Expected</span><span class="err">:</span>       <span class="p">(</span><span class="nf">Fn</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="nv">Message$RecipientType</span><span class="p">])</span>
</span><span class='line'>  <span class="nv">Actual</span><span class="err">:</span>         <span class="p">(</span><span class="nf">Fn</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">U</span> <span class="nv">Message$RecipientType</span> <span class="nv">nil</span><span class="p">)]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">non-nil-return</span> <span class="nv">javax.mail.Message$RecipientType/TO</span> <span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ann</span> <span class="nv">recipient-type-to</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="nv">Message$RecipientType</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="nv">Message$RecipientType</span> <span class="nv">recipient-type-to</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:post</span> <span class="p">[</span><span class="nv">%</span><span class="p">]}</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Message$RecipientType/TO</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is the same as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">non-nil-return</span> <span class="nv">javax.mail.Message$RecipientType/TO</span> <span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ann</span> <span class="nv">recipient-type-to</span> <span class="p">[</span><span class="nb">-&gt; </span><span class="nv">Message$RecipientType</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="nv">Message$RecipientType</span> <span class="nv">recipient-type-to</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">temp</span> <span class="p">(</span><span class="nf">Message$RecipientType/TO</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">assert </span><span class="nv">temp</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">temp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So unless assert evaluates temp to logical true exception will be raised
and function will always return non nil value, which makes core.typed happy.</p>

<h3>Defining Parameterized alias type</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">def-alias</span> <span class="nv">Folder</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">TFn</span> <span class="p">[[</span><span class="nv">x</span> <span class="ss">:variance</span> <span class="ss">:covariant</span><span class="p">]]</span> <span class="p">(</span><span class="nf">Map</span> <span class="nv">Keyword</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">comment</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Folder</span> <span class="nv">Items</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Folder</span> <span class="nv">Urls</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/Gonzih/feeds2imap.clj/commit/1c41d814bdb054d57e644013c85275ec9a45a114">Here is</a> commit with changes related to core.typed.
I must say writing type annotations for code that you wrote few months ago is tricky.
But still I enjoyed process and results and I&#8217;m still a little bit amazed about all core.typed thing.
Power of lisp combined with really smart people :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheap standing desk]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/25/cheap-standing-desk/"/>
    <updated>2013-08-25T12:16:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/25/cheap-standing-desk</id>
    <content type="html"><![CDATA[<p>I love idea of standing desks.
I feel myself much more productive behind standing desk.
But commercial desks suffer from high price and complicated design.</p>

<p>Solution? Build your own standing desk!</p>

<!--more-->


<p>I started using standing desk by making small stand on top of my ordinary desk, so I can remove it when I&#8217;m to lazy to stand. It was one year ago.
After a while with that solution I decided to build my proper standing desk.
But how and what to use as materials? Plain wood is too heavy, expensive and build will take more time (if you want a nice looking desk).
And then I saw joints and pipes used in furniture.
I took unused small door from my desk, some metal pipes (25mm in diameter) and joints.
And best thing is that height is adjustable.
You can build it with 2 shelfs and make bottom one wider for keyboard and mouse and put display on the top shelf.
Easy to put together and take apart. Nice looking.
Cheap. Total cost of materials was ~35$.
For nice and clean cuts some old pipe cutter is perfect.</p>

<h2>Photos</h2>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/1.jpeg" alt="Standing Desk #1" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/2.jpeg" alt="Standing Desk #2" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/3.jpeg" alt="Standing Desk #3" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/4.jpeg" alt="Standing Desk #4" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed/Ping test graphs with Clojure and Raspberry Pi]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi/"/>
    <updated>2013-08-24T14:02:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I&#8217;m often complaining about my ISP quality.
Sometimes pings are high, sometimes download speed goes down.
So I decided to make sure it&#8217;s my ISP fault and not just my opinion based on my hate to them.</p>

<p>How to do so? Let&#8217;s collect data about download speed and pings over time, and show some graphs based on that data.</p>

<!-- more -->


<p>I have unused Raspberry Pi right now, so it will be used to collect data.</p>

<h2>Speedtest data</h2>

<p>For speedtest I will be using python script that uses speedtest.net servers.
Pi is running Pidora right now, so let&#8217;s install script dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum -y install python-argparse python-lxml
</span></code></pre></td></tr></table></div></figure>


<p>Script is hosted on <a href="https://github.com/Janhouse/tespeed">github</a>.
Let&#8217;s get the script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir ~/scripts
</span><span class='line'>wget https://raw.github.com/Janhouse/tespeed/master/tespeed.py -O ~/scripts/speedtest.py
</span></code></pre></td></tr></table></div></figure>


<p>You can test script running it with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>python ~/scripts/speedtest.py
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s wrap python script into additional shell script to store time of data collection in csv.
I&#8217;m not sure if I need time for now, but let&#8217;s keep it anyway.
We will silence stderr from the script and output results as csv.</p>

<figure class='code'><figcaption><span>~/bin/speedtest.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/zsh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;\&quot;$(date -R)\&quot;,$(python ~/scripts/tespeed.py --csv -s)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s put script into crontab to run every 5 minutes, also let&#8217;s redirect stderr to /dev/null in case of Ethernet unavailability or some other issues.</p>

<figure class='code'><figcaption><span>crontab</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*/5 * * * * ~/bin/speedtest.zsh 2&gt;/dev/null &gt;&gt; ~/.speedtest.csv
</span></code></pre></td></tr></table></div></figure>


<h2>Ping data</h2>

<p>For ping data we will be running <code>ping</code> command with 100 packets (<code>ping -c 100</code>) with google dns as target (8.8.8.8) and storing avg value with time to csv file.</p>

<figure class='code'><figcaption><span>~/bin/pingtest.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/zsh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">AVG</span><span class="o">=</span><span class="k">$(</span>ping -c 100 8.8.8.8 | grep rtt | sed -r <span class="s1">&#39;s#.*\=\s.+/(.+)/.+/.+#\1#&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;\&quot;$(date -R)\&quot;,$AVG&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>crontab</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*/5 * * * * ~/bin/pingtest.zsh 2&gt;/dev/null &gt;&gt; ~/.pingtest.csv
</span></code></pre></td></tr></table></div></figure>


<h2>Graphs</h2>

<p>For data visualization let&#8217;s use Clojure with Incanter. Here is clojure code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">incanter-graphs.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">incanter.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">incanter.stats</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">incanter.charts</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure-csv.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">to-f</span> <span class="p">[</span><span class="nv">is</span><span class="p">]</span> <span class="p">(</span><span class="nf">Float/parseFloat</span> <span class="nv">is</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-f-col</span> <span class="p">[</span><span class="nv">data</span> <span class="nv">col</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="nv">to-f</span> <span class="p">(</span><span class="nf">sel</span> <span class="nv">data</span> <span class="ss">:cols</span> <span class="nv">col</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">init-chart</span> <span class="p">[</span><span class="nv">data</span> <span class="nv">rng</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">x-label</span> <span class="nv">y-label</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">line-chart</span> <span class="nv">rng</span> <span class="nv">data</span> <span class="ss">:x-label</span> <span class="nv">x-label</span>
</span><span class='line'>                       <span class="ss">:y-label</span> <span class="nv">y-label</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-to-chart</span> <span class="p">[</span><span class="nv">chart</span> <span class="nv">data</span> <span class="nv">rng</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nf">add-categories</span> <span class="nv">%1</span> <span class="nv">rng</span> <span class="nv">%2</span><span class="p">)</span> <span class="nv">chart</span> <span class="nv">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">draw-file</span> <span class="p">[</span><span class="nv">filename</span> <span class="nv">cols</span> <span class="o">&amp;</span> <span class="p">{</span><span class="ss">:as</span> <span class="nv">opts</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">data</span> <span class="p">(</span><span class="nb">slurp </span><span class="nv">filename</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">csv</span> <span class="p">(</span><span class="nf">parse-csv</span> <span class="nv">data</span> <span class="ss">:delimiter</span> <span class="sc">\,</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">rng</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="p">(</span><span class="nb">count </span><span class="nv">csv</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nb">partial </span><span class="nv">get-f-col</span> <span class="nv">csv</span><span class="p">)</span> <span class="nv">cols</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">chart</span> <span class="p">(</span><span class="nf">init-chart</span> <span class="p">(</span><span class="nb">first </span><span class="nv">data</span><span class="p">)</span> <span class="nv">rng</span> <span class="nv">opts</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">chart-to-show</span> <span class="p">(</span><span class="nf">add-to-chart</span> <span class="nv">chart</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">data</span><span class="p">)</span> <span class="nv">rng</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">view</span> <span class="nv">chart-to-show</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="nv">speedfile</span> <span class="nv">pingfile</span> <span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">draw-file</span> <span class="nv">speedfile</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]</span> <span class="ss">:x-label</span> <span class="s">&quot;Time&quot;</span> <span class="ss">:y-label</span> <span class="s">&quot;Speed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">draw-file</span> <span class="nv">pingfile</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ss">:x-label</span> <span class="s">&quot;Time&quot;</span> <span class="ss">:y-label</span> <span class="s">&quot;Ping time&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s put all launch process to Makefile:</p>

<figure class='code'><figcaption><span>Makefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nf">default</span><span class="o">:</span>
</span><span class='line'>  scp raspberry-pi.local:.speedtest.csv /tmp/
</span><span class='line'>  scp raspberry-pi.local:.pingtest.csv /tmp/
</span><span class='line'><span class="c">  #Remove lines with only time (script failure)</span>
</span><span class='line'>  grep <span class="s2">&quot;[^,]$$&quot;</span> /tmp/.speedtest.csv &gt; /tmp/.speedtest-fixed.csv
</span><span class='line'>  grep <span class="s2">&quot;[^,]$$&quot;</span> /tmp/.pingtest.csv &gt; /tmp/.pingtest-fixed.csv
</span><span class='line'>  lein run /tmp/.speedtest-fixed.csv /tmp/.pingtest-fixed.csv
</span></code></pre></td></tr></table></div></figure>


<p>I adjusted my router, so QoS daemon will give maximum priority to traffic from my Raspberry Pi, so data will be cleaner.
And now we can see some visualization.</p>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/ping-speed-graphs/speed.png" alt="Speed Graph" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/ping-speed-graphs/ping.png" alt="Ping Graph" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSS/Atom reader in Clojure via IMAP]]></title>
    <link href="http://blog.gonzih.me/blog/2013/06/28/rss-slash-atom-reader-in-clojure-via-imap/"/>
    <updated>2013-06-28T10:15:00+00:00</updated>
    <id>http://blog.gonzih.me/blog/2013/06/28/rss-slash-atom-reader-in-clojure-via-imap</id>
    <content type="html"><![CDATA[<h3>Motivation</h3>

<p>Google Reader was shut down and I started looking for alternatives.
And sadly I did not found anything close to Google Reader experience.
There are plenty good alternatives, but all of them suffer from some kind of background noise (social based features, weird hotkeys, weird ui, unusable mobile clients and etc.).
All I wanted was simple to use news reader.</p>

<!-- more -->


<h3>Idea</h3>

<p>Then I found post in the Racket community about storing your feeds in the IMAP folders using &#8220;APPEND&#8221; command by <a href="http://www.greghendershott.com/2013/05/feeds2gmail.html">Greg Hendershott</a>.
That was it. Simplest possible solution, that I can run on small device or server by cron. I played a little bit with Racket source code and decided to write my own version to do the job.</p>

<h3>Clojure version</h3>

<p>First I implemented my <a href="https://github.com/Gonzih/feeds2imap.rb">prototype in Ruby</a> in few hours. I picked up Ruby because of built-in rss/atom and imap libraries.
I used it for few days and liked it. Simple, reliable solution.
So then I decided to rewrite it in Clojure.
Why Clojure?
Because it&#8217;s pure fun to use.
I decided to use java.mail framework for message storing and folder manipulations, feedparser-clj to fetch and parse rss/atom feeds and hiccup for templating.
I was really pleased with feedparser-clj in comparison with Ruby built-in library.
java.mail framework was not so bad as I was expecting at first.</p>

<h3>How it works?</h3>

<p>Here is project logic:</p>

<ul>
<li>Fetch folders and urls from feeds file.</li>
<li>Fetch and parse RSS/Atom data from urls.</li>
<li>Select only new items using cache file.</li>
<li>Create required imap folders.</li>
<li>Store new items as email messages.</li>
<li>Mark items as read (put md5 hashes in to the clj file with set of old hashes).</li>
</ul>


<p>It&#8217;s running now by cron (every hour) on my BeagleBone (using latest ejre version).</p>

<p>Source code is hosted on github <a href="https://github.com/Gonzih/feeds2imap.clj">here</a>. Take a look at project README for usage.</p>

<h3>More implementations</h3>

<ul>
<li><a href="https://github.com/Gonzih/feeds2imap.rb">My Ruby prototype</a></li>
<li><a href="https://github.com/Gonzih/feeds2imap.clj">My Clojure implementation</a></li>
<li><a href="https://github.com/greghendershott/feeds2gmail">Racket implementation</a></li>
<li><a href="https://github.com/cordawyn/rss2imap">Haskell implementation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
